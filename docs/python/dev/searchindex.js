Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.approx_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.symmetric_difference", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.approx_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.symmetric_difference", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.approx_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.approx_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.symmetric_difference.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.concat", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.approx_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.symmetric_difference", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.approx_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.symmetric_difference", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 93, 121, 137, 186, 254, 268, 461, 630, 665, 760, 772, 810, 967, 1099], "refer": [0, 31, 102, 103, 104, 108, 109, 110, 111, 112, 113, 115, 145, 268, 362, 365, 459, 460, 496, 539, 559, 560, 561, 564, 665, 687, 725, 772, 869, 872, 987, 1055, 1056, 1057, 1060, 1099], "input": [0, 69, 75, 95, 103, 104, 108, 141, 164, 167, 186, 196, 211, 212, 219, 233, 243, 244, 247, 268, 275, 377, 397, 453, 460, 461, 470, 487, 529, 587, 589, 591, 592, 594, 597, 600, 601, 602, 609, 616, 617, 624, 625, 626, 628, 629, 630, 632, 636, 644, 647, 649, 655, 661, 665, 676, 681, 699, 702, 729, 730, 731, 737, 742, 748, 749, 753, 772, 901, 963, 964, 966, 967, 1099], "output": [0, 26, 28, 31, 32, 33, 34, 35, 48, 108, 138, 165, 166, 168, 169, 180, 186, 191, 196, 198, 207, 211, 239, 243, 268, 278, 280, 282, 324, 457, 458, 459, 461, 469, 493, 508, 510, 512, 514, 584, 588, 590, 592, 603, 611, 612, 628, 629, 630, 652, 665, 676, 700, 701, 703, 704, 713, 714, 718, 719, 729, 731, 748, 752, 755, 760, 772, 779, 780, 782, 826, 967, 985, 1087, 1099], "seri": [0, 1, 2, 23, 61, 70, 71, 72, 73, 76, 92, 94, 97, 99, 125, 129, 148, 156, 159, 161, 162, 166, 170, 173, 174, 176, 178, 187, 188, 192, 203, 204, 221, 225, 228, 231, 232, 248, 268, 281, 282, 293, 300, 308, 309, 311, 358, 380, 386, 395, 399, 401, 402, 404, 406, 407, 408, 420, 426, 429, 442, 443, 447, 448, 449, 455, 457, 459, 461, 490, 496, 497, 498, 499, 500, 502, 504, 505, 511, 517, 518, 521, 532, 553, 559, 560, 561, 564, 568, 574, 575, 583, 592, 593, 594, 598, 599, 604, 606, 607, 611, 612, 617, 618, 620, 622, 624, 625, 626, 627, 628, 629, 630, 633, 634, 637, 638, 640, 641, 644, 646, 647, 650, 652, 653, 654, 656, 665, 676, 696, 701, 754, 772, 1091, 1093, 1095, 1098, 1100, 1103, 1104, 1105, 1107], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 118, 119, 120, 124, 125, 126, 127, 135, 266, 267, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 614, 615, 616, 617, 618, 619, 620, 622, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 661, 665, 676, 685, 688, 692, 693, 697, 700, 708, 709, 710, 711, 713, 714, 718, 719, 723, 727, 736, 737, 743, 744, 745, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 781, 796, 797, 808, 826, 827, 865, 897, 926, 927, 935, 967, 985, 1039, 1051, 1052, 1068, 1076, 1077, 1087, 1099, 1106, 1107], "lazyfram": [0, 1, 54, 55, 57, 59, 69, 70, 71, 72, 73, 75, 76, 116, 117, 118, 119, 120, 121, 124, 129, 184, 197, 212, 244, 268, 306, 383, 449, 665, 676, 771, 775, 1106, 1107], "express": [0, 48, 49, 50, 75, 126, 129, 131, 141, 152, 154, 156, 164, 167, 186, 194, 198, 206, 211, 212, 219, 233, 243, 244, 247, 254, 268, 275, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 292, 293, 300, 302, 303, 304, 306, 312, 313, 314, 315, 316, 317, 323, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 372, 373, 377, 379, 380, 382, 383, 387, 389, 390, 391, 395, 397, 399, 400, 401, 402, 403, 405, 410, 413, 414, 418, 419, 421, 422, 425, 426, 431, 449, 455, 456, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 472, 474, 476, 478, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 495, 499, 500, 502, 516, 517, 518, 520, 522, 524, 525, 527, 529, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 548, 549, 550, 553, 554, 555, 556, 570, 571, 574, 576, 577, 580, 581, 583, 584, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 629, 630, 632, 636, 638, 640, 641, 642, 643, 644, 645, 647, 649, 651, 652, 653, 655, 656, 661, 664, 676, 681, 685, 691, 692, 693, 696, 699, 702, 723, 729, 730, 734, 735, 737, 742, 748, 749, 750, 753, 760, 772, 775, 815, 816, 817, 825, 835, 887, 901, 932, 935, 967, 1008, 1015, 1029, 1030, 1035, 1036, 1037, 1038, 1039, 1045, 1046, 1099], "selector": [0, 31, 147, 149, 152, 196, 198, 227, 235, 237, 268, 377, 665, 676, 688, 689, 692, 718, 743, 772], "extend": [0, 95, 241, 268, 380, 665, 676, 781, 887, 1099], "function": [0, 31, 69, 70, 71, 72, 73, 93, 99, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 116, 127, 137, 138, 145, 151, 159, 186, 190, 197, 198, 230, 234, 237, 238, 249, 254, 268, 278, 282, 323, 359, 374, 375, 376, 449, 457, 458, 459, 461, 487, 489, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 526, 578, 588, 592, 606, 607, 617, 618, 620, 626, 628, 629, 630, 640, 661, 665, 676, 687, 713, 714, 718, 722, 725, 745, 755, 760, 772, 782, 825, 866, 880, 881, 882, 883, 897, 959, 967, 985, 995, 996, 1010, 1011, 1017, 1022, 1081, 1099, 1107], "data": [0, 1, 6, 16, 17, 19, 29, 30, 31, 32, 33, 37, 48, 49, 50, 54, 60, 69, 70, 72, 76, 77, 82, 83, 87, 89, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 124, 125, 127, 128, 129, 131, 137, 143, 153, 163, 164, 165, 166, 167, 168, 169, 180, 181, 182, 184, 186, 196, 197, 201, 206, 207, 208, 217, 224, 229, 230, 234, 243, 246, 266, 268, 278, 279, 280, 284, 285, 286, 287, 288, 289, 292, 295, 296, 297, 298, 300, 302, 303, 304, 307, 308, 315, 316, 324, 325, 330, 331, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 366, 367, 368, 369, 370, 372, 373, 379, 390, 391, 396, 397, 399, 400, 401, 402, 403, 404, 406, 413, 418, 419, 421, 426, 431, 451, 456, 461, 482, 483, 486, 487, 493, 495, 496, 499, 500, 502, 515, 516, 524, 525, 526, 532, 534, 536, 538, 539, 540, 541, 543, 548, 553, 554, 555, 556, 559, 560, 561, 564, 574, 576, 577, 578, 580, 581, 584, 587, 592, 594, 610, 611, 612, 613, 614, 624, 625, 627, 628, 629, 630, 638, 641, 651, 652, 653, 656, 661, 665, 676, 683, 684, 693, 699, 700, 701, 702, 703, 704, 722, 748, 772, 779, 780, 781, 792, 796, 797, 798, 800, 804, 806, 814, 818, 826, 833, 834, 837, 838, 839, 840, 841, 843, 844, 845, 846, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 870, 873, 874, 875, 876, 877, 885, 886, 897, 903, 905, 906, 908, 909, 912, 913, 914, 915, 919, 928, 929, 931, 936, 941, 961, 967, 979, 985, 987, 991, 993, 1006, 1007, 1017, 1022, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1043, 1044, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1060, 1079, 1080, 1081, 1082, 1084, 1089, 1098, 1099, 1106], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 82, 92, 94, 95, 96, 97, 98, 103, 104, 105, 107, 108, 112, 113, 116, 117, 123, 124, 125, 128, 129, 138, 159, 163, 165, 166, 168, 169, 170, 181, 182, 186, 224, 230, 232, 235, 268, 278, 280, 284, 285, 286, 287, 288, 289, 292, 300, 302, 303, 304, 307, 308, 309, 312, 313, 314, 315, 316, 324, 325, 330, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 368, 370, 377, 379, 392, 397, 399, 400, 401, 402, 403, 418, 419, 421, 426, 431, 449, 460, 461, 493, 495, 499, 500, 502, 524, 525, 532, 534, 536, 538, 539, 540, 541, 543, 548, 553, 554, 555, 556, 559, 574, 576, 577, 578, 584, 592, 594, 610, 611, 612, 613, 614, 616, 617, 624, 625, 626, 627, 628, 629, 630, 638, 641, 651, 652, 653, 656, 661, 665, 676, 685, 691, 693, 700, 701, 703, 704, 708, 723, 735, 743, 772, 779, 780, 792, 798, 800, 804, 806, 808, 815, 816, 817, 826, 833, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 873, 874, 875, 877, 885, 895, 903, 905, 906, 908, 909, 912, 913, 914, 915, 919, 928, 929, 931, 936, 941, 959, 979, 985, 991, 993, 1017, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1043, 1044, 1049, 1050, 1051, 1052, 1055, 1079, 1080, 1082, 1090, 1099, 1106], "config": [0, 69, 211, 243, 268, 614, 676, 729, 748, 772], "except": [0, 171, 183, 185, 222, 268, 616, 676, 709, 772, 775, 896, 924, 1070, 1080, 1089, 1099], "test": [0, 6, 106, 108, 676, 705, 712, 772], "util": [0, 99, 620, 676, 693, 772], "sql": [0, 29, 54, 58, 105, 106, 182, 268, 645, 676], "These": [1, 31, 135, 234, 268, 366, 664, 866, 873], "allow": [1, 30, 31, 48, 49, 50, 60, 82, 93, 116, 118, 119, 120, 121, 129, 131, 137, 180, 183, 184, 206, 207, 209, 229, 230, 235, 246, 268, 355, 362, 365, 459, 461, 498, 516, 559, 560, 561, 665, 708, 709, 713, 714, 718, 743, 750, 772, 775, 862, 869, 872, 967, 989, 1007, 1009, 1055, 1056, 1057, 1081, 1099, 1107], "you": [1, 13, 31, 36, 50, 59, 69, 76, 92, 94, 95, 96, 98, 103, 104, 105, 106, 108, 109, 112, 113, 114, 116, 120, 124, 135, 153, 165, 166, 168, 169, 180, 186, 194, 206, 207, 208, 226, 229, 234, 254, 268, 312, 313, 314, 351, 352, 355, 358, 362, 365, 366, 377, 383, 397, 425, 449, 459, 460, 461, 498, 503, 506, 507, 508, 509, 510, 512, 513, 514, 544, 547, 606, 614, 618, 630, 638, 641, 656, 665, 685, 689, 700, 701, 703, 704, 705, 712, 735, 760, 772, 775, 781, 815, 816, 817, 858, 859, 865, 869, 872, 873, 886, 901, 935, 967, 989, 994, 1040, 1043, 1057, 1080, 1089, 1099, 1107], "regist": [1, 54, 56, 57, 58, 59, 70, 71, 72, 73, 130, 132, 1106], "custom": [1, 30, 31, 70, 71, 72, 73, 130, 131, 132, 138, 186, 249, 254, 268, 282, 362, 365, 449, 457, 459, 461, 504, 505, 592, 628, 629, 630, 665, 713, 714, 755, 760, 772, 782, 869, 872, 959, 967, 995, 996, 1099, 1107], "dedic": [1, 93, 180, 207, 268], "namespac": [1, 267, 664, 676, 771, 1107], "underli": [1, 78, 85, 92, 94, 95, 96, 98, 105, 112, 113, 114, 126, 129, 131, 152, 153, 180, 181, 207, 224, 268, 301, 331, 332, 336, 340, 342, 343, 344, 346, 348, 350, 353, 356, 357, 358, 360, 367, 368, 369, 370, 498, 515, 533, 535, 665, 692, 772, 775, 781, 799, 809, 834, 835, 839, 843, 845, 846, 850, 852, 855, 857, 860, 863, 864, 865, 867, 874, 875, 876, 877, 886, 989, 1006, 1017, 1029, 1031, 1075, 1080, 1099], "polar": [1, 268, 664, 665, 670, 676, 772, 775, 1099, 1106], "class": [1, 2, 3, 4, 5, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 126, 127, 208, 230, 268, 652, 661, 665, 670, 676, 725, 772, 1079, 1080, 1099, 1106], "without": [1, 99, 105, 107, 110, 115, 117, 121, 237, 238, 268, 282, 323, 359, 506, 507, 508, 509, 510, 512, 513, 514, 644, 665, 745, 772, 807, 810, 825, 866, 897, 985, 1080, 1099], "requir": [1, 30, 31, 36, 50, 69, 93, 97, 124, 125, 141, 145, 206, 230, 233, 268, 298, 374, 375, 376, 451, 461, 521, 559, 560, 561, 581, 641, 665, 681, 737, 742, 772, 797, 881, 882, 883, 961, 1016, 1055, 1056, 1057, 1080, 1081, 1084, 1099], "subclass": [1, 268], "mixin": 1, "expr": [1, 69, 70, 71, 72, 73, 152, 154, 156, 182, 183, 194, 198, 206, 211, 212, 243, 244, 268, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 660, 661, 665, 666, 667, 670, 671, 672, 673, 692, 694, 708, 709, 724, 729, 730, 731, 734, 748, 749, 772, 825, 835, 862, 888, 926, 927, 932, 935, 939, 953, 957, 1015, 1029, 1033, 1053, 1071, 1099], "ar": [1, 9, 11, 15, 18, 26, 28, 30, 31, 48, 49, 50, 59, 60, 69, 76, 77, 84, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 116, 117, 118, 119, 121, 124, 125, 127, 129, 135, 137, 141, 145, 149, 151, 154, 158, 159, 163, 164, 165, 166, 167, 168, 169, 180, 182, 183, 184, 186, 190, 191, 196, 198, 206, 207, 208, 211, 212, 213, 219, 225, 230, 233, 238, 239, 243, 244, 247, 268, 278, 280, 306, 319, 321, 322, 359, 366, 371, 373, 374, 375, 376, 397, 399, 401, 402, 404, 406, 407, 408, 411, 416, 449, 459, 460, 483, 487, 493, 496, 499, 500, 506, 507, 508, 509, 510, 511, 512, 513, 514, 523, 526, 528, 529, 541, 542, 543, 544, 547, 548, 572, 588, 589, 591, 597, 600, 601, 602, 603, 609, 611, 612, 632, 636, 644, 647, 649, 652, 653, 655, 657, 658, 660, 664, 665, 666, 667, 670, 671, 672, 673, 676, 681, 689, 694, 699, 700, 701, 702, 703, 704, 705, 708, 709, 712, 714, 718, 719, 723, 726, 729, 730, 732, 737, 742, 745, 748, 749, 750, 753, 772, 775, 779, 780, 781, 807, 823, 824, 866, 873, 879, 880, 881, 882, 883, 894, 901, 905, 908, 909, 912, 913, 914, 915, 922, 926, 959, 985, 987, 991, 1002, 1019, 1022, 1037, 1038, 1040, 1043, 1044, 1057, 1069, 1080, 1081, 1089, 1091, 1093, 1095, 1099, 1100, 1103, 1104, 1105, 1107], "all": [1, 8, 15, 18, 23, 26, 28, 31, 37, 48, 56, 69, 75, 92, 95, 97, 98, 103, 104, 107, 108, 109, 111, 114, 116, 118, 119, 126, 127, 131, 135, 146, 149, 155, 171, 176, 178, 180, 181, 184, 185, 190, 193, 194, 201, 206, 207, 208, 212, 218, 222, 227, 229, 235, 237, 239, 244, 268, 279, 281, 299, 317, 323, 328, 329, 330, 377, 382, 388, 392, 394, 396, 399, 402, 407, 408, 410, 414, 425, 431, 445, 449, 458, 459, 477, 485, 491, 496, 501, 505, 521, 527, 529, 534, 540, 541, 542, 543, 546, 549, 550, 552, 558, 571, 589, 608, 609, 611, 616, 618, 623, 640, 647, 648, 649, 655, 661, 665, 670, 676, 685, 689, 691, 693, 695, 713, 714, 718, 723, 730, 735, 736, 743, 749, 750, 772, 775, 825, 827, 830, 831, 833, 896, 903, 919, 924, 935, 941, 955, 959, 987, 996, 1023, 1030, 1036, 1037, 1038, 1039, 1042, 1045, 1046, 1048, 1054, 1070, 1099, 1106, 1107], "support": [1, 30, 31, 36, 76, 92, 93, 94, 95, 96, 97, 98, 99, 105, 106, 107, 108, 112, 113, 117, 126, 131, 135, 180, 181, 182, 183, 207, 208, 218, 219, 226, 230, 268, 443, 487, 527, 529, 553, 661, 665, 670, 708, 709, 736, 737, 772, 775, 953, 1023, 1049, 1081, 1099, 1106], "target": [1, 29, 30, 31, 74, 268, 539, 559, 560, 561, 611, 775, 1035, 1055, 1056, 1057], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 34, 36, 40, 48, 49, 50, 54, 55, 59, 60, 69, 75, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 135, 137, 138, 139, 140, 141, 145, 149, 150, 151, 153, 158, 159, 163, 164, 165, 166, 167, 168, 169, 170, 174, 176, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 206, 207, 208, 209, 211, 212, 216, 218, 220, 221, 224, 226, 229, 230, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245, 249, 250, 254, 267, 268, 278, 281, 282, 283, 292, 298, 305, 306, 308, 309, 317, 323, 324, 330, 331, 343, 351, 352, 355, 358, 359, 362, 365, 369, 373, 379, 395, 396, 397, 401, 405, 410, 414, 424, 425, 426, 430, 431, 438, 439, 440, 441, 444, 446, 449, 450, 451, 454, 455, 457, 459, 461, 465, 466, 467, 468, 469, 470, 480, 481, 483, 487, 491, 493, 496, 497, 498, 499, 500, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 516, 518, 520, 521, 522, 527, 528, 529, 539, 545, 546, 551, 552, 558, 562, 567, 571, 579, 581, 582, 583, 584, 588, 592, 593, 601, 604, 606, 611, 612, 617, 618, 620, 626, 628, 630, 641, 644, 652, 655, 661, 665, 676, 677, 679, 680, 681, 682, 685, 689, 691, 693, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 713, 714, 718, 719, 723, 725, 726, 729, 730, 731, 734, 735, 736, 737, 742, 743, 745, 748, 749, 750, 751, 752, 755, 756, 760, 771, 772, 775, 781, 782, 791, 797, 803, 806, 808, 809, 810, 825, 826, 833, 834, 835, 846, 858, 859, 862, 865, 866, 869, 872, 876, 880, 885, 886, 893, 894, 897, 902, 907, 908, 910, 916, 918, 920, 921, 923, 934, 935, 936, 940, 941, 948, 949, 950, 951, 954, 956, 960, 961, 965, 967, 968, 969, 970, 971, 973, 974, 976, 977, 980, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 997, 998, 1000, 1003, 1004, 1005, 1007, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1023, 1024, 1026, 1035, 1041, 1042, 1047, 1048, 1054, 1057, 1058, 1063, 1064, 1068, 1069, 1075, 1077, 1079, 1080, 1081, 1083, 1084, 1086, 1087, 1088, 1089, 1099, 1106, 1107], "featur": [1, 36, 40, 60, 74, 268], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 35, 40, 48, 49, 50, 54, 59, 60, 69, 74, 75, 76, 79, 81, 82, 84, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 126, 127, 128, 129, 131, 133, 135, 139, 141, 149, 151, 153, 156, 160, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 194, 196, 197, 198, 206, 207, 208, 209, 212, 218, 219, 220, 221, 222, 224, 229, 230, 233, 234, 235, 237, 238, 239, 240, 244, 246, 250, 254, 267, 268, 275, 278, 280, 281, 282, 283, 293, 306, 317, 323, 324, 328, 329, 330, 332, 342, 355, 359, 362, 366, 374, 375, 376, 379, 383, 392, 395, 397, 411, 417, 425, 428, 443, 448, 449, 454, 459, 460, 461, 465, 468, 470, 487, 493, 496, 498, 499, 500, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 522, 523, 526, 527, 528, 529, 531, 533, 534, 539, 540, 541, 543, 545, 546, 548, 549, 551, 552, 553, 556, 558, 559, 560, 561, 564, 567, 584, 585, 588, 590, 593, 598, 601, 603, 604, 606, 607, 611, 612, 618, 627, 630, 641, 642, 643, 644, 646, 652, 654, 655, 661, 665, 679, 681, 685, 689, 691, 693, 696, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 711, 713, 714, 718, 719, 723, 730, 731, 735, 736, 737, 738, 742, 743, 745, 746, 749, 752, 755, 756, 760, 772, 775, 779, 780, 781, 782, 807, 810, 825, 826, 830, 831, 833, 835, 845, 862, 866, 869, 873, 880, 881, 882, 883, 885, 886, 890, 894, 895, 896, 897, 902, 904, 910, 916, 917, 918, 920, 921, 922, 924, 927, 935, 938, 953, 958, 959, 967, 985, 987, 989, 991, 994, 996, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1018, 1019, 1022, 1023, 1026, 1029, 1030, 1035, 1036, 1037, 1039, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1052, 1054, 1055, 1056, 1057, 1060, 1063, 1070, 1075, 1080, 1081, 1087, 1088, 1089, 1099, 1106, 1107], "primarili": 1, "intend": [1, 611], "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 36, 39, 48, 50, 54, 55, 56, 57, 59, 60, 69, 76, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 109, 111, 114, 116, 117, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 131, 133, 138, 139, 147, 149, 154, 155, 159, 164, 165, 166, 167, 168, 169, 176, 178, 180, 181, 183, 186, 188, 190, 193, 194, 196, 197, 198, 206, 207, 208, 209, 211, 212, 219, 220, 221, 226, 227, 228, 229, 230, 234, 235, 237, 238, 239, 240, 243, 244, 247, 254, 268, 276, 278, 280, 282, 283, 293, 301, 302, 309, 323, 328, 329, 358, 362, 365, 366, 369, 371, 374, 375, 376, 377, 382, 383, 396, 397, 411, 425, 449, 459, 460, 461, 464, 487, 493, 496, 498, 500, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 518, 521, 526, 528, 529, 531, 533, 535, 536, 537, 539, 540, 542, 544, 545, 549, 551, 553, 555, 557, 559, 560, 561, 564, 585, 588, 589, 590, 591, 593, 599, 602, 603, 606, 608, 609, 611, 612, 613, 614, 618, 620, 627, 630, 631, 632, 635, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 652, 654, 656, 661, 664, 665, 675, 676, 679, 685, 688, 689, 694, 695, 698, 699, 700, 701, 703, 704, 705, 709, 711, 712, 718, 729, 730, 737, 738, 743, 745, 746, 748, 749, 753, 760, 772, 775, 779, 780, 781, 782, 799, 800, 808, 810, 825, 826, 830, 831, 865, 869, 872, 873, 876, 879, 881, 882, 883, 888, 889, 894, 897, 900, 901, 922, 935, 959, 966, 967, 985, 987, 989, 991, 994, 996, 1007, 1010, 1011, 1012, 1016, 1018, 1022, 1026, 1029, 1031, 1032, 1035, 1036, 1038, 1040, 1041, 1045, 1047, 1049, 1051, 1055, 1056, 1057, 1060, 1071, 1076, 1078, 1079, 1080, 1081, 1088, 1089, 1099, 1106, 1107], "librari": [1, 78, 85, 105, 108, 459, 665, 772, 1107], "author": 1, "domain": [1, 540, 1036], "specif": [1, 26, 30, 31, 92, 94, 96, 98, 103, 106, 107, 112, 113, 117, 128, 129, 180, 268, 362, 365, 559, 560, 561, 564, 772, 775, 869, 872, 1055, 1056, 1057, 1060, 1099, 1107], "capabl": [1, 31, 268], "which": [1, 9, 18, 27, 28, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 69, 70, 71, 72, 73, 95, 103, 104, 106, 107, 108, 116, 117, 124, 130, 132, 141, 149, 153, 154, 164, 165, 166, 167, 168, 169, 183, 229, 233, 235, 239, 268, 278, 306, 355, 359, 362, 366, 380, 397, 399, 402, 404, 406, 407, 408, 449, 461, 470, 503, 506, 507, 508, 509, 510, 512, 513, 514, 548, 611, 612, 614, 652, 653, 655, 665, 681, 689, 691, 700, 701, 703, 704, 709, 731, 742, 743, 752, 772, 781, 862, 866, 869, 873, 886, 887, 901, 905, 909, 912, 913, 914, 915, 959, 994, 1010, 1044, 1080, 1099, 1107], "mai": [1, 30, 40, 50, 76, 92, 94, 95, 96, 98, 103, 107, 109, 112, 113, 117, 118, 121, 151, 153, 165, 166, 183, 186, 215, 216, 230, 237, 238, 239, 268, 282, 323, 330, 331, 343, 355, 359, 366, 377, 442, 448, 449, 459, 461, 469, 506, 507, 508, 509, 510, 512, 513, 514, 519, 520, 606, 607, 611, 618, 640, 665, 700, 701, 709, 713, 714, 733, 734, 745, 751, 755, 760, 772, 781, 809, 810, 825, 833, 834, 846, 862, 866, 873, 880, 886, 897, 952, 958, 967, 985, 1014, 1015, 1057, 1080, 1099, 1107], "exist": [1, 29, 30, 31, 69, 107, 117, 129, 234, 243, 244, 268, 277, 300, 303, 304, 332, 665, 748, 749, 772, 775, 835], "belong": [1, 165, 268, 700, 772], "core": [1, 230, 268, 1107], "cannot": [1, 103, 104, 108, 109, 124, 133, 186, 208, 209, 254, 268, 301, 377, 460, 461, 516, 535, 555, 569, 630, 665, 735, 760, 772, 799, 967, 1007, 1031, 1051, 1099], "overrid": [1, 31, 92, 94, 95, 96, 97, 98, 103, 105, 106, 112, 113, 126, 127, 131, 133, 268, 460, 665, 772, 966, 1099], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 69, 70, 71, 72, 73, 74, 77, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 127, 129, 130, 131, 132, 135, 141, 144, 146, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 171, 173, 176, 178, 179, 180, 182, 183, 187, 188, 189, 190, 191, 192, 194, 196, 198, 200, 202, 203, 204, 205, 206, 207, 209, 213, 215, 216, 218, 219, 220, 221, 222, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 275, 276, 277, 300, 302, 303, 304, 308, 324, 327, 333, 355, 358, 359, 362, 365, 366, 377, 379, 383, 385, 389, 395, 397, 420, 421, 428, 429, 431, 443, 447, 449, 458, 460, 461, 469, 471, 472, 474, 484, 487, 489, 491, 493, 499, 501, 503, 506, 507, 508, 509, 510, 512, 513, 514, 520, 521, 528, 529, 568, 569, 571, 574, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 661, 665, 671, 681, 685, 686, 687, 688, 689, 691, 692, 693, 696, 698, 699, 700, 701, 703, 704, 706, 708, 709, 718, 719, 723, 725, 726, 727, 731, 732, 734, 735, 736, 737, 742, 743, 744, 745, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 778, 804, 806, 826, 827, 836, 862, 865, 866, 869, 872, 873, 885, 889, 931, 932, 941, 959, 966, 976, 977, 985, 990, 1010, 1011, 1064, 1066, 1076, 1077, 1078, 1087, 1099, 1103, 1106, 1107], "dt": [1, 69, 166, 268, 611, 614, 673, 701, 772, 775, 1105], "attempt": [1, 229, 268, 611, 612], "do": [1, 31, 48, 49, 50, 69, 75, 76, 103, 108, 116, 124, 125, 153, 165, 166, 168, 169, 183, 198, 224, 234, 237, 268, 323, 425, 487, 546, 552, 558, 638, 641, 656, 665, 685, 691, 700, 701, 703, 704, 709, 713, 714, 723, 735, 772, 775, 781, 825, 886, 935, 1042, 1048, 1054, 1080, 1089, 1099], "so": [1, 60, 106, 108, 116, 133, 163, 165, 166, 168, 169, 198, 268, 293, 306, 397, 428, 449, 461, 546, 552, 558, 665, 700, 701, 703, 704, 772, 938, 1042, 1048, 1054], "rais": [1, 14, 18, 30, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 103, 104, 108, 116, 124, 125, 137, 198, 206, 268, 301, 358, 366, 448, 469, 493, 533, 535, 548, 559, 560, 561, 564, 613, 627, 665, 772, 799, 865, 873, 958, 985, 1029, 1031, 1044, 1055, 1056, 1057, 1060, 1080, 1089, 1099], "an": [1, 26, 28, 29, 30, 31, 40, 48, 70, 72, 73, 75, 78, 82, 83, 85, 92, 103, 104, 105, 106, 107, 108, 110, 114, 116, 118, 127, 129, 131, 142, 143, 151, 154, 156, 159, 165, 166, 168, 169, 180, 181, 183, 186, 194, 198, 204, 206, 224, 229, 234, 237, 243, 254, 268, 277, 301, 307, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 332, 333, 355, 358, 362, 369, 380, 382, 383, 389, 410, 422, 425, 428, 448, 449, 458, 459, 461, 470, 492, 493, 500, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 533, 535, 540, 559, 560, 561, 564, 574, 580, 588, 594, 598, 611, 612, 615, 620, 624, 625, 627, 638, 640, 641, 644, 647, 652, 653, 655, 656, 661, 665, 676, 683, 684, 685, 691, 693, 696, 700, 701, 703, 704, 709, 714, 723, 735, 748, 750, 760, 772, 775, 799, 804, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 835, 869, 876, 880, 887, 910, 932, 935, 938, 958, 967, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1010, 1011, 1029, 1031, 1036, 1055, 1056, 1057, 1060, 1080, 1089, 1099, 1106], "attributeerror": 1, "howev": [1, 95, 105, 151, 186, 229, 268, 611, 880, 1099], "can": [1, 13, 30, 31, 36, 39, 59, 69, 83, 93, 95, 103, 104, 105, 108, 109, 114, 116, 118, 120, 121, 127, 128, 129, 131, 133, 135, 141, 142, 149, 150, 159, 164, 165, 166, 167, 168, 169, 176, 178, 186, 194, 198, 208, 211, 219, 229, 233, 234, 237, 243, 254, 268, 278, 282, 319, 322, 323, 351, 352, 355, 358, 366, 380, 397, 410, 425, 449, 461, 469, 477, 487, 491, 493, 498, 506, 507, 508, 509, 510, 512, 513, 514, 518, 521, 523, 526, 529, 543, 546, 552, 558, 559, 571, 597, 618, 620, 630, 655, 661, 664, 665, 675, 681, 685, 689, 691, 700, 701, 703, 704, 729, 731, 737, 742, 748, 751, 772, 775, 782, 810, 825, 826, 858, 859, 862, 865, 866, 873, 887, 901, 935, 959, 967, 972, 985, 989, 1010, 1011, 1012, 1016, 1019, 1022, 1030, 1037, 1039, 1042, 1048, 1054, 1055, 1057, 1080, 1099, 1106], "other": [1, 18, 30, 31, 36, 59, 103, 104, 105, 108, 116, 124, 125, 149, 153, 160, 182, 183, 190, 191, 206, 208, 211, 212, 238, 241, 243, 244, 266, 268, 275, 279, 281, 293, 312, 313, 314, 327, 372, 373, 387, 390, 391, 397, 401, 413, 420, 424, 430, 438, 439, 440, 441, 446, 450, 456, 460, 465, 468, 476, 478, 482, 483, 486, 529, 570, 578, 580, 587, 589, 591, 600, 601, 602, 609, 611, 632, 636, 644, 647, 649, 665, 676, 689, 708, 709, 718, 719, 729, 730, 745, 748, 749, 750, 772, 775, 781, 815, 816, 817, 829, 886, 908, 930, 934, 940, 948, 949, 950, 951, 956, 960, 1009, 1082, 1090, 1098, 1099], "onli": [1, 18, 26, 28, 31, 48, 54, 56, 60, 69, 74, 76, 103, 104, 107, 108, 109, 111, 114, 116, 117, 118, 119, 120, 129, 131, 135, 138, 149, 153, 165, 166, 168, 180, 182, 183, 186, 188, 207, 208, 221, 226, 228, 229, 239, 254, 268, 276, 278, 280, 282, 293, 306, 311, 312, 313, 314, 355, 363, 377, 386, 410, 461, 487, 491, 498, 506, 507, 508, 509, 510, 512, 513, 514, 571, 582, 611, 612, 630, 665, 685, 689, 700, 701, 703, 704, 705, 708, 709, 712, 760, 772, 779, 780, 781, 812, 815, 816, 817, 826, 862, 886, 892, 910, 967, 985, 989, 1075, 1078, 1099, 1106, 1107], "gener": [1, 105, 106, 122, 126, 127, 128, 129, 131, 137, 145, 198, 209, 227, 229, 234, 268, 516, 522, 594, 611, 624, 625, 641, 652, 653, 665, 772, 1007, 1018, 1076, 1099, 1107], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 69, 70, 71, 72, 73, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 116, 117, 121, 123, 124, 125, 126, 127, 128, 129, 131, 135, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 661, 665, 677, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 886, 887, 888, 889, 890, 892, 895, 896, 897, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 926, 927, 933, 935, 936, 939, 941, 943, 948, 949, 951, 952, 953, 954, 957, 959, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 979, 981, 982, 983, 985, 986, 987, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1099, 1106, 1107], "register_expr_namespac": [1, 70, 72, 73], "greet": 1, "def": [1, 70, 71, 72, 73, 127, 128, 129, 131, 135, 197, 234, 268, 275, 489, 540, 587, 629, 665, 722, 772, 775, 1036, 1107], "__init__": [1, 2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 126, 1106], "self": [1, 55, 56, 57, 59, 70, 71, 72, 73, 75, 142, 143, 146, 153, 171, 173, 174, 185, 187, 188, 189, 190, 192, 195, 196, 198, 200, 201, 203, 204, 209, 215, 217, 218, 220, 221, 222, 227, 234, 236, 239, 240, 241, 245, 246, 268, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 299, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 665, 679, 680, 681, 682, 684, 685, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 772, 781, 782, 804, 818, 886, 890, 898, 965, 966, 967, 978, 982, 983, 988, 1010, 1011, 1012, 1024, 1086, 1090, 1099], "_expr": [1, 71], "hello": [1, 18, 55, 58, 546, 552, 558, 941, 1042, 1048, 1054], "return": [1, 9, 26, 28, 31, 32, 33, 34, 35, 48, 49, 50, 54, 58, 69, 70, 71, 72, 73, 74, 75, 84, 86, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 128, 134, 138, 141, 142, 145, 148, 150, 151, 152, 153, 154, 155, 158, 159, 163, 164, 165, 166, 167, 168, 171, 173, 179, 180, 181, 182, 184, 185, 186, 193, 194, 196, 197, 198, 206, 207, 208, 209, 222, 223, 229, 230, 233, 234, 235, 239, 243, 244, 252, 254, 257, 262, 268, 278, 280, 284, 285, 286, 287, 288, 289, 292, 293, 300, 302, 303, 304, 305, 315, 316, 324, 325, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 366, 367, 368, 370, 379, 393, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 415, 418, 419, 421, 426, 428, 429, 431, 447, 448, 455, 460, 470, 472, 477, 489, 493, 495, 499, 500, 502, 516, 517, 523, 524, 525, 532, 534, 536, 538, 539, 540, 541, 543, 544, 545, 547, 548, 551, 553, 554, 555, 556, 567, 573, 574, 575, 576, 577, 579, 580, 582, 583, 584, 587, 588, 592, 594, 595, 596, 597, 598, 610, 611, 612, 613, 614, 620, 622, 624, 625, 627, 628, 629, 630, 638, 641, 644, 647, 650, 651, 652, 653, 655, 656, 665, 681, 683, 685, 690, 691, 693, 700, 701, 703, 704, 705, 711, 712, 714, 722, 723, 731, 735, 740, 741, 742, 743, 748, 749, 752, 758, 763, 768, 772, 779, 780, 781, 789, 790, 792, 793, 798, 800, 803, 807, 810, 814, 826, 827, 833, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 870, 871, 873, 874, 875, 877, 880, 885, 886, 894, 896, 897, 903, 905, 906, 908, 909, 911, 912, 913, 914, 915, 919, 921, 924, 928, 929, 931, 936, 938, 939, 941, 957, 958, 965, 966, 967, 972, 979, 985, 991, 992, 993, 994, 1007, 1008, 1009, 1011, 1019, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1063, 1070, 1072, 1083, 1085, 1086, 1087, 1090, 1099, 1106, 1107], "lit": [1, 277, 397, 410, 606, 618, 638, 641, 655, 656, 665, 889, 1099], "alia": [1, 12, 69, 71, 73, 165, 166, 167, 168, 169, 185, 236, 243, 268, 275, 279, 300, 302, 303, 304, 305, 312, 313, 314, 318, 319, 320, 321, 322, 324, 326, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 383, 385, 387, 390, 391, 395, 397, 400, 401, 403, 410, 413, 414, 415, 422, 425, 438, 439, 440, 441, 456, 458, 460, 461, 465, 466, 467, 468, 470, 473, 476, 478, 482, 483, 486, 488, 490, 493, 496, 498, 517, 533, 534, 537, 539, 540, 544, 547, 553, 555, 556, 557, 568, 569, 570, 578, 579, 580, 586, 587, 594, 595, 596, 599, 600, 601, 602, 606, 607, 611, 614, 615, 618, 619, 629, 630, 640, 641, 647, 652, 655, 665, 700, 701, 706, 712, 744, 748, 772, 826, 834, 836, 842, 862, 865, 869, 871, 924, 935, 966, 985, 990, 1035, 1036, 1051, 1052, 1099], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 55, 58, 546, 552, 558, 565, 941, 1042, 1048, 1054, 1061], "select": [1, 29, 54, 55, 56, 69, 70, 71, 72, 102, 103, 104, 105, 106, 107, 109, 111, 114, 116, 121, 128, 179, 183, 186, 194, 197, 206, 212, 218, 231, 236, 239, 268, 274, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 308, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 337, 341, 342, 343, 344, 345, 347, 349, 351, 352, 354, 355, 358, 361, 366, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 384, 386, 388, 392, 394, 395, 396, 398, 399, 401, 402, 409, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 444, 445, 449, 451, 452, 453, 454, 455, 459, 461, 462, 463, 464, 475, 477, 479, 480, 481, 484, 485, 486, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 545, 546, 548, 551, 552, 554, 555, 556, 558, 559, 562, 563, 565, 566, 568, 569, 572, 575, 576, 577, 579, 581, 582, 583, 584, 585, 588, 590, 593, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 611, 614, 616, 617, 618, 619, 620, 622, 626, 631, 633, 634, 635, 637, 640, 641, 645, 646, 647, 648, 650, 654, 661, 665, 686, 706, 709, 722, 730, 731, 736, 744, 750, 772, 775, 796, 797, 865, 926, 927, 935, 1010, 1011, 1023, 1039, 1055, 1071, 1099, 1106], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 51, 54, 55, 56, 58, 60, 61, 69, 70, 71, 72, 73, 76, 77, 89, 92, 93, 94, 95, 96, 97, 98, 99, 116, 121, 129, 131, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 162, 164, 165, 166, 170, 171, 173, 174, 175, 176, 178, 179, 182, 183, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 209, 211, 215, 216, 218, 219, 220, 221, 222, 223, 225, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 661, 665, 679, 681, 683, 685, 687, 688, 689, 692, 693, 694, 695, 696, 697, 699, 700, 701, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 731, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 778, 781, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 803, 804, 806, 808, 809, 811, 812, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 882, 883, 886, 887, 888, 889, 890, 892, 895, 896, 897, 900, 901, 903, 905, 908, 909, 912, 913, 914, 915, 919, 921, 926, 927, 933, 935, 936, 939, 941, 943, 948, 949, 951, 952, 953, 954, 957, 959, 965, 966, 967, 972, 979, 981, 982, 983, 985, 987, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1068, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1099, 1106], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 51, 54, 56, 57, 59, 60, 61, 69, 70, 71, 72, 73, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 106, 108, 116, 121, 123, 124, 125, 128, 129, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 275, 276, 277, 278, 280, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 337, 339, 340, 342, 343, 348, 350, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 409, 410, 411, 413, 414, 415, 421, 422, 423, 425, 426, 427, 428, 429, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 452, 453, 454, 455, 456, 458, 460, 461, 476, 477, 478, 482, 484, 485, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 528, 529, 530, 533, 536, 537, 539, 540, 541, 542, 544, 547, 549, 553, 554, 555, 556, 557, 560, 564, 568, 569, 570, 571, 573, 574, 575, 579, 582, 583, 584, 586, 587, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 661, 665, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 699, 700, 701, 705, 706, 707, 708, 709, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 778, 781, 783, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 803, 804, 806, 808, 809, 811, 812, 813, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 839, 840, 842, 843, 845, 847, 848, 849, 851, 853, 854, 855, 857, 861, 863, 865, 866, 867, 869, 871, 872, 873, 875, 876, 880, 882, 883, 886, 887, 888, 889, 890, 892, 895, 896, 897, 900, 901, 903, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 922, 923, 933, 935, 936, 939, 943, 948, 949, 951, 952, 953, 954, 957, 959, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 979, 981, 982, 983, 985, 986, 987, 990, 991, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1018, 1020, 1021, 1022, 1023, 1024, 1026, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1043, 1045, 1049, 1053, 1056, 1060, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1099, 1106, 1107], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 69, 70, 71, 72, 73, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 103, 104, 107, 108, 109, 116, 117, 121, 123, 124, 125, 126, 129, 131, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 654, 655, 661, 665, 679, 681, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 705, 706, 707, 708, 709, 710, 712, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 778, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 803, 804, 808, 809, 811, 812, 813, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 882, 883, 886, 887, 888, 889, 890, 892, 895, 896, 897, 900, 901, 903, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 921, 923, 926, 927, 933, 935, 936, 938, 939, 943, 948, 949, 951, 952, 953, 954, 957, 959, 965, 967, 968, 969, 970, 971, 972, 973, 974, 981, 982, 983, 985, 986, 987, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1035, 1037, 1038, 1039, 1045, 1051, 1052, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1099, 1106, 1107], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 51, 54, 56, 57, 59, 60, 61, 69, 70, 71, 72, 73, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 106, 116, 121, 122, 123, 124, 125, 128, 129, 131, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 274, 275, 276, 277, 279, 281, 283, 290, 292, 293, 294, 295, 296, 297, 298, 299, 305, 307, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 332, 333, 336, 337, 338, 340, 341, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 472, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 527, 528, 529, 530, 532, 537, 539, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 630, 631, 633, 634, 635, 637, 640, 644, 645, 646, 647, 648, 650, 653, 654, 655, 661, 665, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 705, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 778, 781, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 803, 808, 809, 811, 812, 813, 814, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 833, 835, 837, 838, 841, 843, 847, 848, 849, 854, 855, 857, 858, 859, 864, 865, 866, 870, 873, 875, 876, 877, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 892, 895, 896, 897, 900, 901, 903, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 923, 933, 935, 936, 939, 941, 943, 948, 949, 951, 952, 953, 954, 957, 959, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 981, 982, 983, 985, 986, 987, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1099, 1106, 1107], "column_0": [1, 186, 234, 268], "register_dataframe_namespac": [1, 71, 72, 73], "split": [1, 31, 70, 181, 268, 555, 556, 1051, 1052], "splitfram": [1, 70], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 36, 51, 54, 55, 70, 71, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 116, 127, 129, 135, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 614, 615, 616, 617, 618, 619, 620, 622, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 661, 665, 700, 701, 731, 744, 745, 758, 760, 768, 772, 775, 796, 797, 808, 865, 926, 927, 935, 1039, 1046, 1051, 1052, 1077, 1099, 1107], "_df": [1, 70], "by_alternate_row": 1, "list": [1, 2, 30, 31, 39, 54, 58, 69, 70, 72, 75, 92, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 127, 128, 129, 131, 144, 147, 150, 151, 152, 156, 162, 164, 165, 173, 180, 193, 196, 206, 207, 208, 211, 219, 225, 226, 234, 235, 236, 237, 243, 247, 248, 268, 276, 298, 324, 379, 385, 394, 457, 459, 461, 470, 471, 487, 493, 499, 500, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 528, 529, 540, 554, 568, 569, 574, 578, 597, 601, 612, 615, 623, 625, 627, 630, 645, 647, 653, 661, 665, 686, 690, 692, 699, 700, 729, 737, 743, 744, 748, 750, 753, 754, 772, 775, 797, 813, 826, 880, 885, 890, 893, 897, 898, 908, 985, 991, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1036, 1050, 1071, 1079, 1082, 1099, 1107], "with_row_count": [1, 268, 460, 506, 507, 509, 512, 513, 514, 665, 772, 1011, 1099], "name": [1, 16, 20, 22, 28, 29, 31, 34, 48, 55, 56, 57, 58, 59, 70, 71, 72, 73, 76, 81, 92, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 125, 126, 127, 129, 130, 131, 132, 141, 144, 147, 148, 149, 152, 157, 158, 161, 163, 164, 167, 179, 180, 182, 183, 186, 190, 191, 196, 198, 202, 206, 207, 208, 210, 211, 212, 219, 225, 227, 229, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 246, 247, 268, 277, 282, 300, 302, 303, 304, 324, 377, 397, 410, 449, 458, 461, 469, 471, 487, 491, 493, 529, 540, 541, 568, 569, 571, 588, 589, 590, 591, 593, 595, 596, 597, 600, 601, 602, 603, 605, 608, 609, 611, 616, 622, 623, 631, 632, 635, 636, 639, 641, 642, 643, 644, 647, 648, 649, 650, 652, 655, 661, 665, 681, 686, 688, 689, 692, 699, 702, 708, 709, 718, 719, 726, 728, 729, 730, 731, 737, 742, 743, 744, 745, 748, 749, 751, 753, 772, 775, 778, 814, 826, 959, 985, 990, 1035, 1036, 1037, 1045, 1064, 1066, 1076, 1077, 1081, 1099, 1106, 1107], "n": [1, 12, 15, 23, 28, 35, 39, 41, 48, 56, 57, 70, 71, 72, 73, 101, 103, 104, 116, 138, 142, 153, 165, 171, 180, 181, 185, 186, 207, 208, 209, 220, 222, 223, 226, 228, 240, 252, 262, 268, 305, 323, 326, 331, 332, 339, 364, 369, 380, 393, 415, 423, 429, 438, 447, 449, 488, 489, 499, 512, 514, 516, 526, 531, 549, 552, 555, 556, 558, 561, 573, 575, 579, 580, 585, 587, 603, 611, 612, 613, 620, 622, 638, 641, 642, 643, 646, 650, 654, 656, 665, 683, 685, 700, 705, 712, 738, 740, 741, 746, 758, 768, 772, 775, 781, 803, 814, 825, 828, 834, 835, 842, 871, 876, 886, 887, 896, 924, 933, 939, 948, 957, 959, 981, 1003, 1005, 1007, 1022, 1026, 1045, 1051, 1052, 1057, 1070, 1072, 1078, 1083, 1088, 1099, 1106, 1107], "filter": [1, 70, 107, 116, 117, 121, 149, 176, 177, 178, 254, 268, 469, 471, 537, 557, 586, 618, 655, 665, 689, 693, 706, 760, 772, 775, 1010, 1099], "col": [1, 12, 28, 31, 48, 69, 70, 71, 72, 96, 98, 116, 127, 129, 156, 164, 165, 166, 177, 179, 184, 186, 194, 197, 206, 211, 219, 236, 237, 243, 247, 268, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 395, 396, 397, 398, 400, 401, 403, 404, 406, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 449, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 598, 600, 601, 602, 606, 607, 608, 614, 617, 618, 619, 620, 621, 626, 631, 635, 639, 640, 648, 655, 665, 684, 696, 699, 700, 701, 706, 711, 722, 729, 737, 744, 748, 750, 753, 772, 775, 796, 797, 808, 862, 865, 926, 927, 935, 991, 1010, 1011, 1039, 1055, 1099, 1107], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 36, 50, 51, 54, 59, 69, 70, 71, 73, 76, 93, 103, 104, 106, 108, 109, 111, 114, 116, 118, 119, 120, 121, 123, 126, 127, 128, 129, 131, 137, 138, 140, 142, 143, 145, 146, 147, 150, 154, 155, 159, 160, 162, 163, 164, 165, 170, 174, 179, 180, 181, 182, 184, 186, 187, 188, 189, 192, 193, 194, 195, 198, 199, 200, 204, 207, 208, 209, 210, 211, 216, 218, 219, 220, 221, 227, 228, 229, 230, 231, 234, 237, 239, 240, 243, 245, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 268, 274, 276, 277, 279, 282, 284, 285, 286, 287, 288, 289, 292, 293, 294, 306, 307, 310, 311, 313, 314, 315, 316, 318, 323, 324, 325, 328, 329, 340, 344, 345, 347, 348, 354, 358, 360, 361, 366, 372, 373, 374, 375, 376, 378, 380, 381, 382, 383, 386, 387, 390, 391, 392, 396, 399, 402, 404, 405, 406, 407, 408, 410, 411, 413, 418, 419, 422, 424, 425, 428, 430, 435, 446, 449, 450, 452, 453, 454, 456, 457, 459, 460, 462, 463, 464, 470, 475, 476, 478, 480, 481, 482, 483, 485, 486, 488, 489, 490, 493, 494, 495, 496, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 521, 523, 524, 525, 526, 530, 531, 534, 539, 540, 559, 561, 567, 570, 572, 576, 577, 578, 580, 585, 586, 588, 592, 594, 595, 596, 597, 598, 599, 600, 601, 603, 605, 606, 611, 613, 615, 618, 624, 625, 628, 630, 633, 634, 638, 639, 640, 641, 645, 651, 652, 653, 654, 655, 656, 665, 680, 683, 684, 688, 690, 694, 695, 698, 699, 700, 702, 703, 704, 708, 711, 713, 714, 717, 721, 723, 724, 725, 728, 729, 734, 735, 737, 738, 746, 748, 750, 751, 752, 753, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 793, 804, 809, 811, 812, 814, 819, 820, 825, 826, 827, 829, 830, 831, 843, 848, 849, 850, 851, 852, 853, 855, 860, 861, 865, 867, 868, 873, 879, 881, 882, 883, 888, 892, 895, 897, 905, 907, 909, 912, 913, 914, 915, 921, 922, 934, 935, 938, 940, 956, 959, 960, 965, 969, 970, 981, 985, 986, 987, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1019, 1020, 1021, 1025, 1026, 1028, 1030, 1035, 1036, 1039, 1055, 1057, 1063, 1073, 1074, 1076, 1081, 1082, 1086, 1088, 1089, 1099, 1107], "drop": [1, 95, 148, 149, 186, 235, 243, 268, 326, 328, 329, 423, 493, 665, 689, 743, 748, 772, 828, 830, 831, 933, 985, 1099], "aaa": [1, 31, 268, 533, 568, 569, 1029], "bbb": [1, 31, 268, 568, 569, 775], "ccc": [1, 31, 268, 568, 569], "ddd": [1, 31, 268, 568, 569], "eee": [1, 31, 268, 775], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 30, 31, 34, 39, 60, 69, 70, 76, 79, 81, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 129, 141, 145, 147, 148, 149, 150, 152, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 179, 180, 182, 183, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 219, 220, 221, 225, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 247, 268, 277, 278, 280, 292, 324, 332, 334, 335, 336, 340, 342, 343, 344, 346, 348, 350, 353, 356, 357, 360, 362, 363, 365, 367, 368, 370, 377, 379, 383, 385, 397, 410, 420, 426, 444, 448, 449, 460, 461, 467, 469, 471, 487, 491, 493, 497, 499, 500, 506, 507, 508, 509, 510, 512, 513, 514, 521, 528, 529, 538, 555, 556, 559, 560, 561, 562, 564, 571, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 661, 665, 681, 688, 689, 690, 692, 699, 700, 701, 702, 703, 704, 708, 709, 714, 715, 716, 717, 718, 720, 721, 722, 724, 726, 728, 729, 730, 731, 732, 737, 738, 739, 742, 743, 744, 745, 746, 748, 749, 750, 751, 753, 760, 772, 775, 779, 780, 807, 809, 826, 837, 838, 839, 843, 845, 846, 850, 852, 855, 857, 860, 863, 864, 867, 869, 870, 872, 874, 875, 877, 885, 930, 936, 954, 958, 985, 991, 1016, 1034, 1051, 1052, 1055, 1056, 1057, 1058, 1060, 1068, 1076, 1077, 1099, 1107], "txt": [1, 12, 116], "utf8": [1, 18, 30, 60, 77, 95, 99, 103, 104, 116, 126, 128, 131, 150, 151, 152, 159, 210, 229, 268, 302, 362, 365, 431, 460, 532, 536, 538, 539, 540, 541, 543, 544, 553, 554, 555, 556, 559, 560, 561, 562, 564, 602, 661, 665, 690, 692, 728, 772, 775, 869, 872, 920, 941, 1028, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058, 1060, 1099], "register_lazyframe_namespac": [1, 70, 71, 73], "dtypeoper": [1, 72], "ldf": [1, 72, 753, 754, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767], "_ldf": [1, 72], "upcast_integer_typ": [1, 72], "with_column": [1, 12, 72, 166, 197, 237, 244, 268, 275, 277, 293, 302, 307, 309, 312, 313, 314, 319, 322, 324, 326, 330, 336, 338, 339, 340, 348, 350, 355, 356, 357, 358, 359, 360, 362, 364, 365, 367, 368, 372, 373, 381, 382, 387, 390, 391, 392, 396, 397, 400, 403, 404, 406, 407, 408, 410, 413, 425, 438, 439, 440, 441, 456, 458, 460, 461, 476, 478, 482, 483, 487, 488, 489, 490, 491, 493, 496, 503, 506, 507, 508, 509, 510, 512, 513, 514, 533, 537, 540, 541, 544, 547, 549, 550, 553, 555, 556, 557, 567, 570, 571, 578, 580, 587, 589, 591, 600, 602, 609, 612, 615, 625, 629, 632, 636, 645, 649, 653, 655, 665, 701, 722, 749, 772, 775, 808, 826, 865, 935, 985, 1099], "tp": [1, 72], "cast": [1, 30, 71, 72, 77, 92, 124, 125, 159, 165, 166, 168, 169, 197, 230, 243, 268, 281, 309, 321, 322, 331, 362, 365, 460, 486, 489, 498, 542, 543, 567, 572, 578, 602, 645, 665, 700, 701, 703, 704, 722, 748, 772, 775, 808, 810, 823, 824, 834, 869, 872, 989, 1038, 1039, 1069, 1077, 1082, 1099], "int64": [1, 2, 30, 31, 34, 71, 72, 99, 103, 150, 159, 165, 166, 168, 169, 184, 197, 210, 224, 230, 268, 295, 296, 297, 298, 321, 322, 337, 341, 345, 347, 349, 354, 361, 377, 489, 498, 542, 572, 578, 594, 616, 624, 625, 627, 641, 647, 661, 665, 684, 690, 700, 701, 703, 704, 706, 711, 722, 728, 731, 772, 794, 795, 796, 797, 823, 824, 840, 844, 851, 853, 856, 861, 868, 989, 1009, 1069, 1080, 1081, 1082, 1099], "int8": [1, 72, 159, 268, 321, 322, 572, 638, 641, 656, 665, 823, 824, 828, 966, 992, 1069, 1086, 1099], "int16": [1, 72, 321, 322, 572, 665, 775, 823, 824, 966, 1069, 1078, 1099], "int32": [1, 72, 92, 95, 99, 128, 129, 165, 166, 168, 169, 181, 268, 307, 343, 370, 548, 578, 641, 665, 700, 701, 703, 704, 772, 775, 846, 877, 965, 1044, 1082, 1099], "b": [1, 27, 28, 30, 32, 33, 36, 56, 57, 59, 60, 61, 72, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 108, 123, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 170, 171, 173, 174, 176, 178, 179, 180, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 268, 275, 277, 278, 280, 281, 294, 299, 300, 302, 303, 304, 307, 309, 317, 324, 327, 377, 379, 381, 382, 383, 385, 388, 392, 394, 396, 397, 399, 402, 404, 406, 407, 408, 410, 414, 420, 425, 431, 433, 438, 439, 440, 441, 458, 461, 466, 477, 484, 485, 487, 489, 491, 493, 496, 501, 503, 521, 527, 529, 538, 542, 549, 571, 582, 586, 588, 589, 590, 591, 593, 597, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 617, 618, 619, 622, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 642, 643, 646, 647, 648, 649, 650, 654, 661, 665, 679, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 705, 708, 710, 711, 712, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 750, 751, 753, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 778, 781, 807, 808, 809, 810, 826, 827, 829, 879, 880, 886, 889, 901, 908, 920, 935, 948, 949, 951, 985, 990, 1009, 1034, 1038, 1045, 1068, 1081, 1085, 1099, 1106], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 33, 36, 51, 54, 56, 57, 59, 60, 61, 69, 70, 71, 72, 73, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 116, 123, 124, 125, 131, 137, 139, 141, 142, 143, 146, 149, 152, 153, 154, 155, 159, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 186, 188, 190, 191, 193, 194, 196, 197, 198, 199, 203, 207, 208, 214, 219, 222, 223, 224, 225, 226, 227, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 274, 275, 276, 277, 279, 281, 294, 295, 296, 297, 299, 305, 307, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 325, 327, 332, 336, 341, 349, 356, 357, 358, 359, 361, 362, 365, 366, 368, 372, 373, 378, 379, 381, 382, 385, 386, 387, 388, 390, 391, 393, 394, 395, 396, 397, 407, 408, 410, 413, 414, 415, 422, 423, 425, 426, 429, 438, 439, 440, 441, 442, 443, 447, 453, 456, 458, 460, 461, 476, 478, 482, 483, 486, 487, 489, 490, 491, 494, 496, 500, 501, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 519, 520, 523, 527, 528, 529, 530, 533, 534, 540, 544, 545, 547, 548, 549, 551, 553, 555, 556, 559, 568, 569, 570, 571, 573, 574, 575, 578, 579, 580, 587, 589, 591, 593, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 615, 617, 618, 622, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 645, 646, 647, 648, 649, 650, 652, 654, 655, 661, 665, 679, 681, 683, 684, 685, 689, 691, 692, 693, 694, 695, 697, 699, 700, 701, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 781, 784, 791, 794, 795, 796, 803, 812, 813, 815, 825, 827, 829, 843, 844, 850, 852, 855, 856, 857, 858, 859, 860, 864, 865, 866, 868, 869, 872, 873, 874, 875, 886, 888, 889, 896, 897, 900, 901, 903, 908, 912, 913, 914, 915, 919, 933, 935, 936, 939, 948, 949, 951, 952, 953, 957, 966, 973, 981, 982, 983, 987, 991, 994, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1019, 1023, 1024, 1029, 1030, 1036, 1040, 1041, 1043, 1044, 1047, 1049, 1051, 1052, 1055, 1068, 1070, 1071, 1072, 1078, 1081, 1082, 1083, 1090, 1099, 1107], "c": [1, 27, 28, 30, 32, 33, 36, 56, 57, 59, 60, 61, 70, 72, 76, 77, 93, 95, 97, 99, 108, 116, 127, 137, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 156, 157, 159, 160, 162, 163, 164, 165, 171, 173, 174, 181, 182, 184, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 202, 204, 205, 206, 209, 210, 211, 215, 216, 218, 219, 220, 221, 222, 224, 227, 228, 229, 230, 231, 233, 234, 237, 238, 240, 241, 243, 247, 250, 251, 252, 253, 255, 256, 258, 261, 262, 268, 275, 277, 278, 280, 282, 299, 324, 397, 410, 420, 431, 433, 458, 461, 487, 489, 493, 521, 555, 559, 582, 589, 591, 593, 599, 600, 602, 603, 604, 605, 606, 607, 609, 617, 618, 619, 622, 626, 629, 631, 632, 633, 634, 635, 636, 637, 646, 648, 649, 650, 654, 661, 665, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 696, 699, 700, 708, 711, 718, 721, 723, 726, 727, 728, 729, 735, 736, 737, 742, 745, 748, 750, 753, 756, 757, 758, 759, 761, 762, 764, 767, 768, 772, 775, 809, 826, 827, 901, 920, 985, 1051, 1055, 1085, 1099], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 33, 36, 57, 59, 61, 69, 70, 72, 73, 76, 92, 95, 96, 97, 98, 99, 101, 104, 123, 129, 142, 143, 146, 152, 153, 154, 155, 159, 161, 162, 163, 164, 165, 166, 171, 172, 174, 175, 177, 179, 180, 183, 184, 185, 186, 188, 190, 193, 194, 196, 198, 199, 200, 203, 208, 214, 219, 222, 223, 224, 225, 226, 227, 229, 232, 237, 239, 242, 243, 245, 247, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 268, 275, 276, 279, 300, 303, 304, 305, 307, 309, 311, 312, 313, 314, 323, 324, 325, 326, 327, 332, 333, 337, 358, 360, 361, 362, 365, 373, 376, 377, 380, 382, 386, 387, 390, 391, 393, 394, 397, 400, 403, 404, 406, 407, 408, 410, 413, 415, 422, 425, 426, 429, 435, 438, 439, 440, 441, 445, 447, 476, 478, 483, 486, 487, 488, 489, 493, 494, 496, 500, 501, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 523, 529, 534, 543, 544, 547, 548, 567, 570, 573, 575, 579, 580, 593, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 614, 615, 616, 617, 618, 622, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 646, 648, 649, 650, 654, 665, 683, 684, 685, 691, 692, 693, 694, 695, 697, 699, 700, 701, 705, 707, 709, 710, 711, 712, 716, 717, 718, 723, 733, 734, 735, 736, 737, 738, 739, 740, 741, 747, 748, 751, 753, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 781, 784, 788, 791, 803, 808, 813, 815, 821, 825, 826, 827, 828, 829, 835, 836, 837, 838, 839, 840, 865, 867, 868, 869, 870, 872, 874, 875, 883, 886, 887, 896, 897, 900, 901, 935, 936, 939, 943, 948, 949, 951, 957, 965, 966, 973, 981, 982, 983, 985, 986, 987, 991, 994, 996, 997, 998, 1000, 1001, 1004, 1007, 1009, 1019, 1025, 1030, 1039, 1040, 1044, 1070, 1083, 1086, 1090, 1099, 1107], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 36, 57, 59, 61, 70, 72, 76, 92, 95, 96, 97, 98, 144, 147, 148, 149, 150, 152, 153, 156, 157, 160, 161, 162, 163, 165, 166, 171, 173, 174, 175, 177, 179, 180, 182, 186, 187, 188, 189, 190, 192, 195, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 243, 245, 252, 261, 262, 268, 275, 279, 299, 307, 321, 322, 327, 332, 336, 350, 355, 356, 357, 367, 368, 371, 373, 381, 382, 388, 393, 394, 396, 415, 416, 417, 426, 438, 439, 440, 441, 461, 483, 486, 492, 495, 496, 497, 500, 502, 506, 507, 508, 509, 510, 512, 513, 514, 517, 529, 534, 538, 544, 547, 548, 570, 573, 575, 587, 606, 607, 608, 615, 618, 629, 630, 648, 661, 665, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 700, 701, 705, 707, 708, 710, 712, 714, 718, 721, 723, 726, 728, 729, 731, 733, 734, 735, 736, 737, 740, 741, 744, 745, 747, 748, 751, 758, 767, 768, 772, 775, 813, 819, 823, 824, 829, 862, 875, 897, 926, 927, 936, 948, 949, 951, 973, 987, 991, 993, 999, 1001, 1003, 1005, 1009, 1030, 1034, 1040, 1044, 1069, 1099, 1106, 1107], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 36, 59, 70, 72, 76, 123, 144, 145, 146, 147, 148, 150, 152, 156, 157, 160, 165, 166, 171, 173, 175, 182, 187, 188, 189, 191, 192, 195, 198, 200, 202, 204, 206, 208, 209, 210, 211, 215, 216, 218, 220, 221, 222, 223, 228, 229, 230, 231, 237, 238, 239, 240, 241, 268, 275, 279, 297, 322, 332, 336, 356, 358, 359, 366, 368, 378, 393, 396, 415, 438, 439, 440, 441, 460, 486, 496, 500, 513, 529, 562, 573, 575, 606, 607, 618, 629, 630, 648, 665, 686, 688, 690, 692, 696, 700, 701, 705, 707, 708, 712, 719, 721, 724, 726, 728, 729, 740, 741, 745, 772, 775, 788, 796, 835, 839, 846, 865, 866, 873, 875, 921, 948, 949, 951, 966, 991, 1004, 1058, 1099, 1107], "float32": [1, 28, 48, 72, 159, 228, 229, 268, 627, 772, 775, 904, 965, 1099], "lazi": [1, 54, 55, 56, 57, 59, 72, 76, 116, 129, 183, 197, 268, 461, 620, 638, 641, 656, 665, 708, 709, 750, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 1106, 1107], "i16": [1, 72, 521, 665, 775, 966, 1078, 1099, 1107], "i32": [1, 72, 92, 95, 99, 128, 129, 211, 268, 307, 343, 370, 502, 521, 548, 655, 665, 729, 772, 846, 877, 965, 993, 1044, 1099, 1107], "f32": [1, 72, 149, 228, 268, 521, 665, 689, 772, 775, 965, 1099], "i64": [1, 2, 15, 19, 51, 54, 56, 70, 71, 72, 73, 76, 92, 93, 94, 95, 96, 97, 98, 99, 105, 116, 141, 142, 143, 144, 147, 149, 150, 152, 153, 155, 156, 161, 162, 163, 164, 165, 166, 171, 173, 174, 175, 176, 178, 182, 183, 186, 187, 190, 191, 192, 196, 197, 198, 199, 202, 203, 204, 205, 209, 211, 215, 216, 218, 219, 221, 222, 223, 225, 231, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 246, 247, 248, 251, 252, 253, 254, 255, 258, 261, 262, 268, 275, 277, 281, 295, 296, 297, 298, 299, 305, 309, 312, 313, 314, 319, 320, 321, 322, 324, 326, 327, 337, 339, 341, 345, 347, 349, 354, 361, 364, 377, 379, 380, 382, 383, 384, 385, 387, 388, 393, 394, 395, 396, 397, 400, 403, 404, 406, 407, 408, 410, 412, 415, 423, 425, 426, 427, 428, 429, 432, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 451, 455, 458, 459, 461, 476, 477, 478, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 500, 501, 502, 503, 516, 518, 519, 521, 522, 523, 527, 528, 529, 549, 550, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 581, 583, 586, 594, 600, 602, 606, 607, 608, 609, 614, 615, 616, 617, 618, 622, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 640, 644, 645, 648, 649, 650, 655, 661, 665, 681, 683, 685, 687, 688, 689, 692, 693, 695, 696, 697, 699, 700, 701, 705, 707, 708, 709, 710, 712, 714, 715, 718, 719, 720, 722, 723, 726, 727, 729, 731, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 748, 751, 753, 754, 757, 758, 759, 760, 761, 764, 767, 768, 772, 775, 778, 781, 794, 795, 796, 797, 803, 808, 815, 818, 821, 822, 823, 824, 826, 827, 840, 842, 844, 851, 853, 856, 861, 868, 871, 886, 887, 889, 890, 896, 900, 908, 933, 935, 936, 939, 948, 949, 951, 952, 953, 954, 957, 959, 967, 972, 985, 990, 991, 993, 997, 1000, 1004, 1007, 1010, 1011, 1014, 1018, 1019, 1023, 1024, 1068, 1070, 1071, 1072, 1077, 1083, 1084, 1090, 1099, 1106, 1107], "register_series_namespac": [1, 70, 71, 72], "math": [1, 73, 325, 595, 596, 665, 819, 1020, 1073, 1099], "mathshortcut": [1, 73], "": [1, 2, 28, 31, 36, 48, 54, 57, 61, 73, 92, 93, 99, 103, 104, 105, 106, 108, 117, 121, 131, 141, 149, 151, 164, 165, 167, 168, 174, 182, 183, 196, 198, 203, 204, 208, 211, 212, 219, 223, 227, 233, 235, 236, 237, 243, 244, 268, 339, 362, 365, 377, 411, 429, 431, 442, 443, 447, 459, 461, 470, 477, 480, 481, 487, 488, 498, 502, 529, 533, 539, 540, 541, 544, 545, 547, 549, 551, 553, 554, 556, 559, 560, 561, 564, 565, 567, 568, 569, 588, 589, 590, 591, 597, 603, 608, 609, 616, 619, 620, 629, 630, 631, 632, 635, 636, 644, 645, 647, 648, 649, 661, 665, 681, 688, 689, 699, 700, 702, 703, 709, 718, 729, 730, 737, 742, 743, 744, 748, 749, 755, 760, 772, 775, 778, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 803, 804, 806, 807, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 835, 839, 841, 842, 845, 847, 848, 852, 854, 858, 859, 863, 866, 867, 869, 872, 873, 875, 876, 877, 880, 882, 883, 887, 888, 889, 890, 892, 895, 896, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 933, 936, 939, 941, 943, 952, 953, 954, 957, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 979, 981, 982, 983, 985, 986, 987, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1099], "_": [1, 69, 73, 198, 227, 268, 540, 555, 809, 1036, 1051, 1076, 1099], "squar": [1, 73, 254, 411, 530, 665, 760, 922, 1025, 1099], "cube": [1, 73, 310, 490, 665, 811, 1099], "s2": [1, 125, 159, 268, 813, 829, 908, 921, 959, 973, 1009, 1081, 1090, 1099], "renam": [1, 95, 103, 104, 138, 140, 211, 212, 243, 244, 247, 249, 268, 277, 282, 405, 424, 430, 446, 450, 457, 458, 473, 491, 504, 569, 571, 592, 628, 644, 647, 665, 680, 702, 703, 704, 713, 725, 729, 730, 748, 749, 752, 753, 755, 772, 778, 782, 826, 934, 940, 956, 960, 985, 995, 1066, 1077, 1099], "n2": [1, 449], "in_plac": [1, 173, 217, 241, 268, 988, 1017, 1024, 1099], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 34, 36, 48, 49, 50, 54, 56, 58, 75, 76, 77, 92, 93, 97, 99, 101, 103, 104, 107, 108, 109, 111, 114, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 129, 130, 131, 135, 137, 141, 142, 143, 146, 155, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 174, 176, 177, 178, 180, 183, 184, 188, 193, 194, 196, 198, 199, 206, 207, 208, 209, 211, 219, 225, 227, 229, 230, 233, 234, 235, 236, 237, 239, 243, 248, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 268, 276, 277, 278, 279, 280, 281, 282, 293, 300, 301, 303, 304, 307, 318, 319, 320, 321, 322, 324, 331, 333, 336, 337, 339, 341, 342, 344, 345, 347, 349, 351, 352, 354, 355, 356, 358, 359, 360, 361, 364, 366, 368, 369, 371, 372, 373, 374, 375, 376, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 413, 416, 417, 421, 444, 448, 449, 456, 461, 465, 466, 467, 468, 470, 472, 473, 482, 483, 484, 486, 493, 498, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 521, 526, 528, 529, 533, 535, 537, 542, 543, 548, 554, 555, 557, 559, 560, 561, 564, 568, 569, 574, 581, 584, 587, 588, 589, 590, 591, 592, 594, 597, 598, 603, 604, 611, 612, 613, 618, 624, 625, 630, 638, 641, 647, 652, 653, 655, 656, 665, 681, 683, 684, 685, 691, 693, 695, 699, 700, 701, 702, 703, 704, 708, 709, 711, 713, 714, 718, 723, 729, 731, 735, 737, 742, 743, 744, 748, 754, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 772, 775, 779, 780, 781, 782, 792, 799, 804, 807, 810, 813, 814, 826, 833, 834, 836, 839, 840, 841, 842, 843, 844, 845, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 873, 874, 875, 879, 881, 882, 883, 890, 894, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 920, 922, 926, 927, 954, 958, 967, 973, 979, 982, 983, 985, 989, 1002, 1009, 1022, 1024, 1029, 1031, 1033, 1038, 1039, 1044, 1050, 1051, 1053, 1055, 1056, 1057, 1060, 1080, 1081, 1089, 1090, 1099, 1106, 1107], "s3": [1, 30, 107, 117, 121, 268, 959, 1099], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 36, 47, 54, 59, 66, 68, 69, 70, 72, 73, 76, 123, 127, 144, 145, 146, 147, 148, 149, 150, 152, 156, 157, 160, 163, 171, 173, 182, 186, 187, 188, 189, 192, 200, 202, 204, 206, 208, 209, 210, 211, 215, 216, 218, 220, 221, 222, 223, 228, 229, 230, 231, 237, 238, 240, 241, 243, 268, 279, 281, 294, 317, 319, 322, 323, 332, 396, 414, 423, 425, 438, 439, 440, 441, 478, 486, 490, 500, 501, 505, 521, 527, 529, 545, 551, 559, 575, 587, 593, 599, 603, 604, 605, 607, 609, 615, 617, 622, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 646, 649, 650, 654, 665, 686, 688, 689, 690, 692, 696, 705, 708, 712, 714, 723, 726, 728, 729, 740, 741, 745, 748, 772, 775, 781, 825, 846, 897, 921, 933, 935, 948, 949, 951, 981, 991, 994, 996, 999, 1001, 1003, 1005, 1041, 1047, 1055, 1099, 1107], "9": [1, 27, 28, 30, 31, 32, 33, 36, 54, 59, 69, 76, 145, 146, 159, 166, 171, 175, 186, 207, 208, 211, 222, 237, 238, 241, 243, 261, 268, 275, 279, 281, 294, 306, 317, 319, 322, 325, 332, 396, 401, 410, 414, 423, 437, 444, 486, 495, 500, 505, 511, 513, 523, 527, 540, 562, 575, 601, 606, 607, 653, 665, 701, 705, 707, 712, 729, 740, 745, 748, 767, 772, 775, 827, 839, 850, 852, 860, 866, 873, 874, 908, 921, 933, 954, 991, 996, 1002, 1004, 1006, 1019, 1036, 1058, 1099], "27": [1, 73, 261, 322, 350, 357, 367, 665, 767, 1099, 1107], "16": [1, 31, 44, 63, 71, 165, 166, 243, 268, 319, 322, 396, 478, 490, 548, 606, 614, 615, 618, 665, 700, 701, 735, 748, 772, 775, 866, 873, 981, 1020, 1044, 1073, 1099], "64": [1, 43, 46, 65, 71, 73, 122, 137, 478, 490, 665, 981, 1099], "25": [1, 31, 73, 99, 129, 146, 165, 166, 183, 239, 243, 268, 326, 336, 338, 356, 359, 366, 368, 493, 506, 507, 508, 509, 510, 512, 513, 514, 580, 614, 620, 630, 665, 700, 701, 709, 716, 746, 748, 772, 775, 827, 828, 841, 866, 873, 879, 897, 981, 985, 1099], "125": [1, 31, 73, 268, 275, 665, 981, 1099], "arg": [2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 197, 230, 268, 489, 597, 619, 665, 722, 772, 967, 1080, 1081, 1099], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 61, 62, 63, 64, 65, 66, 67, 68, 74, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 120, 126, 128, 129, 131, 135, 138, 145, 149, 153, 155, 156, 159, 179, 180, 181, 186, 196, 197, 206, 207, 208, 225, 226, 229, 230, 235, 237, 268, 275, 278, 279, 282, 307, 360, 372, 373, 382, 387, 390, 391, 401, 413, 420, 425, 456, 457, 459, 460, 461, 473, 476, 478, 482, 483, 486, 487, 489, 491, 500, 504, 505, 517, 548, 559, 560, 561, 564, 570, 571, 574, 580, 587, 588, 591, 592, 603, 617, 626, 627, 630, 655, 665, 685, 689, 695, 722, 743, 772, 775, 779, 781, 782, 829, 867, 886, 889, 908, 921, 930, 935, 966, 967, 991, 995, 996, 1008, 1011, 1044, 1055, 1056, 1057, 1060, 1071, 1079, 1080, 1081, 1099, 1106, 1107], "kwarg": [2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 105, 145, 197, 230, 268, 489, 665, 685, 722, 772, 1081, 1099, 1106], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 661, 665, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1099, 1106], "nest": [2, 51, 60, 99, 114, 120, 151, 268, 676, 880, 1099, 1106, 1107], "fix": [2, 108, 127, 129, 369, 506, 507, 508, 509, 510, 512, 513, 514, 614, 665, 876], "length": [2, 12, 51, 76, 116, 127, 163, 165, 166, 168, 169, 218, 268, 323, 359, 366, 443, 449, 470, 502, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 527, 545, 547, 551, 553, 567, 638, 641, 642, 643, 656, 665, 700, 701, 703, 704, 723, 736, 772, 813, 825, 835, 866, 873, 923, 953, 959, 978, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1023, 1041, 1043, 1047, 1049, 1063, 1099], "inner": [2, 51, 60, 77, 128, 182, 238, 268, 295, 296, 297, 298, 327, 431, 499, 578, 665, 708, 731, 745, 772, 794, 795, 796, 797, 829, 941, 1082, 1099], "width": [2, 24, 31, 103, 104, 268, 295, 296, 297, 298, 545, 551, 567, 772, 794, 795, 796, 797, 1041, 1047, 1063], "int": [2, 12, 13, 15, 23, 24, 28, 31, 36, 40, 48, 50, 56, 59, 71, 95, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 116, 117, 118, 119, 120, 121, 122, 127, 128, 129, 130, 131, 132, 133, 138, 141, 142, 151, 154, 155, 157, 163, 170, 171, 172, 174, 179, 180, 181, 183, 185, 186, 187, 188, 192, 193, 194, 204, 206, 209, 214, 215, 216, 218, 220, 221, 222, 223, 228, 231, 233, 237, 240, 242, 245, 252, 262, 268, 275, 299, 305, 312, 313, 314, 323, 326, 374, 375, 376, 380, 381, 382, 388, 392, 393, 415, 421, 423, 428, 429, 442, 443, 447, 448, 449, 486, 488, 489, 490, 493, 496, 499, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 527, 531, 539, 542, 545, 548, 549, 551, 553, 555, 556, 562, 567, 573, 574, 575, 579, 585, 587, 594, 603, 604, 610, 613, 614, 620, 622, 624, 625, 634, 637, 638, 641, 642, 643, 646, 647, 650, 651, 654, 656, 665, 681, 683, 693, 694, 695, 705, 709, 712, 723, 733, 734, 736, 738, 740, 741, 742, 746, 747, 751, 758, 768, 772, 789, 790, 803, 804, 813, 814, 815, 816, 817, 825, 828, 880, 881, 882, 883, 887, 888, 889, 895, 896, 897, 921, 923, 924, 931, 932, 933, 938, 939, 952, 953, 957, 958, 959, 969, 973, 974, 976, 977, 978, 980, 981, 984, 985, 987, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1018, 1023, 1026, 1035, 1038, 1041, 1044, 1045, 1047, 1049, 1051, 1052, 1058, 1063, 1069, 1070, 1071, 1072, 1078, 1083, 1088, 1099, 1106, 1107], "polarsdatatyp": [2, 51, 103, 104, 110, 115, 116, 126, 127, 128, 129, 131, 138, 150, 186, 268, 282, 307, 377, 457, 459, 460, 461, 542, 592, 616, 627, 628, 629, 630, 638, 641, 656, 661, 665, 690, 772, 775, 782, 804, 966, 967, 1038, 1099], "pythondatatyp": [2, 51], "null": [2, 28, 30, 48, 56, 69, 76, 95, 103, 104, 113, 116, 121, 137, 141, 142, 146, 149, 155, 159, 160, 175, 182, 188, 189, 195, 198, 200, 215, 216, 219, 220, 221, 225, 230, 233, 236, 238, 240, 243, 250, 268, 278, 280, 281, 282, 292, 299, 301, 312, 313, 314, 317, 319, 322, 326, 328, 329, 337, 341, 345, 347, 349, 354, 355, 361, 373, 374, 375, 376, 377, 380, 381, 382, 388, 396, 404, 406, 407, 408, 414, 416, 417, 423, 427, 428, 432, 438, 439, 440, 441, 442, 448, 449, 460, 461, 483, 484, 485, 488, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 521, 523, 528, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 551, 553, 555, 556, 557, 567, 568, 569, 578, 588, 589, 590, 591, 600, 601, 602, 604, 609, 616, 627, 632, 636, 642, 643, 647, 649, 655, 665, 681, 683, 689, 695, 707, 708, 721, 731, 733, 734, 737, 742, 744, 745, 748, 750, 756, 772, 779, 780, 782, 791, 799, 814, 815, 828, 830, 831, 840, 844, 851, 853, 856, 861, 868, 881, 882, 883, 887, 889, 894, 900, 914, 915, 926, 927, 933, 949, 951, 952, 958, 959, 967, 980, 981, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1014, 1015, 1019, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1051, 1052, 1053, 1078, 1080, 1081, 1082, 1089, 1099, 1106, 1107], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 41, 48, 49, 50, 51, 54, 55, 56, 57, 59, 61, 69, 70, 71, 72, 73, 75, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 141, 142, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 179, 180, 181, 182, 183, 185, 186, 188, 190, 191, 193, 194, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 249, 252, 254, 260, 262, 268, 275, 277, 278, 279, 280, 281, 282, 292, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 326, 327, 331, 332, 333, 339, 355, 358, 359, 360, 362, 364, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 380, 382, 383, 387, 388, 389, 390, 391, 392, 393, 396, 397, 401, 411, 413, 415, 420, 421, 422, 423, 425, 428, 429, 431, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 451, 452, 456, 457, 458, 459, 460, 461, 472, 476, 478, 482, 483, 486, 487, 488, 489, 490, 491, 493, 494, 496, 498, 499, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 569, 570, 571, 573, 574, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 661, 665, 681, 683, 685, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 712, 713, 714, 718, 719, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 755, 758, 760, 766, 768, 772, 775, 778, 779, 780, 781, 782, 791, 797, 798, 799, 800, 801, 802, 803, 804, 808, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 835, 836, 842, 862, 865, 866, 867, 869, 871, 872, 873, 876, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 895, 896, 897, 900, 901, 910, 917, 918, 922, 924, 930, 931, 932, 933, 935, 938, 939, 941, 948, 949, 950, 951, 952, 953, 954, 957, 958, 959, 961, 966, 967, 981, 985, 986, 987, 988, 989, 990, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1063, 1064, 1066, 1070, 1071, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1099, 1106], "The": [2, 18, 29, 30, 31, 36, 50, 51, 54, 58, 61, 69, 74, 75, 92, 94, 95, 96, 98, 101, 103, 105, 106, 108, 112, 113, 114, 116, 121, 133, 148, 149, 150, 152, 153, 156, 163, 164, 165, 166, 168, 170, 175, 180, 183, 186, 191, 196, 206, 207, 208, 211, 212, 229, 236, 239, 243, 244, 247, 254, 268, 277, 299, 300, 301, 302, 324, 328, 329, 336, 350, 355, 356, 359, 362, 366, 367, 377, 380, 383, 388, 392, 448, 459, 461, 487, 493, 496, 499, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 523, 526, 532, 535, 536, 542, 544, 545, 546, 551, 552, 558, 559, 567, 616, 620, 630, 642, 643, 644, 647, 655, 657, 658, 660, 661, 665, 666, 667, 671, 672, 673, 689, 692, 696, 700, 701, 703, 705, 707, 709, 712, 714, 719, 723, 729, 730, 731, 744, 748, 749, 753, 760, 772, 778, 781, 798, 799, 800, 814, 826, 830, 831, 839, 857, 862, 863, 866, 869, 873, 874, 886, 887, 890, 895, 958, 967, 985, 987, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1011, 1019, 1022, 1028, 1031, 1032, 1038, 1040, 1041, 1042, 1047, 1048, 1054, 1055, 1063, 1091, 1093, 1095, 1099, 1100, 1103, 1104, 1105, 1107], "size": [2, 13, 36, 50, 103, 104, 127, 128, 129, 131, 133, 151, 165, 237, 268, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 594, 624, 625, 642, 643, 665, 700, 772, 880, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1099, 1107], "datatyp": [2, 28, 34, 48, 51, 67, 92, 94, 95, 96, 98, 100, 108, 110, 112, 113, 115, 131, 150, 152, 159, 210, 268, 307, 377, 521, 578, 616, 627, 661, 665, 676, 692, 728, 731, 772, 782, 804, 827, 910, 916, 918, 920, 967, 1016, 1082, 1099], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 34, 48, 51, 52, 54, 58, 60, 67, 69, 76, 77, 95, 97, 103, 104, 106, 116, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 139, 140, 141, 146, 149, 153, 154, 155, 160, 163, 165, 166, 168, 170, 171, 175, 179, 180, 183, 185, 186, 187, 188, 189, 190, 192, 194, 196, 198, 199, 200, 202, 206, 207, 208, 209, 215, 216, 219, 220, 221, 222, 225, 226, 230, 233, 234, 237, 238, 239, 240, 250, 251, 253, 255, 256, 258, 259, 268, 274, 275, 276, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 322, 323, 324, 326, 328, 329, 332, 336, 350, 356, 367, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 412, 413, 414, 416, 417, 418, 419, 422, 423, 427, 428, 429, 432, 434, 435, 436, 442, 445, 447, 451, 453, 455, 456, 459, 460, 461, 462, 463, 464, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 493, 494, 496, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 523, 524, 525, 526, 528, 529, 530, 532, 533, 534, 535, 536, 537, 539, 542, 543, 549, 550, 553, 555, 556, 557, 567, 570, 572, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 587, 588, 590, 593, 600, 602, 604, 606, 607, 608, 609, 617, 618, 623, 626, 627, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 648, 649, 655, 665, 679, 680, 681, 689, 694, 695, 700, 701, 703, 706, 707, 709, 715, 716, 717, 718, 720, 721, 724, 726, 731, 733, 734, 737, 738, 739, 742, 745, 746, 756, 757, 759, 761, 762, 764, 765, 772, 775, 777, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 808, 812, 815, 816, 817, 819, 820, 825, 826, 827, 828, 830, 831, 835, 839, 857, 863, 874, 880, 881, 882, 883, 886, 887, 888, 889, 892, 894, 895, 896, 897, 898, 900, 901, 903, 905, 906, 908, 909, 911, 912, 913, 914, 915, 919, 924, 926, 927, 928, 929, 932, 933, 937, 938, 939, 942, 944, 945, 946, 952, 957, 961, 966, 968, 969, 971, 972, 974, 976, 977, 978, 980, 981, 984, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1019, 1020, 1021, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1049, 1051, 1052, 1053, 1063, 1069, 1070, 1071, 1072, 1073, 1074, 1080, 1081, 1082, 1085, 1087, 1089, 1090, 1099, 1107], "within": [2, 51, 124, 125, 164, 165, 166, 167, 168, 169, 183, 239, 268, 496, 529, 665, 700, 701, 703, 704, 709, 772, 1106], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 69, 70, 71, 72, 73, 76, 77, 92, 93, 94, 95, 96, 97, 98, 99, 101, 104, 105, 106, 107, 108, 116, 117, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 661, 665, 676, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 892, 895, 896, 897, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 926, 927, 933, 935, 936, 939, 941, 943, 948, 949, 951, 952, 953, 954, 957, 959, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 979, 981, 982, 983, 985, 986, 987, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1099, 1106], "dtype": [2, 31, 39, 72, 76, 77, 92, 94, 96, 98, 99, 103, 104, 105, 106, 112, 113, 116, 126, 127, 128, 129, 131, 137, 165, 166, 168, 169, 183, 228, 229, 230, 237, 268, 282, 307, 308, 312, 313, 314, 321, 322, 369, 377, 420, 448, 455, 457, 459, 460, 461, 498, 499, 506, 507, 508, 509, 510, 512, 513, 514, 521, 542, 559, 572, 574, 578, 583, 592, 594, 604, 616, 620, 624, 625, 627, 628, 629, 630, 638, 641, 647, 656, 665, 700, 701, 703, 704, 709, 772, 775, 794, 795, 804, 806, 807, 809, 814, 815, 816, 817, 823, 824, 827, 828, 876, 880, 904, 910, 918, 930, 958, 965, 966, 992, 1009, 1016, 1038, 1055, 1069, 1078, 1080, 1081, 1082, 1086, 1099, 1107], "method": [2, 3, 4, 5, 8, 27, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 93, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 120, 126, 135, 138, 140, 149, 153, 164, 175, 180, 186, 194, 200, 206, 207, 208, 235, 243, 249, 254, 260, 268, 275, 278, 279, 282, 306, 362, 365, 372, 373, 380, 387, 390, 391, 396, 405, 410, 413, 424, 430, 446, 450, 456, 457, 461, 476, 478, 482, 483, 486, 490, 491, 494, 496, 504, 506, 507, 508, 509, 510, 512, 513, 514, 562, 570, 571, 580, 582, 587, 603, 611, 630, 639, 641, 652, 657, 658, 660, 661, 665, 666, 667, 670, 671, 672, 673, 676, 680, 687, 689, 698, 702, 703, 704, 707, 713, 724, 725, 743, 748, 752, 755, 760, 766, 772, 781, 782, 869, 872, 886, 887, 900, 934, 940, 956, 960, 967, 986, 987, 995, 1001, 1058, 1082, 1091, 1093, 1095, 1099, 1100, 1103, 1104, 1105], "attribut": [2, 3, 4, 5, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 61, 62, 63, 64, 65, 66, 67, 68, 126, 268, 657, 658, 660, 661, 666, 667, 671, 672, 673, 772, 1091, 1093, 1095, 1100, 1103, 1104, 1105], "A": [5, 28, 31, 48, 54, 57, 75, 99, 103, 104, 105, 106, 116, 122, 133, 159, 165, 182, 183, 198, 225, 237, 238, 239, 243, 244, 268, 274, 328, 329, 332, 372, 373, 380, 390, 391, 399, 402, 404, 406, 413, 449, 456, 459, 470, 482, 483, 501, 505, 506, 507, 508, 509, 510, 512, 513, 514, 533, 534, 539, 540, 541, 543, 549, 550, 567, 601, 614, 615, 619, 665, 700, 708, 709, 726, 745, 748, 749, 772, 775, 830, 831, 835, 887, 996, 997, 998, 1000, 1003, 1004, 1005, 1029, 1030, 1035, 1036, 1037, 1039, 1045, 1046, 1063, 1099, 1106], "encod": [5, 68, 103, 104, 116, 227, 268, 300, 301, 303, 304, 389, 535, 665, 799, 1031], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 35, 48, 49, 50, 69, 70, 93, 95, 98, 103, 104, 105, 108, 109, 111, 114, 116, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 144, 149, 158, 164, 165, 166, 167, 168, 169, 170, 180, 183, 190, 209, 211, 218, 227, 229, 234, 235, 237, 243, 268, 278, 280, 282, 306, 324, 369, 392, 401, 424, 430, 438, 439, 440, 441, 443, 446, 448, 449, 450, 460, 461, 489, 493, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 522, 526, 527, 546, 552, 553, 558, 559, 560, 561, 564, 584, 588, 590, 594, 598, 611, 612, 624, 625, 638, 641, 642, 643, 647, 652, 653, 655, 656, 665, 676, 689, 691, 699, 700, 701, 702, 703, 704, 708, 709, 713, 714, 718, 729, 731, 736, 743, 748, 752, 755, 760, 772, 779, 780, 781, 810, 826, 876, 895, 908, 934, 940, 948, 949, 950, 951, 953, 956, 958, 959, 960, 966, 967, 985, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1018, 1022, 1023, 1042, 1048, 1049, 1054, 1055, 1056, 1057, 1060, 1080, 1087, 1099, 1107], "string": [5, 7, 9, 12, 13, 14, 18, 28, 29, 31, 34, 35, 39, 48, 54, 60, 68, 77, 99, 103, 104, 105, 106, 116, 124, 125, 126, 127, 128, 131, 134, 141, 159, 163, 164, 165, 166, 167, 183, 196, 198, 208, 211, 212, 219, 228, 233, 234, 237, 239, 243, 244, 247, 268, 275, 303, 309, 355, 359, 362, 365, 366, 377, 379, 385, 389, 397, 431, 460, 472, 487, 489, 506, 507, 508, 509, 510, 512, 513, 514, 529, 532, 533, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 567, 589, 591, 597, 600, 601, 602, 609, 611, 612, 619, 632, 636, 644, 647, 649, 652, 653, 655, 665, 681, 691, 698, 699, 700, 701, 702, 709, 729, 730, 731, 737, 742, 748, 749, 752, 753, 772, 775, 801, 807, 808, 862, 866, 869, 872, 873, 885, 901, 941, 1027, 1028, 1029, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1061, 1062, 1063, 1078, 1099, 1107], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 389, 665, 687, 698, 725, 772], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 425, 540, 935, 1036], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 34, 36, 48, 49, 50, 69, 75, 76, 77, 92, 93, 97, 99, 103, 104, 108, 109, 111, 113, 114, 116, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 134, 137, 141, 142, 143, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 176, 177, 178, 183, 196, 198, 208, 209, 213, 217, 219, 225, 227, 229, 230, 233, 234, 235, 236, 239, 241, 243, 251, 253, 255, 258, 268, 277, 278, 279, 280, 281, 282, 292, 298, 300, 301, 303, 304, 307, 318, 319, 320, 321, 322, 323, 324, 342, 358, 360, 366, 371, 372, 373, 374, 375, 376, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 413, 416, 417, 421, 425, 444, 448, 451, 456, 457, 459, 461, 465, 466, 467, 468, 472, 482, 483, 484, 486, 493, 496, 498, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 518, 521, 526, 528, 529, 533, 535, 537, 548, 549, 550, 554, 555, 557, 559, 560, 561, 564, 569, 581, 584, 587, 588, 589, 590, 591, 592, 594, 597, 598, 603, 606, 611, 612, 613, 624, 625, 627, 630, 638, 641, 647, 652, 653, 656, 665, 681, 683, 685, 691, 693, 695, 699, 700, 701, 702, 703, 704, 708, 709, 713, 714, 718, 723, 732, 735, 737, 742, 743, 744, 748, 757, 759, 761, 764, 772, 775, 779, 780, 781, 782, 791, 797, 799, 804, 807, 810, 814, 821, 822, 823, 824, 825, 826, 845, 865, 867, 873, 879, 881, 882, 883, 890, 894, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 926, 927, 931, 932, 935, 954, 958, 961, 967, 979, 982, 983, 985, 987, 988, 989, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1012, 1017, 1022, 1024, 1029, 1031, 1033, 1044, 1045, 1046, 1050, 1051, 1053, 1055, 1056, 1057, 1060, 1079, 1080, 1081, 1084, 1087, 1089, 1099, 1106], "none": [6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 48, 49, 50, 52, 54, 56, 57, 59, 69, 77, 92, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 138, 142, 146, 149, 154, 155, 163, 165, 166, 168, 169, 170, 175, 179, 182, 183, 184, 186, 188, 190, 194, 195, 198, 206, 209, 216, 218, 219, 225, 227, 230, 234, 235, 236, 237, 238, 239, 268, 278, 280, 281, 282, 294, 299, 312, 313, 314, 317, 319, 322, 324, 328, 329, 355, 358, 359, 366, 373, 374, 375, 376, 377, 380, 381, 382, 388, 392, 396, 397, 404, 406, 407, 408, 414, 416, 417, 428, 438, 439, 440, 441, 443, 449, 457, 459, 460, 461, 472, 474, 483, 484, 485, 488, 490, 493, 496, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 516, 520, 521, 522, 523, 527, 528, 532, 533, 534, 536, 537, 540, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 564, 567, 568, 569, 578, 588, 589, 590, 591, 592, 600, 602, 604, 609, 611, 612, 613, 614, 616, 617, 626, 627, 628, 629, 630, 632, 636, 641, 642, 643, 646, 647, 649, 651, 652, 653, 654, 655, 665, 683, 684, 689, 694, 695, 700, 701, 703, 704, 707, 708, 709, 711, 713, 714, 718, 721, 731, 734, 735, 736, 737, 743, 744, 745, 750, 752, 755, 760, 772, 775, 779, 780, 781, 782, 789, 790, 814, 815, 826, 827, 829, 830, 831, 847, 848, 849, 854, 865, 866, 873, 878, 879, 881, 882, 883, 887, 888, 889, 891, 894, 895, 897, 899, 900, 901, 910, 914, 915, 918, 921, 922, 926, 927, 938, 948, 949, 951, 953, 959, 966, 967, 968, 969, 970, 971, 975, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1013, 1015, 1018, 1019, 1022, 1023, 1026, 1028, 1029, 1030, 1032, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1077, 1078, 1081, 1082, 1088, 1089, 1099, 1106], "decim": [6, 28, 31, 48, 268, 515, 562, 665, 772, 1006, 1058, 1099], "temporari": 6, "remov": [6, 8, 137, 147, 227, 238, 268, 282, 377, 458, 461, 546, 552, 558, 616, 665, 688, 745, 772, 781, 826, 985, 1042, 1048, 1054, 1057, 1099], "onc": [6, 57, 103, 104, 108, 133, 186, 207, 209, 247, 268, 306, 461, 516, 665, 682, 753, 772, 967, 1007, 1099], "stabil": 6, "current": [6, 9, 26, 56, 93, 99, 105, 106, 134, 142, 143, 182, 183, 268, 338, 359, 449, 488, 665, 676, 683, 684, 708, 709, 772, 775, 814, 818, 833, 841, 866, 981, 1099, 1106], "consid": [6, 103, 104, 116, 121, 149, 160, 186, 190, 207, 235, 237, 238, 268, 282, 312, 313, 314, 323, 359, 459, 461, 506, 507, 508, 509, 510, 512, 513, 514, 606, 618, 661, 665, 689, 705, 712, 718, 743, 745, 760, 772, 807, 810, 815, 816, 817, 825, 866, 897, 910, 967, 985, 1009, 1010, 1011, 1099], "beta": 6, "cfg": [7, 8, 9, 15, 135], "path": [7, 9, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 48, 49, 50, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 268, 474, 518, 543, 665, 687, 725, 731, 735, 752, 772, 1012, 1039, 1099, 1107], "previous": 7, "save": [7, 165, 166, 183, 239, 268, 330, 338, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 614, 661, 665, 676, 700, 701, 709, 772, 841, 862, 866, 873], "share": [7, 60, 124, 125, 151, 268, 880, 1099], "option": [7, 8, 9, 26, 30, 31, 40, 69, 103, 105, 107, 108, 109, 111, 114, 117, 118, 120, 121, 123, 126, 127, 128, 129, 130, 131, 132, 179, 183, 190, 225, 229, 234, 268, 411, 504, 506, 507, 508, 509, 510, 512, 513, 514, 526, 553, 584, 627, 647, 655, 665, 676, 708, 709, 718, 731, 772, 775, 918, 922, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1022, 1049, 1077, 1087, 1099], "from": [7, 8, 28, 31, 48, 54, 55, 56, 69, 76, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 146, 147, 151, 153, 158, 163, 165, 166, 168, 180, 181, 183, 184, 190, 198, 202, 206, 208, 209, 211, 212, 227, 234, 235, 237, 239, 268, 318, 324, 325, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 373, 377, 389, 396, 411, 449, 461, 480, 481, 483, 488, 489, 493, 495, 505, 506, 507, 509, 512, 513, 514, 516, 529, 539, 540, 542, 548, 559, 560, 561, 564, 582, 595, 596, 600, 610, 611, 612, 613, 614, 641, 646, 651, 652, 653, 661, 664, 665, 687, 688, 693, 698, 700, 701, 703, 709, 718, 725, 726, 729, 730, 743, 750, 772, 775, 781, 826, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 886, 918, 922, 959, 976, 977, 978, 981, 985, 996, 1007, 1035, 1036, 1038, 1044, 1055, 1056, 1057, 1060, 1090, 1099, 1106, 1107], "json": [7, 9, 34, 35, 112, 113, 119, 268, 389, 474, 542, 543, 665, 676, 687, 698, 725, 731, 752, 772, 1038, 1039], "file": [7, 9, 27, 28, 32, 33, 34, 35, 36, 48, 49, 50, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 153, 268, 474, 687, 693, 725, 731, 752, 772, 781, 886, 1099], "produc": [7, 128, 129, 131, 422, 469, 611, 612, 629, 713, 714, 772, 932], "filepath": 7, "same": [7, 18, 30, 31, 58, 60, 69, 75, 76, 77, 109, 116, 124, 125, 127, 135, 164, 186, 208, 219, 235, 243, 244, 247, 254, 268, 274, 281, 328, 329, 465, 468, 487, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 529, 569, 574, 611, 661, 665, 699, 713, 714, 737, 743, 748, 749, 753, 772, 777, 781, 782, 826, 830, 831, 835, 967, 985, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1090, 1099], "reset": [8, 135], "default": [8, 10, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 48, 50, 69, 76, 92, 94, 95, 96, 97, 98, 99, 103, 104, 106, 108, 112, 113, 114, 116, 126, 127, 128, 129, 130, 131, 135, 149, 151, 164, 166, 167, 169, 170, 180, 182, 183, 190, 196, 198, 206, 207, 208, 209, 220, 227, 235, 237, 240, 245, 268, 277, 278, 280, 309, 324, 358, 366, 371, 373, 374, 375, 376, 392, 443, 448, 449, 452, 460, 480, 481, 483, 488, 493, 496, 506, 507, 508, 509, 510, 512, 513, 514, 516, 522, 531, 539, 546, 548, 552, 553, 558, 559, 560, 561, 564, 584, 585, 588, 590, 594, 598, 603, 611, 612, 613, 620, 624, 625, 627, 638, 641, 646, 647, 652, 653, 654, 656, 665, 689, 691, 699, 701, 702, 704, 708, 709, 718, 731, 738, 743, 746, 752, 772, 779, 780, 781, 808, 826, 865, 873, 879, 880, 881, 882, 883, 895, 953, 958, 959, 966, 976, 977, 981, 985, 987, 1007, 1018, 1026, 1029, 1035, 1042, 1044, 1048, 1049, 1054, 1055, 1056, 1057, 1060, 1087, 1088, 1099, 1107], "state": [8, 75, 85, 134, 606, 676, 685, 691, 693, 723, 735, 772], "note": [8, 18, 30, 31, 40, 54, 58, 59, 69, 92, 93, 94, 96, 98, 99, 103, 105, 106, 107, 108, 112, 113, 114, 116, 117, 120, 121, 127, 129, 131, 133, 135, 137, 141, 145, 154, 165, 166, 168, 169, 179, 180, 182, 183, 186, 194, 197, 206, 207, 208, 226, 229, 233, 234, 238, 239, 243, 268, 321, 322, 328, 329, 351, 352, 355, 359, 366, 397, 404, 406, 410, 425, 448, 459, 461, 491, 506, 507, 508, 509, 510, 511, 512, 513, 514, 526, 533, 539, 540, 541, 544, 546, 547, 549, 552, 558, 559, 571, 572, 580, 606, 611, 612, 614, 618, 627, 638, 640, 641, 655, 656, 661, 665, 675, 681, 685, 693, 694, 700, 701, 703, 704, 705, 709, 712, 726, 735, 737, 742, 745, 748, 772, 823, 824, 830, 831, 858, 859, 862, 873, 935, 958, 967, 1002, 1010, 1011, 1017, 1022, 1029, 1035, 1036, 1037, 1040, 1042, 1043, 1045, 1048, 1054, 1055, 1069, 1080, 1099, 1106], "oper": [8, 31, 60, 76, 82, 83, 92, 94, 95, 96, 97, 98, 103, 114, 138, 153, 159, 164, 167, 174, 184, 186, 191, 194, 196, 197, 201, 208, 224, 229, 230, 234, 237, 246, 247, 268, 275, 276, 279, 318, 319, 320, 321, 322, 323, 372, 373, 387, 390, 391, 410, 413, 438, 439, 440, 441, 449, 456, 473, 476, 478, 482, 483, 486, 490, 491, 498, 516, 570, 571, 580, 587, 588, 590, 601, 602, 615, 665, 676, 693, 699, 702, 705, 708, 712, 718, 719, 753, 772, 781, 821, 822, 823, 824, 825, 886, 948, 949, 950, 951, 989, 1075, 1079, 1080, 1081, 1089, 1099], "environ": [8, 26, 130, 133], "local": [8, 30, 105, 107, 117, 131, 268, 366, 807, 809, 837, 838, 870, 873, 982, 983, 1099], "non": [8, 28, 30, 31, 40, 48, 69, 97, 122, 166, 169, 181, 190, 211, 212, 234, 238, 243, 244, 268, 397, 449, 460, 488, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 534, 540, 589, 591, 600, 601, 602, 609, 611, 614, 632, 636, 642, 643, 644, 647, 649, 665, 701, 704, 718, 729, 730, 745, 748, 749, 772, 901, 959, 981, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1030, 1036, 1080, 1099], "env": [8, 132], "back": [8, 69, 153, 230, 268, 487, 565, 665, 731, 772, 781, 886, 1061, 1081, 1099], "written": [9, 27, 28, 31, 32, 33, 34, 35, 36, 48, 49, 50, 268, 731, 752, 772], "contain": [9, 28, 29, 30, 31, 48, 69, 74, 93, 94, 97, 99, 107, 117, 124, 128, 141, 149, 165, 168, 181, 194, 198, 233, 268, 278, 280, 282, 303, 304, 401, 460, 461, 537, 539, 541, 543, 556, 557, 588, 590, 630, 665, 681, 689, 700, 703, 723, 742, 772, 775, 779, 780, 826, 966, 973, 985, 1033, 1035, 1037, 1039, 1052, 1053, 1075, 1099], "where": [9, 31, 54, 69, 106, 128, 149, 153, 180, 190, 207, 220, 240, 268, 293, 368, 371, 373, 483, 499, 517, 526, 529, 531, 585, 598, 603, 642, 643, 646, 654, 655, 665, 689, 718, 738, 746, 772, 781, 792, 875, 879, 886, 1008, 1022, 1026, 1088, 1090, 1099, 1106], "ascii": [10, 18, 545, 547, 551, 567, 1041, 1043, 1047, 1063], "charact": [10, 12, 18, 24, 28, 29, 48, 103, 104, 116, 268, 355, 538, 540, 544, 545, 546, 551, 552, 554, 555, 558, 567, 723, 772, 775, 862, 1034, 1036, 1040, 1041, 1042, 1047, 1048, 1050, 1051, 1054, 1063], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 163, 268], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 55, 56, 57, 59, 92, 99, 103, 104, 107, 116, 117, 198, 224, 230, 237, 238, 268, 745, 772, 1081, 1099, 1106], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 34, 36, 48, 49, 50, 54, 69, 75, 93, 97, 99, 103, 104, 108, 109, 111, 113, 114, 116, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 137, 141, 142, 143, 146, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 176, 177, 178, 180, 183, 184, 188, 193, 194, 196, 198, 199, 206, 207, 208, 209, 213, 217, 219, 225, 227, 229, 230, 233, 234, 235, 239, 241, 243, 250, 251, 253, 255, 256, 258, 261, 268, 278, 279, 280, 282, 292, 298, 300, 303, 304, 318, 319, 320, 321, 322, 323, 324, 342, 358, 360, 366, 371, 372, 373, 374, 375, 376, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 413, 416, 417, 421, 425, 444, 448, 451, 456, 457, 459, 461, 465, 468, 470, 472, 482, 483, 484, 486, 493, 496, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 518, 521, 526, 528, 529, 533, 537, 542, 548, 549, 550, 554, 555, 557, 559, 560, 561, 581, 584, 587, 588, 589, 590, 591, 594, 597, 598, 603, 606, 611, 612, 613, 624, 625, 627, 638, 641, 647, 652, 653, 655, 656, 665, 681, 683, 684, 685, 691, 693, 699, 700, 701, 702, 703, 704, 708, 709, 711, 713, 714, 723, 732, 735, 737, 742, 743, 748, 756, 757, 759, 761, 762, 764, 767, 772, 775, 779, 780, 781, 791, 797, 804, 807, 810, 813, 814, 821, 822, 823, 824, 825, 826, 845, 865, 867, 873, 879, 881, 882, 883, 890, 901, 902, 903, 905, 908, 909, 910, 912, 913, 914, 915, 917, 918, 919, 922, 926, 927, 935, 954, 958, 961, 973, 979, 982, 983, 985, 987, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1012, 1017, 1022, 1024, 1029, 1033, 1038, 1044, 1045, 1046, 1050, 1051, 1053, 1055, 1056, 1057, 1079, 1080, 1081, 1084, 1087, 1089, 1090, 1099, 1106], "revert": 10, "utf8_full_condens": [10, 18, 99], "format": [10, 11, 14, 18, 28, 31, 32, 33, 48, 102, 103, 104, 105, 116, 121, 152, 163, 180, 190, 207, 208, 226, 266, 268, 359, 362, 365, 472, 559, 560, 561, 564, 614, 692, 698, 718, 731, 752, 772, 869, 872, 1055, 1056, 1057, 1060, 1098], "style": [10, 18, 31, 114, 120, 198, 268], "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 275, 540, 549, 665, 775, 1036, 1045], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 275, 534, 540, 665, 1030, 1036, 1077, 1099], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 51, 54, 69, 71, 73, 76, 93, 95, 121, 129, 142, 143, 145, 146, 147, 150, 154, 155, 159, 162, 163, 164, 174, 182, 183, 188, 189, 198, 199, 200, 218, 219, 220, 240, 243, 247, 251, 253, 255, 256, 257, 258, 260, 261, 268, 274, 277, 284, 285, 286, 287, 288, 289, 307, 310, 311, 315, 316, 323, 324, 325, 328, 329, 360, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 386, 387, 390, 391, 396, 404, 406, 407, 408, 410, 411, 413, 425, 435, 452, 453, 454, 456, 462, 463, 464, 475, 478, 480, 481, 482, 483, 488, 490, 493, 494, 495, 496, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 524, 525, 526, 530, 531, 576, 577, 580, 585, 595, 596, 599, 600, 601, 603, 605, 615, 616, 630, 633, 634, 645, 646, 654, 665, 683, 688, 694, 695, 699, 708, 709, 716, 717, 724, 737, 738, 746, 748, 750, 753, 757, 759, 761, 762, 763, 764, 766, 767, 772, 775, 783, 784, 785, 786, 787, 788, 811, 812, 819, 820, 825, 826, 827, 830, 831, 867, 882, 883, 888, 892, 897, 935, 981, 985, 987, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1020, 1021, 1025, 1073, 1074, 1086, 1099, 1107], "fmt": [11, 395, 619, 665, 706, 772], "floatfmt": 11, "mix": [11, 827, 1057, 1099], "control": [11, 31, 59, 76, 127, 268, 691, 772], "how": [11, 30, 31, 60, 69, 76, 77, 95, 98, 106, 149, 182, 237, 238, 268, 309, 326, 358, 366, 396, 422, 423, 487, 499, 511, 542, 559, 561, 613, 655, 665, 689, 708, 745, 772, 808, 828, 865, 873, 932, 933, 1002, 1038, 1055, 1057, 1099], "float": [11, 28, 31, 42, 43, 48, 121, 124, 125, 126, 129, 131, 137, 146, 151, 154, 183, 200, 209, 216, 260, 268, 311, 312, 313, 314, 324, 328, 329, 360, 371, 372, 373, 374, 375, 376, 381, 386, 390, 391, 396, 399, 402, 404, 406, 407, 408, 413, 421, 452, 456, 462, 475, 480, 481, 482, 483, 490, 493, 494, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 580, 599, 633, 634, 639, 641, 646, 654, 665, 694, 709, 724, 734, 735, 766, 772, 775, 804, 812, 815, 816, 817, 826, 827, 829, 830, 831, 867, 879, 880, 881, 882, 883, 888, 892, 897, 907, 922, 931, 932, 962, 969, 970, 976, 977, 984, 985, 986, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1022, 1026, 1069, 1080, 1088, 1099, 1107], "point": [11, 31, 42, 43, 129, 131, 154, 165, 168, 184, 268, 311, 324, 328, 360, 381, 386, 404, 406, 461, 515, 516, 611, 665, 694, 700, 703, 713, 714, 726, 772, 812, 826, 830, 867, 888, 892, 907, 985, 1006, 1007, 1080, 1099], "full": [11, 39, 69, 74, 76, 103, 104, 107, 116, 117, 165, 166, 168, 169, 268, 559, 560, 561, 564, 700, 701, 703, 704, 713, 714, 772, 775, 1055, 1056, 1057, 1060, 1107], "number": [11, 12, 13, 15, 23, 24, 28, 31, 36, 48, 50, 69, 86, 92, 94, 96, 98, 101, 103, 104, 105, 106, 108, 112, 113, 116, 119, 122, 127, 129, 130, 132, 133, 141, 142, 151, 152, 154, 155, 163, 171, 180, 181, 184, 185, 193, 194, 209, 215, 216, 220, 222, 233, 237, 240, 250, 252, 262, 268, 293, 299, 305, 317, 323, 324, 326, 340, 343, 348, 350, 360, 367, 368, 370, 374, 375, 376, 380, 382, 388, 393, 404, 406, 414, 415, 423, 429, 442, 447, 449, 489, 493, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 519, 520, 522, 531, 544, 547, 549, 555, 556, 562, 573, 579, 585, 603, 604, 611, 622, 642, 643, 646, 650, 654, 665, 681, 683, 692, 693, 694, 695, 705, 712, 723, 733, 734, 738, 740, 742, 746, 756, 758, 768, 772, 803, 814, 825, 826, 828, 843, 846, 855, 857, 867, 874, 875, 877, 880, 881, 882, 883, 887, 889, 896, 907, 924, 933, 939, 952, 957, 959, 973, 974, 985, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1014, 1015, 1018, 1026, 1040, 1043, 1045, 1051, 1052, 1058, 1070, 1083, 1088, 1099, 1107], "plai": [12, 602], "sam": 12, "As": [12, 92, 94, 95, 96, 98, 108, 112, 113, 268, 772], "time": [12, 30, 39, 41, 54, 59, 74, 75, 105, 114, 116, 153, 165, 166, 168, 169, 183, 239, 268, 305, 330, 331, 332, 333, 334, 338, 339, 355, 358, 359, 362, 364, 365, 366, 369, 420, 421, 449, 506, 507, 508, 509, 510, 512, 513, 514, 522, 559, 561, 564, 578, 579, 601, 602, 611, 612, 613, 614, 620, 652, 653, 665, 685, 700, 701, 703, 704, 709, 723, 772, 775, 781, 803, 833, 834, 835, 836, 841, 842, 862, 865, 866, 869, 871, 872, 873, 876, 886, 930, 932, 1055, 1057, 1060, 1082, 1083, 1099, 1107], "goe": 12, "By": [12, 13, 69, 103, 104, 116, 165, 166, 183, 220, 239, 240, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 531, 548, 585, 603, 614, 627, 646, 654, 665, 700, 701, 709, 738, 746, 772, 862, 866, 873, 1026, 1044, 1080, 1088, 1099], "begin": [12, 31, 268, 374, 375, 376, 539, 611, 665, 881, 882, 883, 1035, 1099], "beauti": 12, "friendship": 12, "len": [12, 31, 127, 129, 181, 268, 318, 461, 545, 551, 567, 665, 1041, 1047, 1063, 1099], "u32": [12, 54, 105, 139, 165, 195, 245, 250, 259, 261, 268, 276, 283, 290, 291, 292, 293, 294, 317, 318, 336, 340, 344, 348, 350, 356, 357, 360, 367, 368, 414, 418, 419, 422, 433, 460, 479, 485, 496, 503, 506, 507, 509, 512, 513, 514, 517, 534, 544, 547, 578, 582, 588, 593, 597, 598, 604, 637, 665, 679, 700, 721, 751, 756, 765, 767, 772, 791, 792, 793, 804, 809, 839, 843, 850, 852, 855, 857, 860, 863, 864, 867, 874, 875, 897, 943, 987, 994, 1030, 1040, 1043, 1082, 1085, 1087, 1099], "37": 12, "beaut": 12, "48": [12, 166, 268, 701, 772], "fmt_str_length": 12, "50": [12, 31, 146, 153, 163, 268, 312, 313, 314, 359, 366, 665, 815, 827, 873, 1099], "print": [12, 15, 17, 18, 23, 104, 123, 150, 163, 164, 181, 184, 228, 246, 268, 395, 472, 665, 706, 772, 908, 1078, 1099, 1107], "overwrit": [13, 29, 30, 92, 94, 95, 96, 98, 103, 104, 112, 113, 116, 137, 268, 277, 665, 693, 772], "chunk": [13, 50, 101, 103, 104, 114, 116, 118, 119, 120, 129, 131, 153, 181, 193, 268, 281, 497, 665, 772, 781, 813, 886, 893, 973, 988, 1075, 1099], "stream": [13, 32, 33, 48, 49, 50, 75, 111, 141, 164, 167, 182, 233, 235, 268, 681, 685, 691, 693, 699, 702, 708, 713, 714, 718, 723, 735, 737, 742, 743, 772], "engin": [13, 29, 105, 106, 108, 133, 164, 167, 182, 186, 235, 254, 268, 699, 702, 708, 713, 714, 718, 743, 760, 772, 967, 1099], "determin": [13, 28, 31, 48, 67, 69, 76, 95, 98, 103, 104, 105, 108, 114, 116, 120, 122, 138, 147, 159, 165, 166, 168, 180, 181, 186, 198, 234, 239, 268, 309, 342, 358, 366, 449, 460, 469, 493, 499, 506, 507, 508, 509, 510, 512, 513, 514, 526, 542, 559, 561, 562, 613, 638, 641, 656, 665, 700, 701, 703, 772, 808, 845, 865, 873, 897, 959, 966, 985, 1022, 1038, 1055, 1057, 1058, 1099], "schema": [13, 30, 54, 60, 70, 71, 72, 76, 77, 87, 88, 90, 92, 94, 95, 96, 98, 99, 103, 104, 105, 106, 110, 112, 113, 115, 116, 119, 127, 129, 138, 142, 143, 150, 151, 181, 186, 191, 194, 229, 268, 295, 296, 297, 449, 469, 542, 587, 647, 665, 683, 684, 690, 713, 714, 719, 731, 755, 760, 772, 775, 796, 818, 1038, 1099], "thread": [13, 28, 48, 101, 103, 104, 106, 133, 268, 282, 425, 461, 665, 772, 935], "pool": [13, 133, 772], "For": [13, 30, 31, 106, 107, 108, 117, 149, 153, 166, 182, 183, 254, 268, 374, 375, 376, 449, 461, 470, 498, 526, 533, 539, 540, 541, 549, 606, 611, 614, 618, 619, 661, 665, 685, 689, 701, 709, 760, 772, 781, 881, 882, 883, 886, 989, 1022, 1029, 1035, 1036, 1037, 1045, 1080, 1099], "some": [13, 26, 30, 31, 95, 103, 104, 116, 137, 149, 268, 661, 689, 772, 908, 1099, 1107], "dataset": [13, 36, 103, 104, 114, 116, 120, 121, 182, 268, 411, 665, 676, 708, 713, 714, 772, 922, 1099], "esp": 13, "when": [13, 15, 17, 21, 28, 31, 36, 39, 48, 50, 59, 60, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 103, 104, 105, 108, 109, 111, 114, 116, 117, 118, 119, 121, 129, 131, 138, 141, 150, 151, 153, 155, 159, 165, 166, 168, 169, 182, 186, 197, 206, 208, 211, 212, 219, 227, 229, 233, 235, 244, 268, 312, 313, 314, 374, 375, 376, 382, 449, 460, 470, 489, 503, 528, 529, 546, 552, 558, 559, 597, 606, 611, 618, 665, 681, 695, 700, 701, 703, 704, 708, 713, 714, 729, 730, 737, 742, 743, 749, 772, 781, 815, 816, 817, 873, 880, 881, 882, 883, 886, 889, 966, 994, 1010, 1011, 1042, 1048, 1054, 1055, 1076, 1099], "have": [13, 26, 30, 31, 39, 69, 77, 93, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 120, 129, 131, 153, 166, 180, 201, 207, 208, 226, 268, 323, 374, 375, 376, 461, 470, 496, 541, 611, 665, 687, 701, 718, 725, 735, 751, 772, 775, 781, 825, 881, 882, 883, 886, 894, 987, 1057, 1099, 1107], "larg": [13, 30, 69, 105, 165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "element": [13, 23, 128, 131, 141, 179, 198, 206, 220, 233, 240, 268, 282, 284, 285, 286, 287, 288, 289, 305, 310, 315, 316, 318, 319, 320, 321, 322, 323, 328, 329, 378, 379, 383, 392, 401, 422, 424, 425, 426, 430, 438, 439, 440, 441, 446, 450, 453, 454, 461, 487, 488, 496, 499, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 523, 524, 525, 530, 531, 555, 556, 562, 576, 577, 579, 585, 603, 642, 643, 646, 654, 665, 681, 737, 738, 742, 746, 772, 782, 783, 784, 785, 786, 787, 788, 803, 811, 814, 819, 820, 821, 822, 823, 824, 825, 830, 831, 884, 885, 890, 896, 908, 921, 924, 932, 934, 935, 936, 940, 948, 949, 950, 951, 956, 960, 963, 964, 967, 981, 987, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1019, 1020, 1021, 1025, 1026, 1051, 1052, 1058, 1070, 1073, 1074, 1078, 1083, 1084, 1088, 1099], "too": [13, 165, 166, 183, 239, 268, 355, 359, 366, 503, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "optimist": 13, "lead": [13, 36, 99, 121, 165, 166, 168, 169, 268, 459, 461, 518, 546, 558, 567, 574, 603, 665, 700, 701, 703, 704, 713, 714, 755, 760, 772, 967, 1012, 1042, 1054, 1063, 1099], "out": [13, 48, 49, 50, 99, 123, 166, 208, 268, 301, 428, 448, 533, 535, 655, 701, 772, 799, 938, 958, 1029, 1031], "memori": [13, 50, 76, 92, 93, 96, 97, 98, 103, 104, 109, 114, 116, 118, 119, 120, 137, 153, 186, 208, 217, 254, 268, 487, 497, 521, 665, 772, 781, 886, 967, 988, 1016, 1017, 1099], "error": [13, 30, 78, 103, 104, 105, 116, 165, 166, 183, 198, 206, 239, 268, 277, 301, 307, 355, 359, 366, 410, 431, 448, 506, 507, 508, 509, 510, 512, 513, 514, 533, 535, 539, 541, 542, 543, 559, 560, 561, 564, 665, 700, 701, 709, 755, 760, 772, 799, 804, 862, 866, 873, 941, 958, 1029, 1031, 1035, 1037, 1038, 1039, 1055, 1056, 1057, 1060, 1099], "row": [13, 18, 23, 28, 31, 34, 36, 48, 50, 69, 70, 72, 76, 84, 86, 91, 95, 96, 98, 99, 103, 104, 105, 108, 109, 111, 114, 116, 118, 119, 120, 121, 124, 127, 129, 138, 141, 142, 149, 153, 156, 159, 163, 164, 165, 167, 170, 171, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 194, 208, 209, 218, 222, 223, 226, 228, 233, 235, 237, 238, 245, 252, 254, 262, 268, 293, 379, 393, 415, 426, 449, 487, 488, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 527, 529, 538, 542, 573, 594, 597, 606, 607, 618, 622, 624, 625, 640, 642, 643, 650, 655, 665, 681, 683, 685, 689, 693, 696, 697, 700, 705, 708, 709, 710, 712, 714, 718, 736, 740, 741, 742, 743, 745, 751, 758, 760, 768, 772, 781, 885, 886, 896, 921, 936, 981, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1023, 1034, 1038, 1070, 1099, 1107], "per": [13, 28, 31, 48, 127, 129, 141, 163, 194, 195, 212, 219, 233, 244, 257, 259, 260, 268, 282, 306, 425, 428, 448, 461, 529, 584, 597, 665, 681, 730, 737, 742, 749, 763, 765, 766, 772, 935, 938, 958, 1087, 1099], "everi": [13, 28, 48, 103, 104, 116, 165, 168, 223, 226, 239, 268, 318, 319, 320, 321, 322, 323, 359, 366, 379, 418, 419, 423, 426, 428, 429, 438, 443, 447, 538, 575, 606, 607, 665, 693, 700, 703, 741, 772, 821, 822, 823, 824, 825, 866, 873, 885, 928, 929, 933, 936, 938, 939, 948, 953, 957, 1034, 1072, 1099], "process": [13, 28, 48, 49, 50, 133, 268, 772], "liter": [14, 18, 30, 54, 108, 129, 130, 131, 132, 163, 180, 187, 188, 192, 193, 196, 206, 207, 211, 212, 221, 225, 238, 243, 244, 268, 277, 300, 332, 372, 373, 380, 387, 390, 391, 397, 413, 456, 460, 476, 478, 482, 483, 490, 533, 549, 550, 570, 580, 589, 591, 594, 598, 600, 601, 602, 609, 610, 611, 612, 613, 624, 625, 627, 632, 636, 638, 641, 644, 647, 649, 651, 652, 653, 656, 665, 695, 729, 730, 745, 748, 749, 772, 775, 779, 780, 798, 826, 835, 887, 901, 985, 1010, 1011, 1029, 1045, 1046, 1099, 1106], "left": [14, 31, 56, 69, 124, 125, 165, 166, 168, 169, 182, 183, 238, 268, 324, 374, 375, 376, 396, 397, 493, 506, 507, 508, 509, 510, 512, 513, 514, 517, 545, 567, 578, 600, 606, 607, 611, 612, 618, 640, 652, 653, 655, 665, 700, 701, 703, 704, 708, 709, 745, 772, 826, 881, 882, 883, 901, 985, 1008, 1041, 1063, 1082, 1099], "center": [14, 31, 268, 374, 375, 376, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 665, 881, 882, 883, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1099], "right": [14, 16, 31, 103, 104, 108, 124, 125, 165, 166, 168, 169, 182, 183, 268, 324, 374, 375, 376, 397, 438, 439, 440, 441, 493, 506, 507, 508, 509, 510, 512, 513, 514, 517, 526, 551, 600, 611, 612, 652, 653, 665, 700, 701, 703, 704, 708, 709, 772, 826, 881, 882, 883, 901, 948, 949, 950, 951, 985, 1008, 1022, 1047, 1099], "cell": [14, 31, 268], "align": [14, 31, 69, 76, 268, 567, 1063], "valueerror": [14, 18], "recognis": [14, 18, 126], "column_abc": 14, "column_xyz": 14, "visibl": [15, 151, 268, 880, 1099], "eg": [15, 23, 31, 106, 135, 268, 359, 559, 561, 580, 665, 1055, 1057], "low": [15, 133, 493, 665, 985, 1099], "rang": [15, 31, 105, 106, 146, 151, 165, 181, 268, 325, 336, 350, 356, 357, 359, 366, 367, 396, 594, 601, 610, 611, 612, 613, 624, 625, 651, 652, 653, 665, 700, 772, 827, 839, 857, 863, 864, 866, 873, 874, 880, 981, 1099], "100": [15, 31, 95, 98, 103, 104, 116, 119, 268, 542, 562, 567, 772, 997, 998, 1000, 1038, 1058, 1099, 1107], "98": [15, 174, 268, 305, 528, 562, 574, 579, 665, 1058], "99": [15, 31, 154, 155, 174, 177, 268, 276, 305, 380, 382, 528, 574, 579, 665, 694, 695, 772, 879, 887, 1099], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 33, 36, 50, 54, 69, 76, 99, 106, 116, 129, 131, 143, 153, 162, 163, 165, 166, 171, 173, 174, 175, 193, 197, 198, 199, 203, 204, 211, 222, 243, 247, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 268, 277, 281, 290, 291, 292, 294, 312, 317, 319, 322, 326, 330, 332, 338, 351, 352, 358, 359, 366, 369, 392, 393, 396, 401, 410, 414, 415, 423, 424, 429, 430, 442, 443, 446, 447, 450, 453, 469, 471, 488, 489, 527, 567, 573, 587, 600, 606, 611, 615, 618, 620, 622, 627, 629, 650, 653, 665, 685, 700, 701, 705, 707, 712, 722, 723, 729, 739, 740, 748, 753, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 772, 775, 815, 828, 833, 835, 841, 865, 873, 876, 879, 896, 908, 924, 933, 934, 939, 940, 952, 953, 956, 957, 960, 963, 967, 981, 1010, 1011, 1070, 1099, 1107], "95": [15, 276, 665], "96": [15, 276, 665], "97": [15, 174, 268, 276, 665], "move": [16, 208, 268, 374, 375, 376, 506, 507, 509, 513, 665, 881, 882, 883, 997, 998, 1000, 1004, 1099], "inlin": [16, 208, 268, 533, 539, 540, 549, 1029, 1035, 1036, 1045], "parenthes": 16, "inform": [17, 21, 30, 74, 107, 117, 145, 268, 312, 313, 314, 411, 526, 533, 539, 540, 549, 611, 612, 665, 723, 772, 809, 815, 816, 817, 922, 1022, 1029, 1035, 1036, 1045, 1099], "below": [17, 30, 107, 117, 149, 268, 382, 611, 612, 655, 661, 665, 689, 772], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 69, 99], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 306, 539, 543, 665, 1035, 1039], "rounded_corn": 18, "border": 18, "line": [18, 31, 103, 104, 108, 116, 163, 176, 178, 268, 539, 1035], "includ": [18, 26, 28, 30, 31, 48, 74, 105, 107, 117, 129, 141, 146, 151, 165, 196, 208, 233, 234, 237, 268, 324, 360, 397, 493, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 552, 554, 555, 558, 606, 642, 643, 665, 681, 700, 742, 772, 775, 826, 827, 867, 880, 901, 985, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1050, 1051, 1054, 1089, 1099], "divid": [18, 324, 359, 366, 374, 375, 376, 411, 493, 665, 826, 866, 873, 881, 882, 883, 922, 985, 1099], "dens": [18, 163, 268, 496, 665, 987, 1099], "space": [18, 165, 268, 700, 772], "horizont": [18, 76, 159, 173, 237, 268, 589, 591, 601, 602, 606, 607, 609, 615, 618, 632, 636, 640, 649], "markdown": 18, "compat": [18, 31, 36, 50, 268, 533, 534, 539, 540, 541, 549, 550, 772, 775, 1029, 1030, 1035, 1036, 1037, 1045, 1046], "No": [18, 565, 1061], "appli": [18, 28, 31, 48, 54, 76, 116, 126, 129, 131, 159, 186, 197, 254, 268, 334, 335, 336, 340, 342, 343, 344, 346, 348, 350, 353, 356, 357, 360, 363, 367, 368, 370, 375, 376, 457, 459, 461, 489, 504, 506, 507, 509, 513, 549, 559, 560, 561, 564, 606, 607, 618, 628, 629, 630, 640, 655, 665, 705, 712, 713, 714, 722, 760, 772, 837, 838, 839, 843, 845, 846, 850, 852, 855, 857, 860, 863, 864, 867, 870, 874, 875, 877, 882, 883, 967, 995, 997, 998, 1000, 1004, 1045, 1055, 1056, 1057, 1060, 1099], "round": [18, 31, 71, 99, 268, 311, 386, 576, 665, 812, 892, 1099], "corner": [18, 31, 99, 268], "op": [18, 131, 268, 499, 665, 772, 1057, 1099], "one": [18, 28, 29, 31, 48, 59, 69, 84, 92, 94, 95, 96, 97, 98, 108, 112, 113, 130, 131, 132, 135, 155, 156, 163, 164, 165, 166, 168, 169, 180, 190, 198, 206, 207, 213, 229, 232, 248, 268, 276, 324, 382, 449, 454, 528, 540, 574, 611, 630, 645, 655, 661, 665, 695, 696, 699, 700, 701, 703, 704, 718, 732, 750, 754, 772, 781, 826, 889, 918, 959, 964, 985, 1036, 1064, 1099], "more": [18, 31, 34, 36, 50, 59, 69, 76, 91, 92, 93, 94, 95, 96, 97, 98, 105, 106, 107, 108, 112, 113, 114, 117, 129, 131, 135, 145, 146, 180, 184, 186, 190, 194, 206, 207, 209, 229, 235, 254, 268, 279, 282, 298, 312, 313, 314, 411, 451, 454, 459, 461, 486, 516, 526, 540, 559, 560, 561, 581, 645, 655, 665, 718, 743, 772, 775, 782, 797, 809, 815, 816, 817, 827, 918, 922, 961, 967, 1007, 1022, 1036, 1055, 1056, 1057, 1084, 1099, 1107], "semigraph": 18, "box": [18, 186, 268], "draw": [18, 23, 24, 128, 1107], "found": [18, 28, 31, 48, 56, 79, 88, 90, 95, 99, 150, 238, 268, 517, 543, 559, 561, 665, 745, 772, 1008, 1039, 1055, 1057, 1099, 1106], "unicod": 18, "block": [18, 164, 167, 235, 268, 655, 699, 702, 726, 743, 751, 760, 772, 1010, 1011, 1099], "http": [18, 31, 32, 33, 93, 105, 106, 137, 145, 268, 539, 541, 772, 1035, 1037], "en": [18, 31, 268], "wikipedia": 18, "org": [18, 32, 33, 93, 105, 106, 137, 145, 268, 772], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 268], "etc": [19, 30, 31, 103, 107, 109, 111, 114, 117, 118, 120, 268, 775, 1010, 1011, 1099], "separ": [22, 28, 48, 101, 103, 104, 116, 196, 198, 227, 234, 236, 268, 282, 426, 431, 461, 538, 602, 606, 607, 665, 744, 772, 936, 941, 1034, 1068, 1076, 1099], "between": [22, 76, 126, 127, 129, 131, 145, 200, 260, 268, 307, 327, 397, 424, 430, 431, 438, 439, 440, 441, 446, 450, 488, 493, 494, 510, 532, 595, 596, 603, 605, 639, 642, 643, 665, 724, 766, 772, 804, 809, 829, 901, 934, 940, 941, 948, 949, 950, 951, 956, 960, 981, 985, 986, 1001, 1028, 1099], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 36, 50, 54, 133, 146, 155, 164, 165, 166, 198, 268, 312, 313, 319, 382, 449, 487, 496, 506, 518, 556, 632, 645, 665, 695, 699, 700, 701, 772, 815, 816, 821, 827, 889, 959, 987, 997, 1012, 1052, 1099], "both": [23, 28, 48, 60, 165, 166, 168, 169, 182, 183, 191, 206, 268, 281, 324, 377, 397, 493, 506, 507, 508, 509, 510, 512, 513, 514, 611, 612, 652, 653, 661, 665, 675, 700, 701, 703, 704, 708, 709, 719, 772, 901, 910, 1099], "tbl_row": 23, "char": [24, 60, 77, 540, 547, 1036, 1043], "enabl": [25, 77, 124, 125, 134, 211, 243, 268, 278, 280, 518, 584, 661, 665, 729, 748, 772, 779, 780, 1012, 1087, 1099], "addit": [25, 30, 31, 95, 107, 108, 117, 127, 147, 149, 152, 164, 167, 196, 211, 212, 213, 219, 236, 243, 244, 247, 268, 275, 338, 377, 380, 487, 529, 533, 539, 540, 549, 597, 600, 601, 602, 616, 644, 647, 661, 665, 688, 692, 699, 702, 729, 730, 732, 737, 744, 748, 749, 753, 772, 833, 841, 887, 1029, 1035, 1036, 1045, 1099], "verbos": [25, 135, 540, 1036], "debug": [25, 685, 693, 713, 714, 772, 1107], "log": [25, 71, 305, 371, 454, 478, 490, 579, 665, 803, 879, 1083, 1099], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 36, 57, 70, 72, 74, 92, 94, 95, 96, 97, 98, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 129, 158, 180, 196, 202, 206, 207, 208, 210, 225, 226, 234, 268, 460, 503, 665, 726, 728, 772, 966, 1099], "show": [26, 31, 58, 149, 163, 184, 195, 268, 689, 723, 735, 772], "variabl": [26, 51, 56, 130, 133, 190, 227, 268, 718, 772, 1076, 1099, 1106], "chang": [26, 69, 103, 104, 121, 237, 238, 239, 268, 282, 323, 324, 326, 359, 461, 488, 493, 506, 507, 508, 509, 510, 512, 513, 514, 665, 745, 772, 781, 809, 810, 825, 826, 866, 897, 981, 985, 1017, 1099], "restrict": [26, 556, 611, 612, 1052], "dictionari": [26, 31, 92, 94, 95, 96, 98, 103, 104, 105, 106, 110, 112, 113, 115, 116, 180, 196, 206, 207, 208, 225, 226, 268, 460, 665, 772, 966, 1099], "those": [26, 31, 103, 208, 268, 496, 539, 630, 665, 775, 987, 1035, 1099], "been": [26, 31, 137, 138, 140, 249, 268, 282, 306, 405, 424, 430, 446, 450, 457, 461, 496, 504, 506, 507, 508, 509, 510, 512, 513, 514, 592, 628, 665, 680, 702, 703, 704, 713, 725, 752, 755, 772, 782, 934, 940, 956, 960, 987, 995, 1099], "set_fmt_float": 26, "directli": [26, 56, 105, 129, 131, 135, 208, 268, 374, 375, 376, 641, 665, 772, 881, 882, 883, 1099, 1107], "via": [26, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 180, 207, 268, 282, 461, 541, 665, 687, 725, 772, 1037], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 33, 102, 103, 108, 109, 110, 111, 114, 115, 268], "bytesio": [27, 28, 31, 32, 33, 36, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 268, 687, 725, 772], "compress": [27, 32, 33, 36, 49, 50, 268, 772], "avrocompress": [27, 268], "uncompress": [27, 32, 33, 36, 50, 109, 118, 268, 772], "write": [27, 28, 29, 30, 31, 32, 33, 34, 36, 48, 50, 104, 109, 135, 268, 312, 313, 314, 474, 665, 711, 735, 772, 815, 816, 817, 1099], "apach": [27, 32, 33, 36, 102, 105, 106, 268], "avro": [27, 102, 268, 676], "should": [27, 28, 29, 31, 32, 33, 34, 35, 36, 48, 49, 50, 76, 92, 94, 96, 98, 107, 112, 113, 114, 116, 120, 126, 127, 131, 141, 147, 165, 166, 180, 183, 186, 206, 207, 208, 226, 227, 233, 236, 239, 254, 268, 276, 309, 323, 355, 359, 366, 369, 377, 404, 406, 425, 461, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 517, 526, 584, 614, 616, 623, 627, 630, 642, 643, 655, 661, 665, 681, 688, 700, 701, 708, 709, 714, 731, 735, 737, 742, 744, 752, 772, 775, 808, 825, 862, 866, 873, 876, 935, 967, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1022, 1087, 1099], "snappi": [27, 36, 50, 268, 772], "deflat": [27, 268], "import": [27, 28, 30, 31, 32, 33, 36, 39, 69, 92, 93, 96, 97, 116, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 146, 147, 149, 163, 165, 181, 183, 196, 198, 227, 229, 230, 237, 239, 268, 325, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 505, 506, 507, 509, 512, 513, 514, 595, 596, 611, 612, 614, 652, 653, 661, 665, 676, 687, 688, 689, 700, 709, 714, 718, 731, 772, 819, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 905, 909, 912, 913, 918, 996, 1020, 1073, 1099, 1107], "pathlib": [27, 28, 32, 33, 36, 116, 268], "foo": [27, 28, 30, 32, 33, 34, 35, 36, 58, 144, 145, 147, 148, 149, 150, 153, 156, 157, 159, 160, 161, 162, 170, 171, 172, 173, 174, 175, 177, 182, 186, 187, 188, 189, 192, 195, 198, 200, 202, 203, 204, 206, 209, 210, 211, 214, 215, 216, 218, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 234, 235, 236, 240, 241, 242, 246, 268, 308, 312, 313, 314, 324, 355, 393, 395, 415, 421, 427, 428, 432, 433, 465, 468, 469, 470, 471, 472, 473, 493, 500, 519, 520, 532, 534, 536, 538, 540, 541, 546, 552, 554, 556, 558, 563, 566, 573, 575, 593, 599, 603, 604, 605, 617, 621, 622, 626, 631, 633, 634, 635, 637, 639, 644, 646, 650, 654, 655, 661, 665, 686, 688, 689, 690, 696, 706, 707, 708, 721, 726, 728, 729, 743, 744, 747, 750, 772, 775, 806, 815, 826, 862, 941, 985, 991, 1030, 1032, 1034, 1036, 1037, 1052, 1059, 1062, 1099], "bar": [27, 28, 30, 32, 33, 34, 35, 36, 58, 144, 145, 147, 148, 149, 150, 153, 156, 157, 159, 160, 161, 162, 171, 173, 174, 175, 177, 182, 186, 187, 188, 189, 192, 195, 198, 200, 202, 203, 204, 206, 209, 210, 211, 215, 216, 218, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 235, 236, 240, 241, 246, 268, 308, 395, 433, 465, 466, 467, 468, 469, 470, 471, 472, 473, 526, 534, 536, 538, 540, 541, 554, 556, 593, 599, 603, 604, 605, 617, 622, 626, 631, 633, 634, 635, 637, 644, 646, 650, 654, 655, 661, 665, 686, 688, 689, 690, 696, 706, 707, 708, 721, 726, 728, 729, 743, 744, 747, 772, 775, 806, 941, 1022, 1030, 1032, 1034, 1036, 1037, 1052, 1099], "ham": [27, 28, 30, 32, 33, 36, 144, 145, 147, 148, 149, 150, 156, 157, 160, 170, 171, 173, 182, 187, 188, 189, 192, 195, 200, 202, 204, 206, 209, 210, 211, 215, 216, 218, 220, 221, 222, 227, 228, 229, 230, 231, 235, 240, 241, 268, 308, 472, 661, 686, 688, 689, 690, 696, 708, 721, 726, 728, 729, 743, 750, 772, 806], "d": [27, 28, 30, 31, 32, 33, 36, 60, 77, 95, 121, 146, 163, 165, 170, 171, 174, 182, 222, 224, 237, 241, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 268, 275, 277, 339, 362, 365, 397, 489, 521, 534, 540, 555, 559, 560, 561, 600, 614, 620, 665, 700, 708, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 772, 809, 842, 869, 872, 901, 1030, 1036, 1051, 1055, 1056, 1057, 1099], "e": [27, 28, 30, 32, 33, 36, 60, 77, 93, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 118, 120, 146, 163, 165, 166, 171, 183, 222, 224, 229, 237, 239, 268, 275, 282, 355, 359, 366, 371, 377, 397, 452, 460, 461, 466, 467, 469, 470, 471, 472, 473, 506, 507, 508, 509, 510, 512, 513, 514, 521, 526, 616, 630, 655, 665, 687, 700, 701, 709, 711, 725, 726, 772, 775, 862, 866, 873, 879, 901, 1009, 1022, 1080, 1099, 1107], "dirpath": [27, 28, 32, 33, 36, 116, 268], "new_fil": [27, 28, 32, 33, 36, 268], "has_head": [28, 31, 48, 103, 104, 108, 116, 268, 772], "line_termin": [28, 48, 268, 772], "quot": [28, 29, 48, 103, 104, 116, 268, 772], "batch_siz": [28, 48, 103, 104, 105, 119, 121, 268, 772], "1024": [28, 48, 50, 103, 104, 119, 268, 772], "datetime_format": [28, 48, 268, 772], "date_format": [28, 48, 268, 772], "time_format": [28, 48, 268, 772], "float_precis": [28, 31, 48, 268, 772], "null_valu": [28, 48, 103, 104, 116, 268, 772], "quote_styl": [28, 48, 268, 772], "csvquotestyl": [28, 48, 268, 772], "textiowrapp": [28, 268], "comma": [28, 268], "csv": [28, 48, 49, 50, 103, 104, 108, 116, 268, 676, 772], "result": [28, 34, 35, 48, 49, 50, 69, 76, 96, 98, 105, 106, 107, 116, 118, 120, 121, 131, 153, 165, 166, 168, 182, 194, 208, 216, 230, 239, 247, 268, 362, 365, 374, 375, 376, 380, 411, 449, 459, 461, 487, 493, 500, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 518, 520, 554, 555, 561, 580, 606, 607, 611, 612, 613, 629, 638, 641, 642, 643, 656, 665, 682, 700, 701, 703, 704, 708, 713, 714, 723, 731, 734, 752, 753, 772, 781, 826, 869, 872, 881, 882, 883, 886, 922, 967, 985, 991, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1012, 1015, 1050, 1051, 1057, 1080, 1099, 1106, 1107], "If": [28, 29, 30, 31, 32, 33, 34, 35, 36, 48, 50, 54, 60, 74, 76, 92, 93, 94, 95, 96, 97, 98, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 130, 137, 138, 141, 149, 153, 163, 165, 166, 168, 169, 171, 179, 180, 183, 185, 186, 190, 194, 207, 208, 209, 218, 222, 226, 227, 229, 233, 234, 235, 237, 238, 268, 278, 280, 282, 312, 313, 314, 332, 351, 352, 366, 383, 411, 443, 449, 459, 460, 461, 472, 487, 493, 496, 498, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 522, 526, 527, 540, 541, 542, 544, 546, 547, 552, 553, 554, 555, 556, 558, 559, 560, 561, 564, 584, 588, 590, 592, 594, 598, 603, 604, 606, 611, 612, 614, 618, 624, 625, 627, 630, 638, 641, 642, 643, 647, 652, 653, 655, 656, 665, 681, 689, 691, 700, 701, 703, 704, 708, 709, 714, 718, 726, 731, 736, 742, 743, 745, 752, 755, 760, 772, 775, 779, 780, 781, 782, 815, 816, 817, 826, 835, 858, 859, 873, 886, 894, 896, 897, 921, 922, 924, 953, 959, 967, 985, 987, 989, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1012, 1018, 1022, 1023, 1036, 1037, 1038, 1040, 1042, 1043, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1060, 1070, 1075, 1080, 1087, 1089, 1099, 1106], "instead": [28, 34, 35, 54, 58, 69, 76, 103, 104, 105, 108, 114, 116, 120, 129, 163, 165, 166, 180, 183, 186, 194, 196, 206, 207, 208, 211, 212, 230, 239, 243, 244, 268, 292, 324, 355, 358, 359, 366, 377, 459, 493, 506, 507, 508, 509, 510, 512, 513, 514, 544, 546, 552, 558, 559, 561, 594, 598, 599, 611, 612, 613, 614, 624, 625, 638, 641, 647, 652, 653, 656, 665, 694, 700, 701, 709, 729, 730, 731, 748, 749, 752, 772, 775, 791, 826, 862, 865, 866, 873, 985, 1010, 1011, 1040, 1042, 1048, 1054, 1055, 1057, 1081, 1099, 1106], "whether": [28, 48, 96, 98, 131, 141, 213, 233, 268, 278, 280, 342, 360, 416, 417, 466, 467, 518, 665, 681, 713, 714, 732, 737, 742, 772, 775, 779, 780, 807, 810, 845, 867, 926, 927, 1099, 1106], "header": [28, 31, 36, 48, 50, 99, 103, 104, 108, 116, 150, 198, 234, 268, 772], "field": [28, 30, 48, 61, 88, 90, 95, 229, 236, 268, 449, 460, 502, 540, 541, 542, 555, 556, 569, 606, 607, 629, 647, 665, 744, 772, 826, 959, 985, 993, 1037, 1049, 1051, 1052, 1066, 1068, 1099], "symbol": [28, 48, 268, 772], "end": [28, 31, 48, 103, 104, 114, 116, 165, 268, 300, 303, 304, 330, 359, 377, 397, 443, 533, 537, 540, 553, 557, 594, 611, 612, 616, 624, 625, 652, 653, 655, 661, 665, 700, 705, 712, 723, 772, 775, 801, 833, 866, 901, 953, 1033, 1036, 1049, 1053, 1099], "each": [28, 31, 48, 69, 104, 105, 119, 124, 125, 127, 163, 164, 165, 166, 167, 168, 169, 181, 183, 186, 196, 230, 236, 239, 246, 247, 250, 252, 254, 262, 268, 324, 359, 366, 429, 447, 454, 461, 493, 496, 503, 508, 510, 512, 514, 516, 522, 529, 540, 555, 556, 594, 597, 602, 611, 624, 625, 647, 655, 665, 700, 701, 703, 704, 709, 723, 744, 753, 755, 756, 758, 760, 768, 772, 813, 826, 866, 873, 939, 957, 985, 987, 994, 1036, 1051, 1052, 1068, 1099, 1107], "byte": [28, 48, 50, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 151, 268, 300, 303, 304, 544, 547, 772, 798, 801, 802, 880, 1040, 1043, 1099], "specifi": [28, 31, 48, 69, 79, 88, 90, 108, 129, 141, 147, 151, 152, 155, 164, 165, 166, 167, 168, 169, 182, 196, 206, 208, 211, 212, 213, 219, 233, 236, 243, 244, 247, 268, 374, 375, 376, 377, 382, 460, 487, 499, 506, 507, 508, 509, 510, 512, 513, 514, 529, 545, 551, 597, 600, 601, 602, 611, 612, 616, 644, 647, 652, 653, 661, 665, 681, 688, 692, 695, 699, 700, 701, 702, 703, 704, 708, 729, 730, 732, 737, 742, 744, 748, 749, 753, 772, 880, 881, 882, 883, 889, 1041, 1047, 1099], "defin": [28, 31, 39, 48, 105, 108, 126, 127, 129, 138, 149, 152, 165, 166, 168, 169, 186, 194, 197, 249, 254, 268, 282, 397, 448, 461, 489, 493, 503, 506, 507, 508, 509, 510, 512, 513, 514, 592, 611, 612, 627, 630, 647, 652, 653, 665, 689, 692, 700, 701, 703, 704, 722, 755, 760, 772, 775, 782, 901, 958, 967, 985, 994, 1099], "chrono": [28, 48, 268, 362, 365, 559, 560, 561, 564, 772, 869, 872, 1055, 1056, 1057, 1060], "rust": [28, 36, 48, 85, 105, 109, 111, 114, 186, 254, 268, 541, 772, 967, 1037, 1099], "crate": [28, 48, 268, 533, 534, 539, 540, 541, 549, 550, 559, 560, 561, 564, 772, 775, 1029, 1030, 1035, 1036, 1037, 1045, 1046, 1055, 1056, 1057, 1060], "fraction": [28, 48, 124, 125, 209, 268, 360, 488, 516, 559, 561, 665, 772, 867, 981, 1007, 1055, 1057, 1099], "second": [28, 48, 128, 165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 559, 561, 613, 614, 651, 655, 665, 700, 701, 709, 772, 775, 862, 866, 873, 1055, 1057, 1107], "precis": [28, 30, 31, 39, 40, 48, 105, 180, 207, 208, 226, 268, 331, 562, 772, 775, 834, 1058], "infer": [28, 48, 92, 94, 95, 96, 97, 98, 103, 104, 105, 108, 112, 113, 116, 119, 138, 186, 268, 500, 542, 559, 560, 561, 562, 564, 641, 665, 772, 991, 1038, 1055, 1056, 1057, 1058, 1060, 1099], "maximum": [28, 48, 103, 104, 116, 121, 127, 128, 129, 131, 163, 187, 268, 418, 462, 480, 496, 631, 632, 665, 715, 772, 815, 847, 928, 968, 976, 982, 987, 1099], "timeunit": [28, 39, 41, 48, 268, 331, 332, 364, 369, 561, 611, 612, 613, 772, 775, 834, 835, 871, 876, 1057], "frame": [28, 29, 31, 48, 54, 55, 56, 57, 58, 59, 69, 76, 95, 104, 108, 124, 129, 142, 180, 181, 186, 191, 194, 197, 206, 207, 208, 230, 237, 268, 683, 719, 722, 772, 775, 814, 1099, 1106, 1107], "datetim": [28, 30, 31, 48, 69, 99, 129, 146, 163, 165, 166, 168, 169, 181, 183, 239, 268, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 421, 506, 507, 508, 509, 510, 512, 513, 514, 559, 561, 578, 611, 612, 614, 620, 627, 652, 653, 665, 700, 701, 703, 704, 709, 772, 775, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 918, 931, 932, 976, 977, 1011, 1055, 1057, 1082, 1099], "place": [28, 48, 141, 148, 153, 173, 174, 198, 203, 208, 215, 216, 219, 233, 241, 268, 292, 431, 442, 519, 520, 528, 665, 681, 733, 734, 737, 742, 772, 781, 791, 886, 941, 952, 988, 1014, 1015, 1024, 1099], "float64": [28, 31, 48, 95, 103, 129, 150, 151, 159, 210, 230, 243, 268, 284, 285, 286, 287, 288, 289, 307, 315, 316, 325, 360, 377, 404, 406, 495, 524, 525, 576, 577, 616, 638, 641, 656, 661, 665, 690, 728, 748, 772, 775, 867, 1081, 1086, 1099], "repres": [28, 31, 48, 52, 67, 92, 94, 96, 97, 98, 220, 240, 246, 268, 404, 406, 459, 531, 585, 588, 603, 614, 616, 627, 629, 630, 642, 643, 646, 654, 661, 665, 738, 746, 772, 1011, 1026, 1088, 1099], "empti": [28, 48, 83, 95, 103, 104, 108, 116, 142, 143, 165, 177, 190, 268, 627, 644, 683, 684, 700, 718, 772, 775, 814, 818, 904, 1099], "necessari": [28, 48, 268, 772], "alwai": [28, 30, 48, 54, 103, 128, 164, 167, 186, 254, 268, 469, 559, 611, 655, 714, 772, 781, 967, 1055, 1099, 1106, 1107], "non_numer": [28, 48, 268, 772], "strategi": [28, 48, 69, 76, 103, 126, 127, 128, 129, 131, 155, 165, 168, 182, 183, 193, 268, 282, 382, 449, 461, 665, 695, 700, 703, 708, 709, 772, 889, 959, 1099], "put": [28, 48, 268, 772], "around": [28, 48, 268, 772], "thei": [28, 30, 31, 48, 95, 116, 124, 135, 184, 208, 268, 772, 775], "delimit": [28, 35, 48, 103, 104, 113, 116, 119, 198, 227, 268, 532, 772, 1028, 1076, 1099], "record": [28, 33, 48, 111, 121, 183, 229, 268, 709, 772], "termin": [28, 48, 268, 772], "also": [28, 31, 48, 59, 95, 108, 116, 127, 128, 129, 130, 131, 135, 150, 164, 165, 166, 168, 169, 191, 194, 207, 211, 219, 243, 268, 319, 322, 355, 358, 397, 461, 496, 506, 507, 508, 509, 510, 512, 513, 514, 529, 552, 558, 606, 607, 611, 618, 620, 640, 655, 664, 665, 670, 699, 700, 701, 703, 704, 719, 729, 737, 748, 750, 772, 775, 865, 901, 987, 1030, 1054, 1099], "indistinguish": [28, 48, 268, 772], "numer": [28, 31, 48, 147, 183, 198, 237, 268, 275, 312, 313, 314, 387, 397, 454, 476, 478, 490, 499, 521, 541, 570, 580, 665, 676, 688, 709, 718, 772, 775, 815, 816, 817, 827, 901, 916, 1009, 1016, 1037, 1080, 1099, 1107], "doe": [28, 30, 48, 69, 76, 86, 92, 94, 95, 96, 98, 99, 103, 104, 105, 107, 108, 112, 113, 116, 117, 121, 124, 125, 153, 181, 182, 206, 207, 208, 235, 243, 268, 306, 369, 449, 460, 582, 611, 617, 626, 661, 665, 693, 708, 714, 743, 748, 772, 781, 876, 886, 894, 966, 1017, 1089, 1099], "pars": [28, 48, 54, 103, 104, 108, 113, 116, 118, 119, 141, 164, 167, 211, 212, 219, 233, 243, 244, 247, 268, 397, 460, 487, 529, 542, 548, 562, 589, 591, 597, 600, 601, 602, 609, 620, 632, 636, 644, 645, 647, 649, 655, 665, 681, 699, 702, 729, 730, 737, 742, 748, 749, 753, 772, 901, 1038, 1044, 1057, 1058, 1099], "valid": [28, 31, 39, 48, 54, 109, 111, 114, 131, 135, 151, 182, 268, 323, 533, 534, 539, 540, 541, 543, 549, 550, 611, 612, 655, 665, 708, 772, 775, 825, 880, 894, 1029, 1030, 1035, 1036, 1037, 1039, 1045, 1046, 1099], "integ": [28, 30, 31, 44, 45, 46, 47, 48, 63, 64, 65, 66, 122, 127, 129, 130, 132, 149, 165, 166, 227, 268, 279, 311, 360, 386, 387, 486, 493, 498, 506, 507, 508, 509, 510, 511, 512, 513, 514, 548, 587, 594, 620, 624, 625, 641, 665, 689, 700, 701, 772, 775, 812, 867, 892, 910, 985, 989, 1002, 1011, 1044, 1099, 1106, 1107], "even": [28, 48, 103, 268, 489, 493, 665, 772, 985, 1099], "aren": [28, 48, 268, 772], "t": [28, 48, 56, 57, 76, 103, 108, 116, 165, 186, 197, 235, 237, 268, 282, 323, 330, 338, 358, 371, 374, 375, 376, 425, 461, 487, 489, 539, 546, 559, 561, 655, 665, 700, 722, 743, 772, 775, 825, 865, 879, 881, 882, 883, 935, 967, 1009, 1035, 1042, 1048, 1055, 1057, 1080, 1089, 1099], "strictli": [28, 48, 268, 772], "table_nam": [29, 31, 268], "connect": [29, 103, 105, 106, 109, 111, 114, 118, 120, 121, 268, 677], "if_exist": [29, 268], "dbwritemod": [29, 268], "fail": [29, 30, 93, 107, 109, 113, 117, 137, 235, 268, 293, 363, 449, 559, 560, 561, 564, 665, 743, 772, 967, 1055, 1056, 1057, 1060, 1099], "dbwriteengin": [29, 268], "sqlalchemi": [29, 105, 268], "databas": [29, 105, 106, 268, 676], "creat": [29, 31, 92, 96, 98, 105, 106, 117, 127, 128, 129, 130, 131, 132, 142, 143, 165, 166, 169, 195, 198, 239, 243, 268, 332, 359, 366, 449, 497, 506, 507, 509, 512, 513, 514, 553, 601, 610, 611, 612, 613, 614, 651, 652, 653, 661, 665, 683, 684, 691, 700, 701, 704, 748, 772, 814, 818, 826, 835, 866, 873, 978, 985, 988, 1049, 1080, 1099, 1106, 1107], "append": [29, 30, 129, 153, 182, 183, 268, 497, 611, 612, 655, 665, 708, 709, 772, 886, 1099], "your": [29, 31, 69, 103, 104, 105, 124, 125, 180, 186, 207, 208, 211, 226, 243, 247, 254, 268, 282, 461, 541, 559, 560, 561, 630, 665, 685, 705, 712, 714, 729, 748, 753, 760, 772, 967, 1037, 1055, 1056, 1057, 1099, 1107], "special": [29, 103, 104, 116, 268, 505, 540, 665, 782, 967, 996, 1036, 1099], "uri": [29, 30, 105, 106, 107, 117, 268], "postgresql": [29, 106, 268, 487, 665], "user": [29, 105, 106, 138, 186, 197, 249, 254, 268, 282, 459, 461, 489, 518, 592, 611, 630, 665, 722, 755, 760, 772, 782, 967, 1012, 1099], "pass": [29, 30, 31, 36, 57, 69, 94, 105, 106, 108, 116, 121, 127, 129, 131, 141, 145, 147, 164, 165, 166, 168, 171, 185, 196, 197, 211, 219, 222, 233, 239, 243, 247, 268, 282, 339, 355, 358, 380, 395, 461, 487, 489, 506, 507, 508, 509, 510, 512, 513, 514, 529, 546, 552, 558, 588, 597, 611, 620, 647, 655, 661, 665, 681, 688, 699, 700, 701, 703, 704, 706, 713, 714, 722, 729, 735, 737, 742, 748, 753, 760, 772, 782, 842, 865, 887, 896, 924, 967, 1042, 1048, 1054, 1070, 1099], "server": [29, 106, 268], "port": [29, 103, 106, 109, 111, 114, 118, 120, 268], "sqlite": [29, 105, 268], "db": [29, 106, 268], "replac": [29, 30, 103, 104, 116, 154, 155, 204, 234, 243, 244, 268, 332, 358, 460, 550, 665, 694, 748, 749, 772, 835, 865, 966, 1010, 1011, 1046, 1099], "insert": [29, 103, 104, 109, 111, 114, 116, 118, 119, 120, 174, 203, 234, 236, 268, 517, 532, 567, 665, 744, 772, 1008, 1028, 1063, 1099], "mode": [29, 30, 54, 268, 540, 638, 641, 656, 665, 772, 1036, 1099, 1106], "new": [29, 30, 31, 116, 135, 173, 174, 186, 194, 195, 202, 203, 223, 234, 236, 237, 243, 244, 268, 277, 332, 379, 396, 458, 549, 550, 555, 556, 568, 569, 575, 665, 676, 726, 741, 744, 748, 749, 755, 760, 772, 778, 835, 885, 978, 990, 1045, 1046, 1051, 1052, 1064, 1066, 1072, 1077, 1099, 1106], "alreadi": [29, 30, 268, 323, 425, 584, 665, 825, 935, 1087, 1099], "adbc": [29, 105, 106, 268], "deltalak": [30, 107, 117, 123, 268], "deltat": [30, 268], "ignor": [30, 105, 108, 128, 129, 131, 188, 221, 268, 278, 280, 326, 358, 374, 375, 376, 423, 480, 481, 588, 590, 665, 779, 780, 828, 865, 881, 882, 883, 933, 976, 977, 1099], "overwrite_schema": [30, 268], "storage_opt": [30, 103, 107, 109, 111, 114, 117, 118, 120, 268], "delta_write_opt": [30, 268], "delta": [30, 41, 107, 117, 220, 240, 268, 512, 514, 531, 585, 603, 642, 643, 646, 654, 665, 676, 738, 746, 772, 1003, 1005, 1026, 1088, 1099], "object": [30, 31, 32, 33, 59, 76, 93, 94, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 127, 129, 131, 137, 164, 165, 166, 167, 168, 183, 184, 208, 229, 230, 268, 611, 612, 627, 652, 653, 676, 687, 700, 701, 703, 704, 709, 725, 772, 775, 805, 832, 925, 1027, 1075, 1099], "handl": [30, 76, 99, 103, 104, 116, 121, 268, 326, 423, 567, 665, 828, 933, 1063, 1099], "throw": [30, 268, 307, 542, 543, 665, 772, 804, 1038, 1039, 1099], "add": [30, 31, 104, 153, 165, 168, 186, 243, 244, 245, 268, 324, 491, 493, 571, 614, 618, 655, 665, 700, 703, 708, 748, 749, 750, 751, 772, 781, 886, 1099], "anyth": [30, 206, 268], "updat": [30, 268, 772], "extra": [30, 36, 50, 103, 107, 108, 109, 111, 114, 117, 118, 120, 153, 165, 268, 700, 772, 781, 886, 1099], "storag": [30, 103, 107, 109, 111, 114, 117, 118, 120, 268], "backend": [30, 105, 106, 107, 117, 268], "cloud": [30, 105, 107, 117, 121, 268], "configur": [30, 107, 117, 135, 268], "authent": [30, 107, 117, 268], "see": [30, 31, 32, 33, 39, 105, 106, 107, 108, 117, 124, 125, 129, 131, 145, 182, 197, 268, 312, 313, 314, 382, 411, 459, 526, 533, 539, 540, 549, 611, 612, 640, 661, 665, 775, 809, 815, 816, 817, 922, 1022, 1029, 1035, 1036, 1045, 1099, 1107], "here": [30, 31, 36, 92, 94, 95, 96, 98, 106, 107, 112, 113, 117, 127, 129, 131, 268, 461, 541, 543, 665, 772, 1039], "gc": [30, 107, 117, 268], "azur": [30, 107, 117, 268], "keyword": [30, 57, 107, 114, 117, 145, 197, 206, 211, 212, 243, 244, 247, 268, 489, 644, 647, 665, 722, 729, 730, 748, 749, 753, 772, 1099], "argument": [30, 36, 103, 107, 114, 116, 117, 145, 147, 152, 164, 165, 166, 167, 168, 169, 188, 196, 197, 198, 211, 212, 213, 219, 221, 230, 236, 239, 243, 244, 247, 268, 359, 366, 377, 397, 487, 489, 506, 507, 508, 509, 510, 512, 513, 514, 529, 546, 552, 558, 588, 595, 596, 597, 600, 601, 602, 611, 616, 641, 644, 647, 652, 661, 665, 688, 692, 699, 700, 701, 702, 703, 704, 722, 729, 730, 732, 737, 744, 748, 749, 753, 772, 781, 866, 873, 901, 1042, 1048, 1054, 1081, 1099], "while": [30, 104, 107, 108, 117, 129, 131, 135, 180, 190, 234, 268, 718, 772], "lake": [30, 107, 117, 268, 676], "typeerror": [30, 268], "unsupport": [30, 268], "arrowinvaliderror": [30, 268], "could": [30, 67, 80, 165, 268, 307, 606, 614, 618, 665, 689, 700, 772, 804, 1099], "primit": [30, 268, 401, 665, 1080, 1099], "categor": [30, 60, 77, 93, 124, 125, 182, 227, 228, 268, 308, 309, 324, 460, 493, 578, 665, 775, 805, 806, 807, 808, 809, 810, 826, 985, 1082, 1099], "protocol": [30, 93, 106, 137, 268], "associ": [30, 31, 55, 57, 69, 106, 128, 208, 268], "affect": [30, 268], "follow": [30, 31, 36, 74, 103, 104, 107, 116, 117, 165, 166, 183, 186, 197, 239, 268, 355, 359, 366, 489, 496, 506, 507, 508, 509, 510, 511, 512, 513, 514, 569, 580, 611, 630, 655, 657, 658, 660, 665, 666, 667, 671, 672, 673, 700, 701, 709, 722, 772, 862, 866, 873, 987, 1010, 1011, 1091, 1093, 1095, 1099, 1100, 1103, 1104, 1105, 1107], "unsign": [30, 63, 64, 65, 66, 268, 498, 665, 775, 910, 989, 1099], "millisecond": [30, 165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 614, 665, 700, 701, 709, 772, 775, 862, 866, 873], "nanosecond": [30, 165, 166, 183, 239, 268, 355, 359, 360, 366, 506, 507, 508, 509, 510, 512, 513, 514, 614, 665, 700, 701, 709, 772, 862, 866, 867, 873], "zone": [30, 39, 268, 330, 333, 358, 561, 611, 612, 613, 775, 833, 836, 865, 1057], "binari": [30, 32, 268, 300, 302, 303, 304, 775, 798, 801, 802], "nullabl": [30, 268], "To": [30, 108, 154, 268, 328, 329, 382, 533, 539, 540, 549, 565, 665, 694, 772, 830, 831, 1029, 1035, 1036, 1045, 1061, 1080, 1099], "pyarrow": [30, 36, 92, 93, 97, 103, 106, 107, 109, 111, 114, 117, 121, 123, 224, 229, 230, 268, 677, 1075, 1079, 1080, 1081, 1099], "ha": [30, 31, 69, 105, 116, 137, 138, 140, 165, 166, 168, 169, 239, 249, 268, 282, 305, 306, 323, 405, 424, 430, 446, 450, 457, 470, 504, 506, 507, 508, 509, 510, 512, 513, 514, 579, 592, 628, 661, 665, 680, 700, 701, 702, 703, 704, 713, 725, 752, 755, 760, 772, 782, 803, 814, 825, 827, 894, 907, 934, 940, 956, 960, 995, 1083, 1099], "last": [30, 141, 171, 183, 185, 198, 208, 219, 222, 233, 235, 262, 268, 292, 323, 336, 351, 356, 367, 403, 410, 428, 447, 491, 528, 556, 571, 573, 611, 650, 665, 681, 709, 737, 740, 742, 743, 768, 772, 775, 791, 825, 839, 858, 863, 874, 896, 911, 924, 938, 957, 1052, 1070, 1099], "filesystem": [30, 107, 117, 268], "table_path": [30, 107, 117, 268], "match": [30, 31, 39, 76, 86, 92, 94, 95, 96, 98, 112, 113, 124, 125, 155, 183, 206, 268, 467, 511, 533, 534, 537, 539, 540, 542, 543, 549, 550, 557, 559, 560, 561, 661, 665, 695, 709, 772, 775, 910, 918, 1002, 1029, 1030, 1033, 1035, 1036, 1038, 1039, 1045, 1046, 1053, 1055, 1056, 1057, 1099], "version": [30, 74, 107, 117, 123, 137, 138, 140, 249, 268, 282, 306, 351, 352, 358, 366, 405, 424, 430, 446, 450, 457, 504, 559, 561, 592, 599, 611, 613, 628, 640, 641, 652, 665, 680, 698, 702, 703, 704, 713, 725, 752, 755, 772, 781, 782, 826, 858, 859, 865, 873, 934, 940, 956, 960, 985, 995, 1055, 1057, 1099], "old": [30, 202, 268, 726, 772], "existing_table_path": [30, 268], "store": [30, 103, 114, 153, 180, 207, 268, 308, 781, 806, 886, 1099], "like": [30, 93, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 176, 178, 182, 229, 268, 330, 425, 473, 496, 539, 584, 611, 612, 652, 653, 661, 665, 687, 693, 725, 772, 781, 833, 935, 987, 1035, 1087, 1099], "bucket": [30, 107, 117, 268, 359, 366, 866, 873, 897, 1099], "prefix": [30, 135, 268, 277, 304, 458, 557, 567, 571, 665, 775, 802, 1053, 1063], "aws_region": [30, 117, 268], "the_aws_region": [30, 268], "aws_access_key_id": [30, 107, 117, 268], "the_aws_access_key_id": [30, 107, 117, 268], "aws_secret_access_kei": [30, 107, 117, 268], "the_aws_secret_access_kei": [30, 107, 117, 268], "pa": [30, 92, 121, 268], "workbook": [31, 268], "worksheet": [31, 108, 268], "posit": [31, 147, 152, 164, 167, 196, 211, 212, 213, 219, 236, 243, 244, 247, 268, 374, 375, 376, 377, 487, 493, 529, 541, 548, 595, 596, 597, 600, 601, 602, 616, 644, 647, 661, 665, 688, 692, 699, 702, 729, 730, 732, 737, 744, 748, 749, 753, 772, 881, 882, 883, 985, 1037, 1044, 1099], "tupl": [31, 106, 108, 138, 180, 186, 206, 207, 208, 214, 246, 268, 500, 665, 723, 735, 772, 775, 991, 1099], "a1": [31, 70, 72, 268], "table_styl": [31, 268], "column_format": [31, 268], "columnformatdict": [31, 268], "dtype_format": [31, 268], "oneormoredatatyp": [31, 127, 268, 918, 1099], "conditional_format": [31, 268], "conditionalformatdict": [31, 268], "header_format": [31, 268], "column_tot": [31, 268], "columntotalsdefinit": [31, 268], "column_width": [31, 268], "columnwidthsdefinit": [31, 268], "row_tot": [31, 268], "rowtotalsdefinit": [31, 268], "row_height": [31, 268], "sparklin": [31, 268], "sequenc": [31, 61, 69, 75, 92, 94, 95, 96, 98, 103, 104, 108, 112, 113, 116, 127, 128, 129, 141, 146, 152, 153, 182, 183, 190, 194, 196, 197, 198, 208, 219, 227, 233, 237, 238, 239, 268, 324, 401, 449, 457, 459, 489, 493, 529, 569, 592, 597, 606, 607, 618, 620, 628, 629, 630, 640, 645, 665, 681, 692, 708, 709, 718, 722, 737, 742, 744, 745, 772, 781, 826, 827, 829, 886, 959, 985, 1011, 1066, 1099], "formula": [31, 268, 371, 665, 879, 1099], "autofilt": [31, 268], "autofit": [31, 268], "hidden_column": [31, 268], "hide_gridlin": [31, 268], "sheet_zoom": [31, 268], "freeze_pan": [31, 268], "excel": [31, 108, 268, 676], "open": [31, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 118, 120, 268, 687, 725, 772], "xlsxwriter": [31, 123, 268], "close": [31, 105, 165, 166, 168, 169, 268, 324, 397, 454, 493, 506, 507, 508, 509, 510, 512, 513, 514, 526, 611, 612, 652, 653, 665, 700, 701, 703, 704, 772, 826, 901, 985, 1022, 1099], "xlsx": [31, 108, 268], "work": [31, 40, 93, 104, 108, 203, 212, 244, 268, 278, 280, 282, 298, 311, 312, 313, 314, 377, 386, 425, 451, 461, 487, 503, 547, 581, 665, 730, 749, 772, 775, 779, 780, 797, 812, 815, 816, 817, 892, 935, 961, 1043, 1084, 1099], "directori": [31, 36, 114, 120, 268], "sheet1": [31, 268], "notat": [31, 268], "medium": [31, 268], "kei": [31, 69, 74, 76, 165, 180, 182, 183, 191, 196, 198, 202, 205, 207, 208, 268, 461, 647, 665, 700, 708, 709, 719, 726, 727, 772], "first_column": [31, 268], "last_column": [31, 268], "banded_column": [31, 268], "banded_row": [31, 268], "sheet": [31, 108, 268], "chart": [31, 268, 723, 772], "subsequ": [31, 59, 201, 230, 268, 449, 655, 691, 772], "colnam": [31, 116, 129, 150, 268, 690, 772], "given": [31, 54, 55, 69, 92, 94, 95, 96, 98, 103, 104, 105, 106, 108, 112, 113, 116, 126, 127, 129, 130, 131, 132, 138, 141, 151, 152, 154, 165, 166, 168, 169, 179, 186, 196, 197, 206, 208, 215, 216, 219, 233, 238, 268, 330, 333, 362, 364, 365, 371, 397, 421, 442, 449, 452, 461, 487, 489, 496, 499, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 519, 520, 540, 541, 559, 561, 569, 592, 616, 628, 629, 630, 641, 642, 643, 665, 681, 692, 700, 701, 703, 704, 713, 714, 722, 733, 734, 737, 742, 745, 755, 760, 772, 775, 782, 833, 836, 869, 871, 872, 879, 880, 897, 901, 921, 931, 952, 959, 962, 965, 967, 978, 987, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1014, 1015, 1036, 1037, 1055, 1057, 1086, 1090, 1099, 1106, 1107], "dd": [31, 268], "mm": [31, 268], "yyyi": [31, 268], "00": [31, 129, 165, 183, 239, 268, 330, 331, 333, 337, 338, 340, 341, 344, 345, 347, 348, 349, 351, 352, 354, 355, 358, 359, 360, 361, 362, 365, 366, 369, 506, 507, 509, 512, 513, 514, 559, 561, 564, 614, 652, 653, 665, 700, 709, 772, 775, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 849, 850, 851, 853, 855, 856, 858, 859, 860, 861, 862, 865, 866, 868, 870, 871, 873, 876, 1055, 1057, 1060], "overridden": [31, 92, 94, 96, 98, 112, 113, 133, 268, 772], "basi": [31, 129, 268], "param": [31, 92, 94, 95, 96, 98, 103, 104, 112, 113, 116, 128, 129, 131, 206, 268, 772], "It": [31, 191, 197, 254, 268, 306, 469, 503, 611, 612, 661, 665, 713, 714, 719, 760, 772, 1010, 1011, 1099], "group": [31, 36, 50, 54, 104, 164, 165, 166, 167, 168, 169, 181, 194, 196, 198, 208, 237, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 276, 323, 379, 385, 425, 461, 469, 471, 487, 496, 503, 528, 529, 533, 539, 540, 541, 549, 574, 584, 630, 665, 699, 700, 701, 702, 703, 704, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 775, 825, 935, 994, 1029, 1035, 1036, 1037, 1045, 1087, 1099], "float_dtyp": [31, 268], "simplifi": [31, 48, 49, 50, 75, 268, 685, 691, 693, 723, 735, 772], "uniform": [31, 268, 493, 665, 985, 1099], "condit": [31, 149, 156, 206, 268, 537, 557, 598, 618, 655, 689, 696, 772], "suppli": [31, 92, 94, 95, 96, 98, 105, 112, 113, 206, 268, 489, 665, 772], "typenam": [31, 268], "3_color_scal": [31, 268], "data_bar": [31, 268], "make": [31, 61, 76, 92, 97, 103, 104, 108, 109, 111, 114, 118, 120, 191, 194, 201, 239, 268, 375, 376, 460, 487, 499, 555, 567, 665, 719, 772, 882, 883, 897, 966, 1051, 1063, 1099, 1107], "icon": [31, 268], "multipl": [31, 57, 75, 76, 103, 104, 116, 118, 119, 120, 127, 131, 141, 147, 151, 153, 156, 164, 165, 173, 181, 196, 198, 208, 211, 213, 219, 233, 243, 247, 268, 448, 466, 470, 477, 478, 487, 500, 503, 506, 507, 508, 509, 510, 512, 513, 514, 529, 597, 606, 607, 618, 628, 629, 631, 635, 640, 645, 648, 655, 661, 665, 681, 688, 696, 699, 700, 729, 732, 737, 742, 748, 753, 760, 772, 781, 880, 886, 958, 972, 991, 1099], "singl": [31, 55, 69, 76, 103, 104, 106, 114, 116, 127, 147, 148, 149, 153, 161, 179, 182, 186, 196, 206, 208, 219, 268, 282, 355, 383, 422, 448, 459, 461, 497, 500, 529, 532, 586, 592, 597, 601, 602, 625, 629, 630, 645, 653, 661, 665, 688, 689, 708, 737, 772, 781, 862, 886, 932, 958, 988, 991, 1028, 1075, 1099], "across": [31, 69, 268, 589, 591, 609, 632, 636, 649], "effect": [31, 159, 165, 168, 229, 268, 338, 461, 611, 612, 665, 700, 703, 751, 772, 833, 841], "heatmap": [31, 268], "min": [31, 36, 50, 146, 155, 165, 166, 198, 268, 312, 314, 320, 382, 487, 496, 509, 636, 644, 665, 695, 700, 701, 772, 815, 817, 822, 827, 889, 987, 1000, 1099, 1107], "entir": [31, 268], "final": [31, 69, 120, 268, 374, 375, 376, 665, 693, 772, 881, 882, 883, 1099], "made": [31, 268, 1080, 1099], "up": [31, 61, 106, 180, 183, 207, 208, 226, 268, 282, 311, 461, 567, 665, 708, 709, 714, 772, 775, 812, 1063, 1099], "abov": [31, 268, 655], "order": [31, 48, 49, 50, 54, 56, 69, 75, 95, 105, 122, 124, 141, 149, 156, 164, 165, 166, 167, 168, 169, 182, 196, 197, 198, 209, 213, 219, 229, 233, 235, 239, 268, 292, 298, 309, 328, 329, 383, 444, 451, 496, 516, 517, 518, 528, 529, 569, 581, 582, 584, 597, 665, 675, 681, 689, 696, 699, 700, 701, 702, 703, 704, 708, 718, 732, 737, 742, 743, 772, 791, 797, 808, 810, 830, 831, 890, 917, 954, 961, 987, 992, 1007, 1008, 1012, 1024, 1066, 1084, 1085, 1087, 1099, 1107], "than": [31, 48, 49, 50, 91, 96, 98, 103, 104, 105, 108, 116, 121, 129, 131, 142, 164, 167, 180, 183, 186, 196, 206, 207, 209, 237, 254, 268, 390, 391, 413, 456, 461, 472, 493, 503, 516, 526, 545, 551, 556, 567, 603, 611, 630, 665, 699, 702, 709, 760, 772, 967, 985, 994, 1007, 1022, 1041, 1047, 1052, 1063, 1099, 1107], "bold": [31, 268], "font_color": [31, 268], "702963": [31, 268], "total": [31, 151, 268, 880, 1099], "export": [31, 180, 181, 207, 208, 226, 229, 268, 661], "sum": [31, 54, 151, 159, 164, 165, 166, 179, 198, 247, 268, 321, 322, 371, 383, 449, 461, 469, 471, 472, 473, 506, 509, 513, 586, 588, 606, 608, 609, 618, 630, 640, 649, 665, 685, 687, 691, 693, 699, 700, 701, 721, 723, 731, 735, 753, 772, 775, 823, 824, 879, 880, 997, 998, 1000, 1003, 1004, 1005, 1099], "must": [31, 93, 94, 107, 117, 121, 146, 152, 165, 166, 168, 169, 183, 191, 206, 268, 324, 449, 459, 493, 506, 507, 508, 509, 510, 512, 513, 514, 655, 665, 692, 700, 701, 703, 704, 709, 713, 714, 719, 772, 826, 827, 985, 1099], "funcnam": [31, 268], "averag": [31, 268, 374, 375, 376, 496, 665, 881, 882, 883, 987, 1099], "count_num": [31, 268], "count": [31, 54, 103, 104, 109, 111, 114, 116, 118, 119, 120, 121, 139, 140, 146, 165, 166, 183, 194, 195, 198, 234, 238, 239, 245, 254, 259, 268, 283, 318, 355, 414, 422, 461, 469, 471, 479, 485, 506, 507, 508, 509, 510, 512, 513, 514, 534, 582, 584, 593, 637, 665, 679, 680, 700, 701, 709, 721, 745, 751, 760, 765, 772, 827, 862, 897, 932, 974, 980, 1030, 1085, 1087, 1099], "std_dev": [31, 268], "var": [31, 132, 268, 514, 665, 772, 1099], "pixel": [31, 268], "unit": [31, 39, 41, 129, 131, 151, 268, 331, 332, 339, 364, 369, 455, 470, 559, 561, 583, 611, 612, 613, 620, 665, 723, 772, 775, 834, 835, 842, 871, 876, 880, 965, 1055, 1057, 1086, 1099, 1107], "hand": [31, 103, 104, 116, 268, 438, 439, 440, 441, 948, 949, 950, 951], "side": [31, 165, 166, 168, 169, 268, 397, 438, 439, 440, 441, 506, 507, 508, 509, 510, 512, 513, 514, 517, 611, 612, 652, 653, 665, 700, 701, 703, 704, 772, 901, 948, 949, 950, 951, 1008, 1099], "call": [31, 58, 104, 105, 129, 131, 135, 164, 165, 166, 168, 184, 186, 267, 268, 282, 319, 322, 410, 461, 491, 522, 571, 661, 665, 677, 699, 700, 701, 703, 704, 771, 772, 775, 782, 967, 1099], "ad": [31, 95, 165, 234, 243, 244, 268, 281, 380, 606, 607, 665, 700, 748, 749, 772, 826, 887, 985, 1099], "wise": [31, 69, 105, 159, 268, 284, 285, 286, 287, 288, 289, 315, 316, 378, 453, 523, 524, 525, 576, 577, 606, 607, 618, 640, 665, 783, 784, 785, 786, 787, 788, 819, 820, 884, 963, 964, 1019, 1020, 1021, 1073, 1074, 1099], "particip": [31, 268], "distinct": [31, 131, 196, 268, 298, 451, 496, 614, 665, 797, 961, 987, 1099, 1107], "referenc": [31, 268, 569], "differ": [31, 103, 121, 124, 153, 165, 166, 180, 207, 208, 226, 234, 268, 326, 336, 355, 356, 358, 367, 373, 423, 438, 440, 446, 460, 461, 480, 481, 483, 559, 582, 611, 617, 620, 626, 665, 691, 700, 701, 772, 775, 781, 809, 828, 839, 862, 863, 865, 874, 886, 933, 948, 950, 956, 967, 976, 977, 1009, 1055, 1099], "row_index": [31, 268], "height": [31, 149, 268], "provid": [31, 48, 49, 50, 57, 103, 104, 106, 107, 108, 116, 117, 129, 131, 179, 268, 301, 302, 377, 449, 459, 461, 535, 536, 539, 542, 543, 620, 647, 665, 676, 772, 799, 800, 897, 921, 967, 1031, 1032, 1035, 1038, 1039, 1099, 1106, 1107], "intersect": [31, 268, 439, 775, 949], "bodi": [31, 268], "start": [31, 102, 103, 104, 106, 109, 111, 114, 116, 118, 119, 120, 133, 164, 165, 167, 168, 184, 218, 239, 245, 268, 300, 303, 304, 336, 350, 356, 359, 366, 367, 377, 397, 443, 506, 507, 509, 512, 513, 514, 527, 533, 537, 540, 553, 557, 594, 606, 611, 612, 616, 618, 624, 625, 652, 653, 655, 661, 665, 699, 700, 702, 703, 723, 736, 751, 772, 775, 802, 834, 836, 839, 842, 843, 850, 852, 855, 857, 860, 863, 866, 871, 873, 874, 901, 953, 1023, 1033, 1036, 1049, 1053, 1099, 1107], "zero": [31, 92, 93, 102, 103, 104, 109, 111, 114, 128, 137, 155, 180, 206, 224, 229, 230, 268, 382, 449, 454, 517, 526, 567, 580, 665, 683, 695, 772, 814, 889, 959, 1022, 1063, 1075, 1080, 1081, 1099], "unless": [31, 69, 94, 230, 268, 552, 558, 641, 772, 1054, 1081, 1089, 1099], "marker": [31, 268], "compliant": [31, 268], "case": [31, 69, 92, 94, 95, 96, 98, 112, 113, 120, 133, 138, 153, 165, 166, 168, 169, 180, 186, 207, 208, 226, 268, 330, 458, 459, 469, 470, 533, 540, 549, 665, 700, 701, 703, 704, 772, 775, 781, 833, 886, 1029, 1036, 1045, 1099], "three": [31, 232, 268, 324, 449, 493, 517, 665, 826, 959, 985, 1099], "avail": [31, 101, 105, 106, 107, 117, 127, 135, 267, 268, 496, 657, 658, 660, 664, 665, 666, 667, 670, 671, 672, 673, 676, 677, 693, 771, 772, 775, 987, 1091, 1093, 1095, 1099, 1100, 1103, 1104, 1105], "insert_befor": [31, 268], "insert_aft": [31, 268], "respect": [31, 268, 775], "direct": [31, 106, 114, 120, 237, 268], "far": [31, 268], "strongli": [31, 133, 186, 206, 254, 268, 461, 665, 967, 1099], "advis": [31, 184, 268], "structur": [31, 83, 87, 89, 153, 197, 208, 229, 268, 489, 665, 722, 772, 781, 886, 1099], "wherev": [31, 186, 254, 268, 461, 665, 967, 1099], "possibl": [31, 103, 141, 164, 167, 180, 186, 207, 233, 235, 254, 268, 455, 461, 469, 505, 556, 583, 665, 681, 699, 702, 737, 742, 743, 772, 967, 996, 1052, 1099], "simpl": [31, 131, 194, 268], "colx": [31, 59, 268, 775, 1107], "coli": [31, 268, 775, 1107], "after": [31, 59, 76, 95, 102, 103, 104, 109, 111, 114, 116, 118, 119, 120, 153, 236, 267, 268, 377, 460, 487, 496, 567, 665, 744, 772, 781, 886, 966, 987, 1063, 1099], "befor": [31, 103, 105, 116, 121, 124, 125, 133, 135, 153, 165, 168, 183, 236, 268, 321, 322, 323, 460, 487, 488, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 567, 572, 642, 643, 665, 700, 703, 706, 709, 744, 772, 781, 823, 824, 825, 886, 966, 981, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1063, 1069, 1099], "most": [31, 56, 92, 103, 104, 106, 116, 268, 470, 477, 488, 556, 665, 972, 981, 1052, 1099, 1106], "mandatori": [31, 268], "return_dtyp": [31, 138, 186, 268, 282, 457, 459, 460, 461, 592, 628, 629, 630, 665, 782, 966, 967, 1099], "latter": [31, 153, 268, 781, 886, 1099], "appropri": [31, 121, 229, 268, 496, 665, 987, 1099], "pure": [31, 268, 1080, 1099], "actual": [31, 95, 129, 131, 208, 268, 1017, 1099], "indic": [31, 102, 103, 104, 109, 111, 114, 116, 126, 127, 131, 165, 166, 168, 169, 183, 208, 213, 227, 239, 268, 293, 355, 359, 366, 399, 402, 404, 406, 407, 408, 448, 465, 468, 506, 507, 508, 509, 510, 512, 513, 514, 517, 523, 574, 597, 598, 665, 700, 701, 703, 704, 709, 732, 772, 775, 862, 866, 873, 905, 909, 912, 913, 914, 915, 958, 1008, 1019, 1071, 1076, 1099, 1107], "calcul": [31, 69, 165, 220, 240, 268, 326, 374, 375, 376, 411, 423, 438, 455, 511, 526, 531, 583, 585, 603, 642, 643, 646, 654, 665, 700, 738, 746, 772, 828, 881, 882, 883, 922, 933, 948, 1002, 1022, 1026, 1088, 1099], "individu": [31, 50, 129, 135, 166, 229, 268, 461, 540, 665, 701, 772, 813, 1036, 1099], "gridlin": [31, 268], "zoom": [31, 268], "level": [31, 36, 50, 116, 118, 119, 120, 129, 159, 186, 194, 268, 383, 665, 705, 712, 772], "freez": [31, 268], "pane": [31, 268], "top": [31, 141, 233, 268, 681, 742, 772], "index": [31, 93, 97, 100, 123, 137, 157, 165, 166, 168, 169, 174, 179, 180, 183, 198, 204, 206, 207, 218, 229, 231, 239, 245, 268, 276, 290, 291, 292, 294, 355, 418, 419, 428, 443, 448, 449, 506, 507, 508, 509, 510, 512, 513, 514, 517, 527, 539, 553, 574, 665, 700, 701, 703, 704, 709, 736, 751, 772, 789, 790, 791, 792, 793, 862, 921, 928, 929, 938, 953, 958, 959, 978, 1008, 1011, 1023, 1035, 1049, 1071, 1099], "thu": [31, 153, 268, 603, 781, 886, 1099], "altern": [31, 268, 661, 1080, 1099], "a2": [31, 70, 72, 268], "occur": [31, 75, 268, 422, 477, 496, 665, 685, 691, 693, 723, 735, 772, 932, 972, 987, 1099], "equival": [31, 92, 94, 95, 96, 98, 107, 112, 113, 165, 179, 194, 268, 275, 279, 372, 373, 387, 390, 391, 413, 456, 476, 478, 482, 483, 486, 490, 547, 570, 580, 587, 665, 700, 772, 921, 1043, 1059, 1061, 1062, 1099], "top_row": [31, 268], "top_col": [31, 268], "base": [31, 37, 149, 156, 165, 166, 168, 169, 268, 330, 338, 371, 374, 375, 376, 452, 453, 493, 548, 665, 689, 696, 700, 701, 703, 704, 772, 775, 833, 841, 879, 881, 882, 883, 897, 962, 963, 985, 1044, 1090, 1099, 1107], "scroll": [31, 268], "region": [31, 268], "initit": [31, 268], "5th": [31, 268], "properti": [31, 137, 144, 150, 158, 172, 210, 214, 242, 268, 686, 690, 728, 747, 772, 775, 1107], "readthedoc": [31, 268], "io": [31, 268, 687, 731, 772], "html": [31, 32, 33, 93, 105, 137, 145, 268, 772], "definit": [31, 127, 268, 411, 665, 922, 1099], "take": [31, 108, 129, 135, 159, 165, 168, 191, 197, 198, 223, 229, 268, 355, 529, 575, 611, 612, 615, 617, 626, 665, 700, 703, 719, 741, 772, 862, 1072, 1090, 1099], "care": [31, 268, 282, 461, 518, 665, 1012, 1099], "rel": [31, 106, 107, 117, 124, 125, 268, 355, 374, 375, 376, 508, 510, 512, 514, 665, 862, 881, 882, 883, 1099], "working_with_conditional_format": [31, 268], "similarli": [31, 95, 165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "well": [31, 103, 104, 105, 116, 198, 268, 397, 611, 665, 901, 1099], "adjac": [31, 268], "two": [31, 59, 94, 96, 98, 106, 159, 190, 191, 198, 232, 248, 254, 268, 276, 327, 332, 449, 493, 528, 574, 595, 596, 603, 605, 642, 643, 665, 718, 719, 754, 760, 772, 829, 835, 959, 985, 1099], "help": [31, 124, 125, 268, 693, 772], "appear": [31, 95, 124, 268, 582, 665, 1085, 1099], "working_with_sparklin": [31, 268], "inject": [31, 69, 268], "locat": [31, 153, 204, 231, 236, 268, 517, 665, 744, 772, 781, 886, 1008, 1011, 1071, 1099], "syntax": [31, 186, 194, 268, 533, 539, 540, 549, 661, 735, 772, 1029, 1035, 1036, 1045, 1099], "ensur": [31, 77, 106, 128, 129, 131, 164, 167, 196, 206, 268, 397, 665, 699, 702, 713, 714, 772, 775, 1080, 1099], "correctli": [31, 268], "microsoft": [31, 123, 268], "com": [31, 106, 268, 374, 375, 376, 539, 540, 541, 665, 881, 882, 883, 1035, 1036, 1037, 1099], "u": [31, 39, 41, 57, 99, 268, 331, 332, 339, 364, 369, 559, 561, 611, 612, 613, 620, 775, 834, 835, 842, 871, 876, 1055, 1057], "offic": [31, 268], "f5ed2452": [31, 268], "2337": [31, 268], "4f71": [31, 268], "bed3": [31, 268], "c8ae6d2b276": [31, 268], "instanti": [31, 105, 211, 243, 268, 729, 748, 772], "basic": [31, 268, 1107], "random": [31, 32, 122, 127, 129, 131, 170, 209, 268, 392, 496, 516, 522, 584, 665, 676, 895, 987, 1007, 1018, 1087, 1099], "date": [31, 39, 69, 103, 104, 106, 116, 121, 129, 146, 163, 165, 166, 168, 169, 181, 183, 239, 268, 331, 332, 333, 336, 337, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 421, 506, 507, 508, 509, 510, 512, 513, 514, 559, 560, 578, 611, 612, 620, 627, 651, 665, 700, 701, 703, 704, 709, 772, 775, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 877, 918, 931, 932, 976, 977, 1011, 1055, 1056, 1082, 1099], "dtm": [31, 268, 332, 775, 835], "2023": [31, 99, 123, 181, 268, 332, 611, 614, 627, 775, 835], "num": [31, 232, 268, 397, 400, 403, 567, 665, 901, 1099], "500": [31, 180, 238, 268, 693, 745, 772, 850, 852, 860, 997, 998, 1000, 1099], "val": [31, 205, 268, 309, 461, 489, 578, 655, 665, 727, 772, 808], "10_000": [31, 268], "20_000": [31, 268], "30_000": [31, 268], "increas": [31, 69, 103, 114, 268, 323, 665, 825, 1099], "b4": [31, 268], "light": [31, 268], "twice": [31, 108, 268], "titl": [31, 54, 268], "explicit": [31, 116, 127, 268, 640], "integr": [31, 268, 1107], "multi_fram": [31, 268], "wb": [31, 268], "coordin": [31, 268], "advanc": [31, 268, 449, 959, 1107], "min_color": [31, 268], "76933c": [31, 268], "mid_color": [31, 268], "c4d79b": [31, 268], "max_color": [31, 268], "ebf1d": [31, 268], "data_bar_2010": [31, 268], "bar_color": [31, 268], "9bbb59": [31, 268], "bar_negative_color_sam": [31, 268], "bar_negative_border_color_sam": [31, 268], "000": [31, 268, 1107], "white": [31, 268], "w": [31, 56, 57, 165, 168, 208, 268, 539, 541, 589, 591, 700, 703, 772, 775, 1035, 1037, 1048], "get_worksheet_by_nam": [31, 268], "fmt_titl": [31, 268], "add_format": [31, 268], "4f6228": [31, 268], "font_siz": [31, 268], "12": [31, 69, 99, 128, 129, 140, 165, 166, 183, 239, 268, 277, 321, 330, 332, 336, 340, 348, 350, 351, 352, 355, 356, 357, 359, 366, 367, 368, 488, 495, 513, 521, 562, 599, 607, 610, 613, 629, 665, 680, 698, 700, 701, 705, 709, 712, 725, 735, 740, 752, 772, 775, 833, 835, 857, 866, 873, 967, 1006, 1058, 1099, 1107], "ital": [31, 268], "customis": [31, 268], "trend": [31, 268], "win_loss": [31, 268], "subtl": [31, 268], "tone": [31, 268], "hidden": [31, 268], "id": [31, 76, 234, 254, 268, 503, 549, 550, 582, 665, 760, 994, 1085, 1099, 1107], "q1": [31, 268], "55": [31, 71, 268], "20": [31, 129, 153, 173, 174, 191, 197, 199, 203, 204, 268, 290, 291, 292, 326, 359, 366, 392, 396, 489, 506, 507, 509, 620, 627, 652, 665, 719, 722, 772, 775, 828, 873, 1099], "35": [31, 123, 268, 326, 665, 828, 1099], "q2": [31, 268], "30": [31, 153, 165, 173, 197, 203, 204, 225, 243, 268, 290, 291, 292, 326, 332, 337, 340, 348, 350, 351, 357, 358, 359, 366, 367, 392, 521, 611, 627, 652, 665, 700, 722, 748, 772, 775, 828, 835, 840, 858, 865, 866, 873, 1099, 1107], "15": [31, 123, 128, 165, 166, 174, 186, 268, 323, 326, 340, 348, 352, 359, 366, 489, 513, 607, 641, 652, 665, 700, 701, 772, 825, 828, 866, 873, 1099], "60": [31, 153, 268, 360, 361, 513, 559, 665, 863, 867, 868, 1055], "q3": [31, 268], "40": [31, 153, 197, 268, 359, 366, 392, 562, 665, 722, 772, 846, 873, 1058], "80": [31, 268], "q4": [31, 268], "75": [31, 146, 268, 279, 486, 493, 506, 507, 508, 509, 512, 513, 514, 630, 665, 827, 897, 985, 1099, 1107], "account": [31, 99, 106, 268, 355, 374, 375, 376, 665, 862, 881, 882, 883, 1099], "flavour": [31, 105, 268], "integer_dtyp": [31, 211, 268, 729, 772, 775], "0_": [31, 268], "just": [31, 116, 190, 268, 718, 772], "unifi": [31, 268, 775], "multi": [31, 103, 104, 268, 377, 539, 665, 1035], "2_color_scal": [31, 268], "95b3d7": [31, 268], "ffffff": [31, 268], "standardis": [31, 268], "z": [31, 56, 76, 99, 127, 129, 151, 176, 178, 182, 190, 207, 208, 237, 268, 275, 277, 279, 309, 392, 420, 458, 461, 486, 491, 499, 540, 559, 561, 571, 589, 591, 609, 632, 636, 641, 649, 665, 708, 718, 736, 772, 775, 808, 889, 1036, 1055, 1057, 1099, 1106], "score": [31, 268], "conjunct": [31, 108, 268], "a123": [31, 268], "b345": [31, 268], "c567": [31, 268], "d789": [31, 268], "e101": [31, 268], "45": [31, 166, 268, 332, 340, 348, 359, 366, 513, 534, 540, 595, 596, 627, 652, 665, 701, 772, 775, 835, 866, 873, 1030, 1036, 1107], "85": [31, 268, 1107], "font": [31, 268], "consola": [31, 268], "standard": [31, 123, 220, 229, 268, 343, 375, 512, 526, 531, 543, 646, 665, 738, 772, 846, 882, 1022, 1026, 1039, 1099, 1107], "stdev": [31, 268], "ipccompress": [32, 33, 268], "arrow": [32, 33, 49, 78, 92, 93, 105, 106, 109, 111, 118, 180, 207, 208, 224, 226, 268, 772, 1075, 1080, 1099], "ipc": [32, 33, 109, 110, 111, 118, 121, 268, 676], "feather": [32, 109, 118, 268, 676], "access": [32, 70, 71, 72, 73, 137, 180, 206, 207, 268, 460, 541, 665, 750, 772, 1037, 1107], "doc": [32, 33, 106, 145, 268, 772], "python": [32, 33, 53, 93, 103, 104, 105, 123, 137, 180, 186, 207, 208, 226, 254, 268, 282, 332, 457, 459, 461, 541, 611, 612, 652, 653, 655, 665, 670, 760, 772, 782, 835, 847, 848, 849, 854, 967, 1037, 1079, 1099], "lz4": [32, 33, 36, 49, 50, 268, 772], "zstd": [32, 33, 36, 49, 50, 268, 772], "batch": [33, 101, 104, 111, 119, 121, 268, 713, 714, 772], "pretti": [34, 268], "row_ori": [34, 268], "iobas": [34, 35, 112, 113, 268, 474, 687, 725, 731, 752, 772], "serial": [34, 35, 268, 687, 752, 772], "represent": [34, 35, 228, 268, 309, 336, 340, 343, 344, 346, 348, 350, 353, 356, 357, 360, 367, 368, 370, 578, 665, 691, 711, 772, 808, 809, 839, 843, 845, 846, 850, 852, 855, 857, 860, 863, 864, 867, 874, 875, 877, 1078, 1082, 1099], "orient": [34, 70, 72, 96, 98, 268, 772], "slower": [34, 96, 98, 164, 167, 186, 196, 239, 254, 268, 461, 630, 665, 699, 702, 760, 772, 967, 1099], "common": [34, 69, 75, 76, 268, 458, 611, 612, 665, 670, 685, 691, 693, 723, 735, 772], "write_ndjson": [34, 268], "bit_set": [34, 268, 731, 772], "newlin": [35, 113, 119, 268], "parquetcompress": [36, 268], "compression_level": [36, 50, 268, 772], "statist": [36, 50, 103, 104, 114, 120, 146, 268, 375, 376, 411, 506, 507, 508, 509, 510, 511, 512, 513, 514, 526, 665, 772, 827, 882, 883, 922, 1002, 1022, 1099], "row_group_s": [36, 50, 268, 772], "use_pyarrow": [36, 103, 109, 111, 114, 268, 1079, 1080, 1099], "pyarrow_opt": [36, 107, 114, 117, 268], "parquet": [36, 50, 114, 115, 120, 268, 676, 772], "gzip": [36, 50, 268, 772], "lzo": [36, 50, 268, 772], "brotli": [36, 50, 268, 772], "choos": [36, 49, 50, 198, 268, 772], "good": [36, 49, 50, 180, 268, 772], "perform": [36, 49, 50, 69, 83, 93, 103, 104, 109, 114, 116, 118, 119, 120, 137, 141, 164, 165, 166, 167, 168, 169, 183, 186, 201, 208, 233, 254, 268, 282, 461, 487, 559, 560, 561, 665, 681, 700, 701, 703, 704, 709, 737, 742, 751, 772, 967, 1055, 1056, 1057, 1099], "fast": [36, 49, 50, 130, 132, 268, 380, 518, 665, 772, 887, 1012, 1099, 1107], "decompress": [36, 49, 50, 268, 772], "backward": [36, 50, 155, 183, 268, 299, 352, 382, 665, 695, 709, 772, 859, 889, 1099], "guarante": [36, 50, 93, 103, 104, 235, 268, 693, 743, 772], "deal": [36, 50, 180, 268, 278, 280, 358, 366, 496, 559, 561, 588, 590, 613, 665, 772, 779, 780, 865, 873, 987, 1055, 1057, 1099], "older": [36, 50, 268, 772], "reader": [36, 50, 101, 103, 104, 109, 111, 114, 268, 677, 772], "higher": [36, 50, 200, 260, 268, 494, 510, 639, 665, 724, 766, 772, 986, 1001, 1099], "mean": [36, 50, 103, 104, 109, 114, 116, 146, 155, 164, 165, 166, 183, 198, 239, 247, 268, 355, 359, 366, 379, 382, 506, 507, 508, 509, 510, 512, 513, 514, 526, 539, 599, 611, 614, 655, 665, 695, 699, 700, 701, 709, 713, 714, 753, 772, 827, 862, 866, 873, 885, 889, 894, 998, 1022, 1035, 1099], "smaller": [36, 50, 151, 268, 693, 772, 880, 1099], "disk": [36, 48, 49, 50, 109, 268, 735, 772], "11": [36, 50, 93, 123, 129, 166, 268, 277, 351, 352, 355, 359, 366, 396, 488, 496, 505, 513, 527, 567, 587, 648, 653, 661, 665, 685, 701, 705, 712, 723, 740, 772, 775, 862, 866, 873, 967, 996, 1099], "22": [36, 50, 128, 268, 336, 356, 359, 366, 368, 369, 505, 506, 507, 509, 512, 513, 514, 559, 661, 665, 772, 775, 866, 873, 876, 996, 1055, 1099, 1107], "comput": [36, 50, 75, 76, 80, 151, 164, 183, 230, 235, 247, 260, 268, 274, 284, 285, 286, 287, 288, 289, 295, 296, 297, 310, 315, 316, 318, 319, 320, 321, 322, 327, 371, 378, 411, 424, 430, 434, 435, 436, 438, 439, 440, 441, 446, 450, 452, 453, 454, 477, 487, 488, 492, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 523, 524, 525, 526, 530, 576, 577, 584, 589, 591, 595, 596, 597, 603, 605, 615, 642, 643, 655, 665, 699, 706, 708, 709, 743, 750, 753, 766, 772, 777, 783, 784, 785, 786, 787, 788, 794, 795, 796, 811, 819, 820, 821, 822, 823, 824, 829, 879, 880, 884, 922, 934, 940, 944, 945, 946, 948, 949, 950, 951, 956, 960, 962, 963, 964, 972, 981, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1019, 1020, 1021, 1022, 1025, 1073, 1074, 1081, 1087, 1099], "512": [36, 268, 490, 665, 981, 1099], "implement": [36, 93, 105, 137, 186, 254, 268, 410, 461, 491, 571, 630, 665, 760, 967, 1010, 1011, 1099], "v": [36, 56, 57, 151, 268, 517, 665, 1008, 1099], "At": [36, 268], "moment": [36, 145, 268, 411, 526, 665, 922, 1022, 1099], "write_t": [36, 268], "partition_col": [36, 106, 268], "write_to_dataset": [36, 268], "similar": [36, 133, 159, 183, 268, 362, 365, 487, 503, 655, 665, 709, 772, 869, 872, 994, 1099], "spark": [36, 268], "partit": [36, 106, 107, 114, 117, 120, 121, 181, 196, 268], "we": [36, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 115, 116, 165, 166, 183, 239, 268, 355, 359, 366, 425, 459, 461, 506, 507, 508, 509, 510, 512, 513, 514, 541, 548, 627, 655, 665, 687, 700, 701, 709, 713, 714, 725, 772, 782, 862, 866, 873, 897, 935, 967, 1037, 1044, 1099], "use_pyarrow_write_to_dataset": [36, 268], "first": [36, 69, 103, 104, 108, 116, 119, 128, 138, 163, 165, 168, 171, 183, 185, 186, 193, 197, 198, 222, 227, 228, 234, 235, 239, 252, 268, 292, 294, 323, 352, 355, 359, 393, 400, 415, 425, 428, 429, 449, 460, 470, 489, 517, 529, 539, 542, 543, 549, 550, 600, 606, 611, 618, 622, 655, 665, 685, 700, 703, 705, 709, 712, 722, 743, 750, 758, 772, 775, 791, 825, 827, 859, 862, 866, 896, 906, 924, 935, 938, 939, 959, 966, 1008, 1035, 1037, 1038, 1039, 1045, 1046, 1070, 1078, 1099, 1107], "watermark": [36, 268], "partitioned_object": [36, 268], "calendar": [38, 39, 165, 166, 183, 239, 268, 343, 355, 359, 366, 370, 506, 507, 508, 509, 510, 512, 513, 514, 614, 665, 700, 701, 709, 772, 846, 862, 866, 873, 877], "time_unit": [39, 41, 99, 331, 332, 339, 364, 369, 561, 611, 612, 613, 620, 775, 834, 835, 842, 871, 876, 1057], "time_zon": [39, 99, 333, 358, 366, 561, 611, 612, 613, 775, 833, 836, 841, 865, 873, 1057], "timezon": [39, 775], "m": [39, 41, 57, 182, 268, 330, 331, 332, 338, 339, 362, 364, 365, 369, 539, 559, 560, 561, 564, 611, 612, 613, 620, 708, 772, 775, 833, 834, 835, 841, 842, 869, 871, 872, 876, 1035, 1055, 1056, 1057, 1060], "zoneinfo": [39, 775], "run": [39, 48, 49, 50, 75, 130, 132, 164, 167, 184, 186, 198, 212, 235, 244, 254, 268, 282, 323, 425, 461, 502, 503, 644, 665, 685, 691, 693, 699, 702, 713, 714, 718, 723, 730, 735, 743, 749, 772, 775, 825, 935, 967, 993, 994, 1099, 1106, 1107], "available_timezon": [39, 775], "check": [39, 103, 104, 116, 124, 125, 160, 165, 166, 168, 169, 177, 179, 182, 268, 300, 303, 304, 397, 401, 421, 533, 537, 557, 665, 700, 701, 703, 704, 708, 713, 714, 772, 798, 801, 802, 902, 904, 907, 908, 910, 916, 917, 918, 920, 921, 931, 1009, 1029, 1033, 1053, 1099], "128": [40, 71, 981, 1099], "bit": [40, 42, 43, 44, 45, 46, 47, 63, 64, 65, 66, 498, 533, 665, 989, 1029, 1099], "neg": [40, 122, 165, 166, 168, 169, 171, 185, 215, 216, 218, 222, 268, 442, 443, 489, 519, 520, 527, 553, 665, 700, 701, 703, 704, 733, 734, 736, 751, 772, 896, 924, 952, 953, 1014, 1015, 1023, 1049, 1070, 1099], "scale": [40, 151, 268, 461, 489, 562, 665, 880, 1058, 1099], "experiment": [40, 121, 211, 237, 238, 243, 268, 323, 359, 461, 506, 507, 508, 509, 510, 512, 513, 514, 665, 729, 745, 748, 772, 810, 825, 866, 897, 985, 1099], "progress": 40, "expect": [40, 84, 86, 91, 103, 116, 461, 627, 665, 711, 713, 714, 772], "32": [42, 45, 64, 71, 166, 179, 268, 478, 521, 665, 701, 772, 829, 863, 981, 1001, 1099], "sign": [44, 45, 46, 47, 355, 498, 567, 665, 775, 862, 910, 989, 1063, 1099], "maintain_ord": [48, 49, 50, 141, 164, 167, 196, 198, 233, 235, 239, 248, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 268, 276, 298, 451, 461, 574, 581, 604, 665, 681, 685, 691, 693, 699, 702, 723, 735, 737, 742, 743, 754, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 772, 797, 961, 1084, 1099], "type_coercion": [48, 49, 50, 75, 685, 691, 693, 723, 735, 772], "predicate_pushdown": [48, 49, 50, 75, 685, 691, 693, 713, 714, 723, 735, 772], "projection_pushdown": [48, 49, 50, 75, 685, 691, 693, 713, 714, 723, 735, 772], "simplify_express": [48, 49, 50, 75, 685, 691, 693, 723, 735, 772], "no_optim": [48, 49, 50, 75, 685, 693, 713, 714, 723, 772], "slice_pushdown": [48, 49, 50, 75, 685, 691, 693, 713, 714, 723, 735, 772], "persist": [48, 49, 50, 59, 772], "larger": [48, 49, 50, 603, 772], "ram": [48, 49, 50, 772], "maintain": [48, 49, 50, 141, 233, 268, 298, 451, 517, 581, 665, 681, 737, 742, 772, 797, 961, 1008, 1084, 1099], "slightli": [48, 49, 50, 772], "faster": [48, 49, 50, 105, 153, 229, 237, 268, 282, 461, 547, 582, 665, 772, 781, 782, 886, 967, 1043, 1099], "coercion": [48, 49, 50, 75, 499, 665, 685, 691, 693, 723, 735, 772], "optim": [48, 49, 50, 75, 114, 116, 118, 119, 120, 180, 184, 197, 201, 207, 235, 268, 685, 691, 693, 713, 714, 723, 735, 743, 751, 760, 772, 811, 1099], "predic": [48, 49, 50, 75, 116, 118, 119, 120, 121, 156, 179, 206, 268, 383, 586, 618, 665, 685, 691, 693, 696, 713, 714, 723, 726, 735, 751, 772, 890, 1010, 1011, 1099], "pushdown": [48, 49, 50, 75, 685, 691, 693, 713, 714, 723, 726, 735, 751, 772, 1010, 1011, 1099], "project": [48, 49, 50, 75, 116, 118, 119, 120, 282, 528, 529, 665, 685, 691, 693, 713, 714, 723, 726, 731, 735, 772], "turn": [48, 49, 50, 75, 103, 104, 116, 565, 685, 691, 693, 713, 714, 723, 772, 1061], "off": [48, 49, 50, 75, 103, 104, 116, 685, 691, 693, 713, 714, 723, 772], "certain": [48, 49, 50, 82, 107, 117, 174, 239, 268, 661, 685, 723, 772, 1099], "slice": [48, 49, 50, 70, 75, 151, 171, 181, 222, 268, 429, 447, 461, 469, 471, 504, 506, 507, 508, 509, 510, 512, 513, 514, 665, 685, 691, 693, 713, 714, 723, 735, 772, 880, 896, 939, 957, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1070, 1099], "lf": [48, 49, 50, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 705, 706, 707, 708, 710, 711, 712, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 750, 751, 772, 1106, 1107], "scan_csv": [48, 49, 50, 103, 104, 772], "my_larger_than_ram_fil": [48, 49, 50, 772], "data_pagesize_limit": [50, 772], "reduc": [50, 103, 104, 114, 116, 118, 119, 120, 255, 256, 258, 261, 521, 618, 665, 761, 762, 764, 767, 772, 969, 984, 1016, 1069, 1099], "pressur": [50, 114, 119, 120, 521, 665, 772, 1016, 1099], "improv": [50, 109, 118, 772], "speed": [50, 282, 461, 665, 772, 1107], "limit": [50, 106, 116, 155, 268, 299, 312, 313, 314, 382, 388, 665, 695, 705, 772, 815, 816, 817, 889, 1099], "page": [50, 109, 114, 118, 120, 268, 665, 676, 772, 1099], "arrai": [51, 92, 96, 103, 104, 114, 151, 224, 229, 230, 268, 295, 296, 297, 298, 312, 313, 314, 318, 319, 320, 321, 322, 420, 433, 434, 435, 436, 437, 444, 445, 453, 506, 507, 509, 513, 518, 615, 665, 772, 794, 795, 796, 797, 815, 816, 817, 821, 822, 823, 824, 829, 880, 930, 943, 944, 945, 946, 947, 954, 955, 963, 964, 997, 998, 1000, 1003, 1004, 1005, 1012, 1017, 1075, 1080, 1081, 1089, 1099], "integer_list": 51, "float_list": 51, "wrap": [53, 99, 397, 665], "arbitrari": [53, 129, 775], "queri": [54, 56, 75, 105, 106, 109, 116, 118, 119, 120, 153, 184, 197, 268, 459, 460, 461, 543, 665, 685, 691, 693, 705, 712, 723, 735, 751, 755, 760, 772, 781, 886, 967, 1039, 1099, 1106], "eager": [54, 55, 56, 57, 58, 59, 165, 237, 268, 331, 333, 336, 337, 339, 341, 344, 345, 347, 349, 351, 352, 354, 355, 356, 358, 359, 361, 364, 366, 368, 369, 506, 507, 509, 512, 513, 514, 594, 598, 611, 612, 620, 624, 625, 638, 641, 647, 652, 653, 656, 664, 665, 700, 714, 772, 833, 834, 836, 839, 840, 841, 842, 843, 844, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 871, 873, 874, 875, 1106], "against": [54, 105, 425, 772, 935, 1106, 1107], "eagerli": [54, 449], "unset": [54, 128, 358, 449, 865], "init": [54, 135], "eager_execut": [54, 1106], "itself": [54, 127, 461, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 642, 643, 665, 711, 772, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1099, 1106], "impact": [54, 165, 168, 268, 700, 703, 772, 1106], "declar": [54, 92, 94, 95, 96, 98, 105, 112, 113, 268, 772], "godfath": 54, "1972": 54, "6_000_000": 54, "134_821_952": 54, "dark": 54, "knight": 54, "2008": 54, "185_000_000": 54, "533_316_061": 54, "schindler": 54, "1993": 54, "22_000_000": 54, "96_067_179": 54, "pulp": 54, "fiction": 54, "1994": 54, "8_000_000": 54, "107_930_000": 54, "shawshank": 54, "redempt": 54, "25_000_000": 54, "28_341_469": 54, "release_year": 54, "budget": 54, "gross": 54, "imdb_scor": 54, "ctx": [54, 55, 56, 57, 58, 59], "film": 54, "1990": 54, "BY": [54, 56], "desc": [54, 56], "AS": [54, 645, 1106], "decad": 54, "total_gross": 54, "n_film": 54, "2000": [54, 342, 344, 351, 352, 355, 360, 775, 845, 858, 859, 862, 867], "533316061": 54, "232338648": 54, "1970": [54, 121], "134821952": 54, "register_glob": [55, 57, 59, 1106], "register_mani": [55, 56, 59], "unregist": [55, 56, 57, 1106], "frame_data": [55, 58], "execut": [55, 56, 58, 76, 105, 184, 268, 306, 425, 584, 665, 682, 713, 714, 723, 772, 935, 1087, 1099, 1106], "collect": [55, 56, 59, 72, 75, 105, 116, 117, 121, 129, 131, 147, 149, 184, 224, 235, 236, 268, 306, 377, 401, 461, 601, 616, 620, 647, 665, 679, 681, 687, 688, 689, 692, 693, 694, 695, 696, 697, 699, 700, 701, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 729, 731, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 750, 751, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 775, 908, 1099, 1106, 1107], "global": [56, 60, 77, 122, 129, 134, 229, 268, 460, 665, 807, 809, 1106], "scope": [56, 59, 135, 675, 775, 1106], "automat": [56, 59, 92, 94, 95, 96, 98, 99, 103, 104, 105, 106, 108, 112, 113, 116, 129, 131, 133, 211, 243, 268, 306, 460, 546, 552, 558, 665, 729, 748, 772, 966, 1042, 1048, 1054, 1099, 1106], "map": [56, 57, 94, 95, 103, 104, 105, 106, 109, 110, 114, 115, 116, 118, 150, 158, 180, 186, 202, 206, 207, 208, 225, 268, 359, 366, 458, 459, 460, 461, 487, 503, 584, 629, 665, 690, 726, 772, 775, 827, 866, 873, 966, 967, 994, 1087, 1099, 1106], "recent": [56, 488, 665, 981, 1099, 1106], "df1": [56, 58, 59, 60, 69, 76, 77, 124, 153, 160, 191, 230, 241, 268, 719, 772], "x": [56, 57, 69, 76, 93, 99, 103, 104, 106, 116, 127, 129, 137, 151, 173, 176, 178, 182, 190, 198, 207, 208, 237, 268, 275, 277, 279, 325, 372, 373, 387, 390, 391, 392, 413, 420, 431, 454, 456, 458, 459, 461, 476, 478, 482, 483, 486, 490, 491, 499, 503, 523, 526, 555, 570, 571, 578, 580, 587, 589, 591, 595, 596, 606, 607, 609, 618, 627, 629, 632, 636, 640, 649, 665, 708, 714, 718, 736, 772, 775, 809, 889, 920, 967, 1019, 1022, 1051, 1082, 1099, 1106], "df2": [56, 58, 59, 60, 69, 76, 77, 124, 153, 160, 230, 241, 268], "join": [56, 60, 69, 75, 76, 77, 183, 238, 268, 396, 487, 665, 685, 691, 693, 709, 723, 735, 745, 750, 772], "named_fram": [57, 1106], "lf1": [57, 59], "o": [57, 109, 118, 305, 323, 538, 579, 665, 803, 825, 1034, 1054, 1083, 1099], "lf2": [57, 59, 772], "p": [57, 71, 197, 268, 489, 647, 665, 722, 772], "q": [57, 208, 268, 647], "r": [57, 489, 534, 538, 539, 540, 541, 549, 665, 775, 1030, 1034, 1035, 1036, 1037, 1045], "lf3": [57, 772], "lf4": [57, 772], "either": [57, 108, 129, 166, 179, 183, 184, 188, 196, 206, 221, 229, 268, 493, 559, 588, 597, 647, 665, 701, 709, 711, 772, 775, 985, 1055, 1099, 1107], "tbl1": [57, 59], "tbl2": [57, 59], "tbl3": 57, "tbl4": 57, "statement": [58, 655], "hello_world": 58, "baz": [58, 174, 175, 198, 236, 268, 541, 554, 556, 707, 744, 772, 775, 1037, 1052], "hello_data": 58, "foo_bar": [58, 465, 468, 627], "registr": [59, 676], "lifetim": [59, 135, 675], "context": [59, 60, 133, 194, 250, 268, 276, 282, 306, 317, 383, 425, 459, 461, 469, 528, 529, 584, 592, 604, 617, 620, 626, 630, 641, 644, 664, 665, 675, 676, 750, 756, 772, 935, 1087, 1099, 1106], "manag": [59, 60, 675, 676, 1106], "often": [59, 135, 165, 166, 168, 169, 268, 422, 499, 665, 700, 701, 703, 704, 772, 932], "want": [59, 95, 153, 186, 194, 268, 312, 313, 314, 366, 383, 459, 460, 461, 503, 506, 507, 508, 509, 510, 512, 513, 514, 606, 618, 638, 641, 656, 665, 685, 705, 712, 772, 775, 781, 815, 816, 817, 873, 886, 967, 994, 1080, 1099], "df0": [59, 191, 268, 719, 772], "exit": [59, 60, 135, 1106], "construct": [59, 92, 94, 95, 96, 97, 98, 268, 389, 460, 638, 641, 656, 661, 665, 687, 698, 725, 772, 807, 1099], "through": [59, 93, 661, 775, 1099], "tbl0": 59, "remain": [59, 103, 104, 116, 149, 151, 156, 268, 328, 329, 383, 555, 556, 665, 689, 696, 713, 714, 772, 830, 831, 880, 890, 1051, 1052, 1099], "text": [59, 547, 549, 550, 645, 1043, 1107], "misc": 59, "testing1234": 59, "test1": 59, "test2": 59, "test3": 59, "temporarili": [60, 133, 135, 165, 166, 168, 169, 268, 700, 701, 703, 704, 772], "cach": [60, 75, 77, 109, 116, 118, 120, 124, 125, 134, 460, 506, 507, 508, 509, 510, 512, 513, 514, 559, 560, 561, 564, 665, 675, 685, 691, 693, 723, 735, 772, 807, 1055, 1056, 1057, 1060], "categori": [60, 77, 227, 268, 308, 309, 324, 493, 665, 806, 808, 826, 897, 985, 1099], "until": [60, 184, 268, 611], "finish": [60, 80, 153, 268, 781, 886, 1099], "invalid": [60, 103, 104, 116, 542, 543, 548, 580, 611, 612, 665, 1038, 1039, 1044], "outermost": 60, "color": [60, 77, 254, 300, 302, 303, 304, 584, 665, 760, 1087, 1099], "red": [60, 77, 254, 584, 665, 760, 1087, 1099], "green": [60, 77, 254, 584, 665, 760, 1087, 1099], "blue": [60, 77, 300, 302, 303, 304, 584, 665, 1087, 1099], "orang": [60, 77, 144, 250, 251, 253, 255, 256, 258, 260, 261, 268, 756, 757, 759, 761, 762, 764, 766, 767], "uint8": [60, 77, 105, 126, 128, 228, 229, 237, 268, 321, 322, 460, 572, 587, 665, 772, 775, 823, 824, 1069, 1099, 1107], "yellow": [60, 77, 300, 302, 303, 304], "black": [60, 77, 186, 268, 300, 302, 303, 304], "succe": [60, 103, 104, 116], "df_join": [60, 77], "cat": [60, 77, 228, 268, 324, 493, 533, 563, 566, 578, 602, 660, 665, 775, 826, 897, 985, 1029, 1059, 1062, 1095, 1099], "u8": [60, 77, 227, 228, 237, 268, 460, 587, 665, 772, 775, 1076, 1099, 1107], "composit": [61, 128, 1107], "schemadict": [61, 92, 94, 95, 96, 97, 98, 103, 105, 106, 116, 210, 268, 647, 713, 714, 728, 755, 760, 772], "struct_seri": [61, 760], "dai": [62, 165, 166, 168, 181, 183, 239, 268, 351, 352, 355, 356, 359, 366, 368, 506, 507, 508, 509, 510, 512, 513, 514, 610, 611, 613, 614, 665, 700, 701, 703, 709, 772, 775, 858, 859, 862, 863, 866, 873, 875], "static": [67, 755, 760], "utf": 68, "frametyp": [69, 1106], "joinstrategi": [69, 182, 268, 708, 772], "outer": [69, 76, 182, 268, 708, 772], "descend": [69, 141, 213, 219, 233, 268, 292, 444, 496, 518, 528, 529, 584, 597, 665, 681, 732, 737, 742, 772, 791, 917, 954, 987, 1012, 1024, 1087, 1099], "fill": [69, 76, 142, 154, 155, 216, 237, 268, 299, 319, 322, 381, 382, 388, 396, 506, 507, 509, 513, 520, 545, 551, 567, 619, 638, 641, 656, 665, 694, 695, 734, 750, 772, 888, 889, 900, 978, 997, 998, 1000, 1003, 1004, 1005, 1015, 1041, 1047, 1063, 1099], "sort": [69, 70, 124, 128, 141, 165, 166, 168, 169, 183, 191, 197, 198, 213, 233, 239, 252, 262, 268, 292, 309, 383, 461, 487, 518, 529, 584, 586, 597, 630, 665, 681, 691, 700, 701, 703, 704, 709, 719, 722, 723, 732, 735, 742, 758, 768, 772, 775, 791, 808, 917, 1012, 1084, 1087, 1099, 1107], "origin": [69, 103, 104, 149, 156, 235, 268, 328, 329, 358, 383, 410, 460, 487, 498, 499, 500, 534, 539, 543, 545, 551, 567, 595, 596, 665, 689, 696, 743, 772, 826, 830, 831, 865, 890, 966, 985, 991, 1030, 1035, 1039, 1041, 1047, 1063, 1099], "In": [69, 107, 117, 120, 129, 131, 135, 151, 153, 165, 166, 168, 169, 186, 194, 229, 268, 461, 611, 665, 700, 701, 703, 704, 772, 781, 880, 886, 988, 1099], "duplic": [69, 81, 176, 182, 183, 235, 268, 277, 398, 410, 493, 665, 708, 709, 743, 772, 903, 985, 1099], "behaviour": [69, 76, 108, 149, 268, 533, 539, 540, 549, 580, 665, 689, 772, 1029, 1035, 1036, 1045], "suitabl": [69, 76, 127, 186, 268, 461, 517, 665, 967, 1008, 1099, 1107], "get": [69, 100, 110, 115, 121, 133, 141, 144, 150, 158, 161, 162, 165, 166, 168, 169, 171, 172, 176, 178, 179, 185, 193, 206, 210, 214, 218, 222, 233, 242, 252, 262, 268, 276, 290, 291, 292, 294, 298, 308, 318, 319, 320, 321, 322, 339, 384, 393, 398, 400, 403, 409, 412, 415, 427, 432, 433, 451, 462, 463, 464, 469, 471, 475, 480, 481, 494, 502, 527, 531, 544, 547, 572, 573, 581, 585, 611, 617, 622, 626, 630, 631, 632, 633, 634, 635, 636, 646, 650, 654, 665, 681, 686, 690, 697, 700, 701, 703, 704, 705, 710, 712, 728, 736, 740, 742, 747, 758, 768, 772, 789, 790, 791, 792, 793, 797, 806, 813, 821, 822, 823, 824, 842, 893, 896, 901, 903, 906, 911, 919, 924, 937, 942, 943, 961, 968, 970, 971, 973, 976, 977, 982, 983, 986, 993, 1023, 1026, 1040, 1043, 1070, 1075, 1076, 1084, 1088, 1089, 1099], "speedup": [69, 180, 186, 268, 461, 665, 967, 1099], "receiv": [69, 116, 186, 197, 254, 268, 461, 489, 665, 722, 772, 1107], "now": [69, 166, 268, 306, 665, 701, 772, 1057], "One": [69, 146, 194, 198, 268, 279, 486, 645, 665, 775, 827, 1099], "whose": [69, 183, 198, 268, 377, 616, 665, 709, 772], "uniqu": [69, 126, 127, 128, 131, 139, 140, 178, 182, 194, 208, 259, 268, 283, 294, 324, 400, 403, 409, 479, 493, 559, 560, 561, 564, 582, 584, 593, 637, 665, 679, 680, 708, 765, 772, 793, 826, 827, 906, 911, 919, 974, 985, 1055, 1056, 1057, 1060, 1085, 1087, 1099], "post": 69, "constrain": [69, 149, 268, 689, 772], "newli": 69, "boolean": [69, 141, 156, 159, 184, 219, 233, 268, 278, 279, 280, 300, 303, 304, 342, 383, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 416, 417, 421, 484, 486, 529, 542, 586, 587, 597, 598, 647, 655, 665, 681, 684, 696, 711, 737, 742, 772, 775, 779, 780, 792, 798, 800, 845, 890, 901, 902, 903, 905, 906, 908, 909, 911, 912, 913, 914, 915, 919, 926, 927, 931, 979, 982, 983, 1010, 1029, 1080, 1090, 1099], "know": [69, 105, 449, 547, 1043, 1080, 1089, 1099], "2022": [69, 146, 163, 165, 166, 183, 239, 268, 332, 340, 348, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 559, 611, 612, 614, 620, 665, 700, 701, 709, 772, 775, 835, 846, 862, 866, 873, 1055], "y": [69, 76, 93, 99, 127, 129, 137, 151, 176, 178, 182, 190, 198, 207, 208, 237, 268, 275, 277, 279, 362, 365, 372, 373, 390, 391, 413, 420, 431, 456, 458, 461, 482, 483, 486, 491, 499, 503, 559, 560, 561, 571, 580, 587, 589, 591, 595, 596, 609, 614, 627, 632, 636, 649, 665, 708, 718, 736, 772, 775, 809, 869, 872, 1055, 1056, 1057], "df3": [69, 268], "set_tbl_format": 69, "09": [69, 129, 166, 268, 332, 351, 352, 562, 611, 653, 701, 772, 775, 1058], "01": [69, 129, 146, 163, 165, 166, 239, 268, 330, 331, 332, 333, 337, 339, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 506, 507, 509, 512, 513, 514, 559, 560, 561, 564, 611, 612, 614, 665, 700, 701, 772, 775, 834, 835, 836, 837, 838, 840, 842, 843, 844, 849, 850, 851, 853, 855, 856, 858, 859, 860, 861, 862, 865, 866, 868, 869, 870, 871, 872, 873, 876, 1055, 1056, 1057, 1060], "02": [69, 163, 165, 166, 183, 239, 268, 331, 332, 339, 341, 349, 351, 352, 355, 358, 359, 361, 364, 366, 369, 506, 507, 508, 509, 510, 512, 513, 514, 515, 559, 560, 561, 564, 611, 612, 614, 665, 700, 701, 709, 772, 775, 834, 835, 837, 838, 842, 843, 844, 849, 850, 855, 856, 858, 859, 860, 862, 865, 866, 868, 870, 871, 873, 959, 1055, 1056, 1057, 1060], "03": [69, 99, 165, 166, 239, 268, 331, 332, 333, 337, 339, 341, 349, 351, 352, 355, 358, 359, 360, 361, 362, 364, 365, 366, 369, 506, 507, 509, 512, 513, 514, 560, 564, 611, 612, 614, 665, 700, 701, 772, 834, 835, 836, 840, 842, 843, 844, 849, 850, 856, 858, 859, 860, 865, 866, 868, 869, 871, 872, 1056, 1060], "af1": 69, "af2": 69, "af3": 69, "keep": [69, 103, 104, 116, 235, 238, 239, 268, 410, 460, 600, 665, 743, 745, 772, 966, 1099], "easili": [69, 105, 211, 243, 247, 268, 647, 661, 729, 748, 753, 772], "dot": [69, 661, 665, 735, 772, 1099], "product": [69, 145, 268, 321, 327, 665, 823, 829, 1099], "fill_nul": [69, 154, 268, 665, 694, 750, 772, 1099], "sum_horizont": [69, 648], "167": 69, "47": 69, "callabl": [70, 71, 72, 73, 116, 138, 159, 186, 197, 249, 254, 268, 282, 449, 457, 458, 459, 461, 489, 504, 505, 592, 606, 607, 618, 628, 629, 630, 640, 665, 713, 714, 722, 755, 760, 772, 782, 959, 967, 995, 996, 1099], "decor": [70, 71, 72, 73, 129, 131, 186, 268, 461, 665, 675, 676, 967, 1099], "under": [70, 71, 72, 73, 657, 658, 660, 661, 666, 667, 671, 672, 673, 1091, 1093, 1095, 1100, 1103, 1104, 1105], "by_first_letter_of_column_nam": 70, "f": [70, 104, 146, 163, 181, 224, 234, 237, 268, 275, 449, 521, 538, 559, 561, 592, 601, 628, 665, 959, 1034, 1055, 1057], "fromkei": [70, 72], "by_first_letter_of_column_valu": 70, "starts_with": [70, 300, 303, 533, 537, 775, 1033], "to_seri": [70, 161, 268, 559, 598, 641, 1055], "xx": [70, 72, 128, 131, 775], "xy": [70, 72], "yy": [70, 72, 128, 131, 775], "yz": [70, 72], "b1": [70, 72], "b2": [70, 72], "pow_n": 71, "powersofn": 71, "next": [71, 165, 166, 183, 239, 268, 299, 355, 359, 366, 496, 506, 507, 508, 509, 510, 512, 513, 514, 611, 665, 700, 701, 709, 772, 862, 866, 873, 987, 1099], "ceil": [71, 665, 1099], "previou": [71, 135, 488, 491, 569, 571, 665, 781, 981, 1099], "floor": [71, 665, 1099], "nearest": [71, 183, 200, 260, 268, 311, 386, 396, 494, 510, 639, 665, 709, 724, 766, 772, 812, 892, 900, 986, 1001, 1099], "24": [71, 123, 151, 165, 166, 183, 186, 239, 268, 321, 323, 336, 341, 355, 356, 359, 366, 368, 478, 506, 507, 508, 509, 510, 512, 513, 514, 614, 665, 700, 701, 709, 772, 825, 844, 862, 866, 873, 921, 1099], "001": [71, 344, 345, 347, 354, 614, 851, 853, 861], "next_pow2": 71, "prev_pow2": 71, "nearest_pow2": 71, "split_by_column_dtyp": 72, "collect_al": [72, 772], "31": [73, 129, 332, 336, 337, 340, 348, 351, 355, 559, 610, 611, 613, 620, 627, 775, 833, 835, 839, 840, 858, 1055, 1107], "42": [73, 166, 170, 191, 268, 701, 719, 772, 895, 1099], "961": 73, "1764": 73, "4160": 73, "build": [74, 93, 775, 1107], "wa": 74, "compil": [74, 418, 419, 928, 929], "gate": 74, "info": [74, 107, 117, 123], "otherwis": [74, 105, 128, 133, 186, 191, 208, 211, 254, 268, 301, 312, 313, 314, 324, 374, 375, 376, 449, 461, 489, 493, 498, 533, 535, 588, 630, 655, 665, 719, 729, 760, 772, 799, 815, 816, 817, 826, 881, 882, 883, 959, 967, 985, 989, 1010, 1011, 1029, 1031, 1099], "depend": [74, 105, 123, 418, 419, 461, 469, 493, 496, 614, 617, 620, 626, 665, 928, 929, 985, 987, 1099, 1107], "host": [74, 103, 109, 111, 114, 118, 120], "git": 74, "lazy_fram": 75, "comm_subplan_elim": [75, 685, 691, 693, 723, 735, 772], "comm_subexpr_elim": [75, 306, 665, 685, 691, 693, 723, 735, 772], "graph": [75, 184, 268, 706, 750, 772], "parallel": [75, 76, 101, 106, 114, 120, 165, 168, 183, 184, 197, 212, 244, 268, 323, 425, 584, 655, 665, 676, 700, 703, 708, 709, 730, 749, 760, 772, 825, 935, 1087, 1099], "threadpool": [75, 133], "Will": [75, 685, 691, 693, 723, 735, 772, 1099], "try": [75, 87, 89, 103, 104, 108, 109, 114, 116, 118, 120, 685, 691, 693, 723, 735, 772], "branch": [75, 685, 691, 693, 723, 735, 772], "subplan": [75, 685, 691, 693, 723, 735, 772], "union": [75, 76, 441, 685, 691, 693, 723, 735, 772, 775, 951], "subexpress": [75, 685, 691, 693, 723, 735, 772], "reus": [75, 685, 691, 693, 723, 735, 772], "part": [75, 92, 129, 540, 555, 556, 685, 691, 693, 723, 735, 750, 772, 1036, 1051, 1052], "fashion": [75, 182, 268, 685, 691, 693, 723, 735, 772], "alpha": [75, 282, 374, 375, 376, 665, 685, 691, 693, 723, 735, 772, 881, 882, 883, 1099], "item": [76, 104, 163, 206, 209, 268, 379, 421, 428, 431, 516, 556, 665, 885, 931, 938, 941, 1007, 1052, 1099], "iter": [76, 92, 130, 132, 141, 164, 165, 166, 167, 168, 169, 180, 181, 206, 207, 208, 211, 212, 213, 219, 233, 234, 243, 244, 246, 247, 268, 323, 487, 529, 589, 591, 597, 600, 601, 602, 609, 632, 636, 644, 647, 649, 661, 665, 681, 699, 700, 701, 702, 703, 704, 729, 730, 732, 737, 742, 748, 749, 753, 772, 825, 1099, 1107], "polarstyp": 76, "concatmethod": 76, "vertic": [76, 153, 237, 241, 268, 532, 1028], "rechunk": [76, 92, 97, 103, 104, 109, 111, 114, 116, 118, 119, 120, 153, 268, 665, 781, 813, 886, 973, 1099], "combin": [76, 87, 89, 165, 166, 170, 183, 239, 268, 279, 293, 366, 486, 546, 552, 558, 611, 665, 700, 701, 709, 735, 772, 866, 873, 1042, 1048, 1054], "concaten": [76, 159, 197, 268, 489, 601, 602, 665, 722, 772, 813, 973, 1099], "vertical_relax": 76, "diagon": [76, 234, 268], "vstack": [76, 153, 268], "coerc": [76, 499, 665], "equal": [76, 77, 103, 104, 116, 124, 125, 141, 160, 165, 168, 183, 191, 233, 268, 306, 324, 372, 373, 390, 413, 449, 483, 493, 499, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 544, 545, 551, 567, 642, 643, 661, 665, 681, 700, 703, 709, 719, 737, 742, 772, 826, 959, 985, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1009, 1040, 1041, 1047, 1063, 1099, 1107], "supertyp": [76, 155, 268, 281, 665, 695, 772], "find": [76, 157, 268, 517, 665, 1008, 1099], "miss": [76, 103, 104, 116, 154, 268, 299, 374, 375, 376, 388, 404, 406, 665, 694, 772, 881, 882, 883, 1089, 1099], "stack": [76, 173, 241, 268], "don": [76, 186, 235, 237, 268, 282, 323, 425, 461, 487, 665, 743, 772, 775, 825, 935, 967, 1009, 1089, 1099], "auto": [76, 92, 94, 95, 96, 98, 112, 113, 114, 120, 234, 268, 772, 1107], "logic": [76, 186, 254, 268, 278, 280, 461, 578, 588, 590, 630, 665, 687, 698, 708, 725, 731, 752, 760, 772, 779, 780, 967, 1082, 1099], "align_fram": 76, "pattern": [76, 103, 104, 116, 118, 119, 120, 180, 268, 467, 533, 534, 539, 540, 541, 549, 550, 760, 775, 1010, 1011, 1029, 1030, 1035, 1036, 1037, 1045, 1046, 1099], "collis": 76, "need": [76, 99, 103, 104, 106, 108, 124, 125, 165, 166, 168, 169, 208, 217, 229, 268, 449, 460, 521, 544, 562, 614, 638, 641, 656, 665, 700, 701, 703, 704, 772, 1016, 1040, 1058, 1099, 1107], "sure": [76, 92, 97, 103, 104, 109, 111, 114, 165, 166, 168, 169, 201, 268, 700, 701, 703, 704, 772], "contigu": [76, 92, 97, 103, 104, 109, 111, 114, 116, 118, 119, 120, 201, 268], "relev": 76, "df_h1": 76, "l1": 76, "l2": 76, "df_h2": 76, "r1": 76, "r2": 76, "r3": 76, "df_d1": 76, "df_d2": 76, "df_a1": 76, "df_a2": 76, "df_a3": 76, "disabl": [77, 134, 180, 268], "encount": [78, 165, 168, 268, 480, 481, 542, 543, 603, 606, 618, 665, 700, 703, 772, 976, 977, 1038, 1039, 1099], "least": [84, 129, 488, 665, 981, 1099], "unexpect": [85, 268, 459, 461, 665, 967, 1099], "caus": [85, 93, 103, 104, 116, 137, 153, 268, 781, 886, 1099], "panic": 85, "mismatch": [87, 113], "incompat": 89, "chunkedarrai": [92, 193, 268, 829, 1099], "recordbatch": [92, 181, 268], "schemadefinit": [92, 94, 95, 96, 98, 112, 113, 268, 772], "schema_overrid": [92, 94, 95, 96, 97, 98, 105, 106, 112, 113, 181, 229, 268, 298, 772, 775, 797], "copi": [92, 93, 137, 142, 143, 181, 224, 229, 230, 243, 268, 380, 567, 665, 683, 684, 748, 772, 814, 818, 887, 1063, 1075, 1080, 1081, 1099], "closest": 92, "pair": [92, 94, 95, 96, 98, 112, 113, 128, 202, 268, 726, 772, 1107], "sever": [92, 94, 95, 96, 98, 112, 113, 268, 772, 1107], "wai": [92, 94, 95, 96, 98, 112, 113, 164, 181, 197, 219, 247, 268, 487, 489, 529, 539, 661, 665, 699, 722, 737, 753, 760, 772, 1035], "form": [92, 94, 95, 96, 98, 112, 113, 180, 207, 237, 268, 488, 665, 772, 981, 1099], "them": [92, 94, 95, 96, 98, 112, 113, 116, 152, 153, 165, 166, 183, 191, 239, 268, 397, 431, 480, 481, 487, 601, 665, 692, 700, 701, 709, 719, 772, 775, 781, 886, 941, 976, 977, 1099], "dimens": [92, 94, 96, 98, 112, 113, 268, 500, 665, 772, 991, 1099], "supportsinterchang": 93, "allow_copi": [93, 137], "interchang": [93, 137], "__dataframe__": 93, "convers": [93, 137, 180, 181, 207, 208, 226, 230, 268, 559, 560, 561, 564, 611, 676, 1055, 1056, 1057, 1060, 1079, 1080, 1081, 1099], "detail": [93, 105, 106, 124, 125, 137, 268, 772, 1107], "latest": [93, 107, 117, 137, 358, 366, 388, 470, 559, 561, 613, 665, 865, 873, 1055, 1057], "from_panda": [93, 108], "from_arrow": 93, "effici": [93, 105, 181, 268], "reli": 93, "therefor": [93, 151, 268, 461, 655, 665, 880, 1099], "becaus": [93, 113, 151, 165, 168, 184, 186, 237, 254, 268, 425, 611, 700, 703, 760, 772, 782, 880, 935, 967, 1099], "convert": [93, 97, 107, 108, 117, 137, 225, 226, 227, 228, 229, 232, 268, 325, 333, 362, 365, 449, 458, 495, 541, 548, 559, 560, 561, 562, 564, 665, 698, 772, 809, 836, 869, 872, 959, 1037, 1044, 1055, 1056, 1057, 1058, 1060, 1068, 1078, 1079, 1080, 1081, 1089, 1099], "panda": [93, 97, 108, 123, 165, 230, 268, 351, 352, 578, 665, 700, 772, 858, 859, 1081, 1082, 1099], "pd": [93, 97, 108, 578, 665, 1081, 1082, 1099], "df_pd": 93, "dfi": [93, 137], "clone": [94, 95, 96, 97, 98, 142, 229, 230, 268, 683, 772, 814, 1079, 1080, 1081, 1089, 1099], "dimension": [94, 96, 98, 229, 268, 772, 1099], "infer_schema_length": [95, 98, 103, 104, 108, 116, 119, 268, 542, 772, 1038], "NOT": [95, 124, 125, 468, 1106], "typic": [95, 186, 268, 338, 775, 841, 967, 1099], "clearer": 95, "load": [95, 97, 105, 107, 108, 117, 130, 132, 268, 676, 705, 712, 772, 1107], "_partial_": [95, 268, 772], "omit": [95, 99, 127, 129, 131, 135, 194, 208, 268, 652, 653, 775], "mani": [95, 98, 106, 153, 268, 542, 781, 886, 1038, 1099], "scan": [95, 98, 103, 104, 116, 117, 118, 119, 120, 121, 165, 166, 168, 169, 268, 693, 700, 701, 703, 704, 705, 712, 772], "slow": [95, 98, 103, 104, 116, 282, 323, 461, 505, 665, 760, 825, 996, 1099], "partial": [95, 103, 116], "present": [95, 124, 129, 401, 665, 1089, 1099], "np": [96, 156, 229, 268, 574, 665, 772, 905, 909, 912, 913, 1071, 1099], "ndarrai": [96, 156, 229, 268, 574, 665, 772, 829, 1008, 1011, 1071, 1080, 1099], "numpi": [96, 123, 145, 180, 207, 208, 226, 229, 230, 268, 480, 481, 505, 665, 772, 905, 909, 912, 913, 976, 977, 996, 1080, 1081, 1089, 1099], "columnar": [96, 98, 180, 207, 268], "interpret": [96, 98, 103, 104, 116, 268, 772], "yield": [96, 98, 103, 104, 116, 151, 153, 234, 268, 487, 665, 772, 781, 880, 886, 1099], "conclus": [96, 98, 268, 772], "nan_to_nul": [97, 268, 772, 1099], "include_index": 97, "instal": [97, 103, 104, 106, 109, 111, 114, 123, 145, 229, 230, 268, 735, 772, 1081, 1099], "nan": [97, 124, 125, 129, 137, 154, 230, 268, 328, 329, 372, 373, 381, 390, 391, 396, 404, 406, 407, 408, 413, 456, 462, 475, 480, 481, 482, 483, 505, 580, 603, 665, 694, 772, 784, 788, 830, 831, 888, 912, 913, 976, 977, 996, 1080, 1081, 1099, 1107], "pd_df": 97, "pd_seri": 97, "tbl": [99, 101, 104], "reconstruct": 99, "repr": [99, 129, 131], "trim": 99, "whitespac": [99, 546, 552, 558, 1042, 1048, 1054], "prompt": 99, "extract": [99, 334, 336, 337, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 356, 357, 360, 361, 363, 367, 368, 370, 489, 540, 541, 542, 543, 665, 837, 838, 839, 840, 843, 844, 846, 850, 851, 852, 853, 855, 856, 857, 860, 861, 863, 864, 867, 868, 870, 874, 875, 877, 1036, 1037, 1038, 1039], "to_init_repr": [99, 268, 1099], "truncat": [99, 103, 116, 163, 165, 168, 180, 207, 208, 226, 268, 700, 703, 723, 772], "identifi": [99, 190, 196, 235, 268, 718, 743, 772], "compound": [99, 208, 268, 775], "struct": [99, 194, 211, 232, 236, 243, 268, 324, 449, 460, 493, 502, 503, 541, 542, 555, 556, 584, 606, 607, 609, 629, 665, 729, 744, 748, 760, 772, 826, 959, 985, 993, 1037, 1038, 1049, 1051, 1052, 1099], "neither": [99, 108, 209, 268, 449, 959], "source_ac": 99, "source_cha": 99, "ident": [99, 142, 143, 268, 362, 502, 503, 665, 683, 684, 772, 814, 818, 869, 993, 994, 1099], "timestamp": [99, 358, 620, 865], "tor_id": 99, "nnel_id": 99, "\u03bc": [99, 129, 165, 166, 180, 183, 207, 208, 226, 239, 268, 330, 331, 332, 333, 337, 338, 340, 341, 344, 345, 347, 348, 349, 351, 352, 354, 355, 358, 359, 360, 361, 362, 365, 366, 369, 506, 507, 509, 512, 513, 514, 559, 561, 614, 620, 665, 700, 701, 709, 772, 775, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 849, 850, 851, 853, 855, 856, 858, 859, 860, 861, 862, 865, 866, 868, 870, 871, 873, 876, 1055, 1057], "asia": [99, 775, 837, 838, 870], "tokyo": [99, 775], "123456780": 99, "9876543210": 99, "56": [99, 576, 665], "59": [99, 128, 332, 340, 348, 360, 613, 651, 652, 653, 775, 835, 855, 867], "663053": 99, "jst": [99, 775], "803065983": 99, "2055938745": 99, "38": [99, 129], "18": [99, 140, 166, 191, 268, 306, 322, 359, 366, 369, 396, 410, 424, 430, 446, 450, 599, 611, 652, 665, 680, 698, 701, 719, 723, 725, 752, 772, 775, 781, 876, 934, 940, 956, 960, 1057, 1099], "050545": 99, "source_actor_id": 99, "source_channel_id": 99, "sr": 99, "to_list": [99, 166, 268, 701, 772, 1029, 1099], "datatypeclass": 100, "uint32": [100, 123, 151, 268, 292, 336, 340, 344, 346, 348, 350, 353, 356, 357, 360, 367, 368, 418, 419, 433, 499, 534, 544, 547, 574, 578, 665, 772, 775, 792, 804, 839, 843, 850, 852, 855, 857, 860, 863, 864, 867, 874, 875, 880, 910, 928, 929, 943, 1009, 1030, 1040, 1043, 1082, 1099], "regular": [100, 180, 206, 207, 239, 268, 377, 533, 534, 539, 540, 541, 549, 550, 616, 661, 665, 775, 1029, 1030, 1035, 1036, 1037, 1045, 1046], "uint64": [100, 170, 268, 392, 418, 419, 498, 665, 895, 928, 929, 989, 1099], "bigidx": 100, "read": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 153, 268, 389, 459, 655, 665, 687, 693, 698, 725, 772, 781, 886, 1099], "over": [101, 103, 104, 107, 116, 129, 138, 153, 180, 181, 186, 206, 207, 208, 234, 246, 249, 254, 268, 282, 323, 382, 458, 459, 461, 469, 471, 472, 473, 496, 506, 507, 508, 509, 510, 512, 513, 514, 592, 606, 607, 618, 628, 629, 630, 640, 665, 755, 760, 775, 781, 782, 825, 886, 967, 997, 998, 1000, 1004, 1099], "fetch": [101, 105, 116, 184, 268, 683, 685, 705, 712, 772], "ideal": 101, "read_csv_batch": [101, 677], "tpch": [101, 104], "tables_scale_100": [101, 104], "lineitem": [101, 104, 106], "try_parse_d": [101, 103, 104, 116], "n_row": [102, 103, 104, 109, 111, 114, 116, 118, 119, 120, 181, 268, 693, 772], "handler": [102, 103, 104, 108, 109, 110, 111, 112, 113, 115, 687, 725, 772], "g": [102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 137, 165, 166, 183, 229, 237, 239, 268, 275, 282, 355, 359, 366, 377, 461, 506, 507, 508, 509, 510, 512, 513, 514, 521, 616, 665, 687, 700, 701, 709, 725, 726, 772, 862, 866, 873, 1009, 1080, 1099, 1107], "builtin": [102, 103, 104, 108, 109, 110, 111, 112, 113, 115, 687, 725, 772], "accept": [102, 103, 104, 107, 109, 111, 114, 141, 164, 167, 211, 212, 219, 233, 243, 244, 247, 268, 275, 377, 397, 460, 487, 529, 587, 589, 591, 597, 600, 601, 602, 609, 616, 632, 636, 644, 647, 649, 655, 661, 665, 681, 699, 702, 729, 730, 737, 742, 748, 749, 753, 772, 901, 1099], "stop": [102, 103, 104, 109, 111, 114, 116, 118, 119, 120, 506, 507, 509, 512, 513, 514, 665, 834, 836, 842, 843, 850, 852, 855, 860, 866, 871], "textio": 103, "new_column": [103, 104, 108, 116, 203, 268], "comment_char": [103, 104, 116], "quote_char": [103, 104, 116], "skip_row": [103, 104, 116], "missing_utf8_is_empty_str": [103, 104, 116], "ignore_error": [103, 104, 113, 116], "n_thread": [103, 104], "8192": 103, "csvencod": [103, 104, 116], "low_memori": [103, 104, 114, 116, 119, 120], "skip_rows_after_head": [103, 104, 116], "row_count_nam": [103, 104, 109, 111, 114, 116, 118, 119, 120], "row_count_offset": [103, 104, 109, 111, 114, 116, 118, 119, 120], "sample_s": [103, 104], "eol_char": [103, 104, 116], "raise_if_empti": [103, 104, 108, 116], "truncate_ragged_lin": [103, 116], "fsspec": [103, 104, 109, 111, 114, 117, 118, 120, 123], "remot": [103, 104, 109, 111, 114], "autogener": [103, 104, 116], "column_x": [103, 104, 116], "being": [103, 104, 116, 121, 152, 227, 237, 238, 268, 282, 323, 359, 506, 507, 508, 509, 510, 512, 513, 514, 615, 665, 692, 745, 772, 810, 825, 866, 897, 985, 1099, 1107], "enumer": [103, 104, 116, 181, 268], "shorter": [103, 104], "comment": [103, 104, 116], "instanc": [103, 104, 116, 129, 131, 135, 153, 159, 268, 307, 470, 506, 507, 508, 509, 510, 512, 513, 514, 606, 618, 661, 665, 714, 751, 772, 781, 804, 886, 1099], "escap": [103, 104, 116], "dure": [103, 104, 116, 135, 153, 268, 781, 886, 1099], "doesn": [103, 116, 165, 268, 371, 665, 700, 772, 879, 1089, 1099], "complet": [103, 105, 116, 1080, 1099], "wherea": [103, 105, 116, 480, 481, 611, 665, 705, 712, 772, 976, 977, 1099], "would": [103, 104, 116, 292, 428, 461, 469, 496, 597, 611, 665, 791, 938, 987, 1080, 1099], "prefer": [103, 104, 107, 116, 132, 153, 180, 186, 206, 207, 254, 268, 377, 461, 665, 772, 781, 886, 967, 1099, 1107], "treat": [103, 104, 116, 533, 549, 550, 1029, 1045, 1046], "10000": [103, 181, 268, 567], "might": [103, 104, 116, 133, 141, 229, 233, 268, 282, 461, 582, 665, 681, 737, 742, 772, 1081, 1099], "issu": [103, 104, 108, 116, 321, 322, 572, 665, 823, 824, 1069, 1099], "iso8601": [103, 104, 116], "physic": [103, 104, 183, 268, 309, 578, 665, 682, 708, 709, 772, 808, 809, 1082, 1099], "cpu": [103, 104], "system": [103, 104], "wrongli": 103, "done": [103, 104, 116, 121, 135, 139, 183, 268, 281, 283, 307, 487, 545, 551, 593, 665, 679, 709, 772, 804, 1041, 1047, 1099], "buffer": [103, 104, 151, 180, 268, 880, 1099], "modifi": [103, 104, 116, 133, 135, 153, 173, 180, 241, 268, 293, 358, 369, 533, 539, 540, 549, 665, 781, 865, 876, 886, 1029, 1035, 1036, 1045, 1059, 1061, 1062, 1099], "upper": [103, 104, 151, 165, 168, 268, 312, 313, 397, 449, 583, 594, 611, 612, 624, 625, 652, 653, 665, 700, 703, 772, 816, 880, 901, 965, 1086, 1099], "bound": [103, 104, 151, 165, 168, 268, 312, 313, 314, 397, 428, 448, 449, 455, 583, 594, 611, 612, 624, 625, 652, 653, 665, 700, 703, 772, 816, 817, 880, 901, 938, 958, 965, 1086, 1099], "lossi": [103, 104, 116], "decod": [103, 104], "usag": [103, 104, 116, 129, 131, 217, 268, 775, 1017, 1099], "expens": [103, 104, 114, 116, 119, 120, 130, 132, 165, 166, 168, 169, 180, 186, 206, 207, 208, 234, 235, 268, 282, 461, 665, 700, 701, 703, 704, 743, 772, 781, 886, 967, 1099, 1107], "aggreg": [103, 104, 114, 159, 164, 165, 166, 167, 168, 187, 188, 189, 192, 194, 198, 199, 200, 220, 221, 237, 240, 247, 248, 251, 253, 268, 276, 383, 394, 457, 459, 461, 487, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 588, 589, 590, 591, 606, 607, 608, 609, 618, 623, 631, 632, 635, 636, 640, 648, 649, 665, 700, 701, 703, 704, 714, 715, 716, 717, 720, 721, 724, 738, 739, 746, 753, 754, 757, 759, 772, 898, 995, 996, 997, 998, 1000, 1003, 1004, 1005, 1099], "nativ": [103, 105, 109, 111, 114, 127, 180, 186, 207, 208, 226, 254, 268, 461, 630, 665, 670, 760, 967, 1099, 1107], "parser": 103, "regard": [103, 603], "sens": [103, 109, 111, 114, 118, 120, 191, 239, 268, 487, 665, 719, 772], "particular": [103, 109, 111, 114, 118, 120, 151, 268, 880, 1099], "usernam": [103, 106, 109, 111, 114, 118, 120], "password": [103, 106, 109, 111, 114, 118, 120], "skip": [103, 104, 108, 114, 116, 120, 237, 268, 782, 967, 1099], "offset": [103, 104, 109, 111, 114, 116, 118, 119, 120, 165, 166, 168, 169, 218, 239, 245, 268, 330, 338, 351, 352, 355, 359, 366, 443, 527, 553, 611, 612, 665, 700, 701, 703, 704, 736, 751, 772, 833, 841, 858, 859, 862, 866, 873, 953, 1023, 1049, 1057, 1099], "row_count": [103, 104, 109, 111, 114, 116, 118, 119, 120], "sampl": [103, 104, 254, 268, 526, 665, 760, 1022, 1099], "estim": [103, 104, 139, 151, 268, 283, 375, 376, 411, 593, 665, 679, 772, 880, 882, 883, 922, 1099], "alloc": [103, 104, 151, 201, 268, 880, 1099], "nodataerror": [103, 104, 108, 116, 676], "longer": [103, 116], "lazili": [103, 104, 116, 117, 118, 119, 120, 460, 665, 772], "glob": [103, 104, 116, 118, 119, 120], "continu": [103, 114, 324, 493, 526, 665, 826, 985, 1022, 1099], "benchmark": [103, 114], "50000": 104, "batchedcsvread": [104, 676], "upon": 104, "creation": 104, "gather": 104, "next_batch": 104, "big": 104, "interest": 104, "seen_group": 104, "big_fil": 104, "df_current_batch": 104, "concat": [104, 813, 973, 1099], "partition_df": 104, "partition_bi": [104, 181, 268], "as_dict": [104, 196, 268], "fh": 104, "write_csv": [104, 116, 268], "els": [104, 655], "connectionorcursor": 105, "cursor": 105, "client": 105, "incom": 105, "driver": [105, 106], "read_database_uri": 105, "wide": [105, 163, 190, 237, 268, 718, 772], "snowflak": [105, 106], "variou": [105, 268, 665, 772, 775, 1099], "odbc": 105, "facil": 105, "initialis": [105, 135, 772, 1106], "flight": 105, "flightsql": 105, "packag": 105, "flight_sql": 105, "about": [105, 526, 533, 539, 540, 549, 665, 1022, 1029, 1035, 1036, 1045, 1099, 1107], "notabl": 105, "dremio": 105, "influxdb": 105, "read_connection_uri": 105, "notic": [105, 268, 772, 1099], "dbapi2": 105, "connectorx": [105, 106, 123], "optimis": [105, 186, 208, 254, 268, 772, 967, 1010, 1011, 1099, 1107], "translat": 105, "conn": 105, "url": [105, 539, 541, 1035, 1037], "never": [105, 206, 268, 611], "test_data": 105, "user_conn": 105, "normalised_scor": 105, "partition_on": 106, "partition_rang": 106, "partition_num": 106, "dbreadengin": 106, "raw": 106, "warehous": 106, "role": 106, "transfer": 106, "document": [106, 108, 362, 365, 543, 559, 560, 561, 564, 661, 809, 869, 872, 1039, 1055, 1056, 1057, 1060], "redshift": 106, "mysql": 106, "mariadb": 106, "clickhous": 106, "oracl": 106, "bigqueri": 106, "pleas": [106, 108, 165, 268, 614, 700, 772], "github": 106, "sfu": 106, "connector": 106, "destin": 106, "small": [106, 128, 184, 268, 359, 693, 772, 1107], "still": 106, "develop": [106, 129, 131], "read_databas": 106, "explicitli": [106, 127, 129, 135, 460, 647, 665, 675], "test_tabl": 106, "compani": 106, "testdb": 106, "public": [106, 268, 665, 676, 772, 1099], "myrol": 106, "delta_table_opt": [107, 117], "root": [107, 117, 310, 410, 458, 471, 491, 530, 571, 664, 665, 811, 1025, 1099], "absolut": [107, 117, 124, 125, 274, 374, 375, 376, 665, 777, 881, 882, 883, 1099], "sinc": [107, 117, 138, 140, 141, 233, 249, 268, 282, 306, 339, 358, 366, 405, 424, 430, 446, 450, 457, 504, 559, 561, 592, 599, 611, 613, 620, 628, 641, 652, 665, 680, 681, 698, 702, 703, 704, 713, 725, 737, 742, 752, 755, 772, 781, 782, 826, 842, 865, 873, 934, 940, 956, 960, 985, 995, 1055, 1057, 1099], "avoid": [107, 207, 268, 277, 665], "year": [107, 117, 165, 166, 183, 239, 268, 342, 343, 355, 356, 359, 366, 367, 506, 507, 508, 509, 510, 512, 513, 514, 610, 611, 613, 665, 700, 701, 709, 772, 845, 846, 862, 863, 866, 873, 874], "2021": [107, 117, 146, 163, 165, 239, 268, 559, 627, 700, 772, 775, 837, 838, 846, 870, 918, 1055, 1099], "aw": [107, 117], "googl": [107, 117], "service_account": [107, 117], "service_account_json_absolute_path": [107, 117], "az": [107, 117], "adl": [107, 117], "abf": [107, 117], "azure_storage_account_nam": [107, 117], "azure_storage_account_kei": [107, 117], "without_fil": [107, 117], "track": [107, 117, 186, 268, 449, 1106], "sheet_id": 108, "sheet_nam": 108, "xlsx2csv_option": 108, "read_csv_opt": 108, "xlsx2csv": [108, 123], "openpyxl": 108, "noreturn": 108, "read_csv": [108, 116], "influenc": [108, 693, 714, 772], "load_workbook": 108, "sheetnam": 108, "nor": [108, 209, 268], "skip_empty_lin": 108, "wors": [108, 141, 233, 268, 681, 737, 742, 772], "remedi": 108, "correct": [108, 375, 376, 411, 511, 526, 665, 713, 714, 772, 882, 883, 922, 1002, 1022, 1099], "look": [108, 300, 449, 459, 665, 798], "1000": [108, 151, 228, 268, 344, 345, 567, 851, 1078, 1099, 1107], "spreadsheet": [108, 198, 268], "xl": 108, "xlsm": 108, "xlsb": 108, "odf": 108, "od": 108, "odt": 108, "memory_map": [109, 114, 118], "v2": [109, 118], "greatli": [109, 118], "repeat": [109, 118, 497, 499, 638, 656, 665], "give": [109, 111, 114, 118, 119, 120, 190, 235, 268, 339, 411, 499, 580, 665, 676, 718, 743, 772, 842, 922, 1099], "That": [109, 713, 714, 772], "filenam": 109, "my_fil": 109, "write_ipc": [109, 268], "read_ndjson": 112, "parallelstrategi": [114, 120], "use_statist": [114, 120], "stabl": [114, 141, 145, 209, 233, 268, 454, 665, 681, 718, 737, 742, 772], "row_group": [114, 120], "read_tabl": 114, "scan_parquet": 114, "scan_pyarrow_dataset": [114, 120], "hive": [114, 120], "contribut": [114, 508, 510, 512, 514, 665], "with_column_nam": 116, "push": [116, 118, 119, 120, 121], "down": [116, 118, 119, 120, 121, 386, 665, 772, 892, 1099], "therebi": [116, 118, 119, 120], "potenti": [116, 118, 119, 120, 180, 206, 208, 268], "overhead": [116, 118, 119, 120], "realloc": [116, 118, 119, 153, 268, 781, 886, 1099], "headerless": 116, "unlik": [116, 165, 268, 700, 772], "fewer": 116, "my_long_fil": 116, "thing": [116, 122, 617, 626], "less": [116, 183, 268, 413, 456, 545, 551, 556, 567, 665, 709, 772, 1041, 1047, 1052, 1063, 1107], "breezah": 116, "languag": [116, 165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "hard": [116, 713, 714, 772], "mydf": 116, "lambda": [116, 138, 159, 186, 197, 254, 268, 282, 374, 375, 376, 449, 457, 458, 459, 461, 606, 607, 618, 629, 630, 640, 665, 713, 714, 722, 760, 772, 782, 881, 882, 883, 959, 967, 1099], "lower": [116, 165, 168, 200, 260, 268, 312, 314, 397, 455, 458, 494, 498, 510, 594, 611, 612, 624, 625, 639, 652, 653, 665, 693, 700, 703, 724, 766, 772, 817, 901, 965, 986, 989, 1001, 1086, 1099], "simpli": [116, 487, 606, 618, 665], "idx": [116, 165, 181, 268, 449, 700, 772, 959, 1011, 1099], "uint16": [116, 321, 322, 572, 665, 775, 823, 824, 1069, 1099], "u16": [116, 129, 1107], "eu": 117, "central": [117, 411, 526, 665, 922, 1022, 1099], "read_parquet": 120, "allow_pyarrow_filt": 121, "comparison": 121, "break": [121, 237, 238, 268, 282, 323, 324, 359, 506, 507, 508, 509, 510, 512, 513, 514, 665, 745, 772, 810, 825, 826, 866, 897, 985, 1099], "dset": 121, "my": [121, 565, 1061], "folder": 121, "05": [121, 124, 125, 129, 183, 239, 268, 332, 333, 337, 358, 360, 362, 365, 611, 709, 772, 775, 835, 836, 837, 838, 840, 865, 866, 869, 870, 872, 873], "04": [121, 165, 239, 268, 332, 333, 337, 341, 349, 351, 352, 358, 359, 361, 362, 365, 369, 559, 611, 614, 700, 772, 775, 836, 840, 844, 850, 855, 856, 858, 859, 860, 865, 868, 869, 872, 876, 1055], "seed": [122, 170, 209, 268, 392, 496, 516, 522, 665, 895, 987, 1007, 1018, 1099], "shuffl": [122, 209, 254, 268, 516, 665, 760, 1007, 1099], "intern": [122, 180, 268, 685, 772], "stdout": [123, 135, 163, 268, 472], "17": [123, 129, 247, 505, 515, 620, 641, 652, 665, 753, 819, 866, 996, 1099, 1107], "platform": 123, "linux": 123, "90": [123, 562, 1058], "wsl2": 123, "x86_64": 123, "glibc2": 123, "main": 123, "apr": 123, "14": [123, 129, 186, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 268, 330, 396, 496, 652, 665, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 775, 833, 866], "44": [123, 191, 268, 327, 665, 719, 772], "51": 123, "gcc": 123, "matplotlib": [123, 723, 735, 772], "check_row_ord": 124, "check_column_ord": 124, "check_dtyp": [124, 125], "check_exact": [124, 125], "rtol": [124, 125], "1e": [124, 125], "atol": [124, 125], "08": [124, 125, 129, 166, 268, 332, 359, 559, 614, 701, 772, 775, 866, 873, 1055], "nans_compare_equ": [124, 125], "categorical_as_str": [124, 125], "assertionerror": [124, 125], "compar": [124, 125, 160, 268, 372, 373, 390, 391, 413, 456, 482, 483, 665, 809, 1009, 1099], "irrespect": 124, "unsort": 124, "exactli": [124, 125, 128, 129, 131, 555, 556, 614, 772, 1017, 1051, 1052, 1099], "toler": [124, 125, 183, 268, 709, 772], "inexact": [124, 125], "assert": [124, 125, 127, 129, 131, 166, 268, 676, 701, 772, 775, 894, 1099], "check_nam": 125, "s1": [125, 159, 268, 921, 959, 1081, 1090, 1099], "searchstrategi": [126, 128, 129, 131], "null_prob": [126, 129, 131], "percentag": [126, 129, 131, 488, 665, 981, 1099], "chanc": [126, 129, 131, 1107], "independ": [126, 127, 129, 131], "flag": [126, 268, 518, 533, 539, 540, 549, 665, 691, 713, 714, 772, 1012, 1029, 1035, 1036, 1045, 1099], "hypothesi": [126, 127, 128, 129, 130, 131, 1107], "sampled_from": [126, 1107], "unique_small_int": 126, "ccy": [126, 1107], "gbp": [126, 1107], "eur": [126, 146, 163, 268, 1107], "jpy": [126, 1107], "min_col": [127, 129], "max_col": [127, 129], "standalon": [127, 129, 775], "mincol": 127, "assign": [127, 165, 268, 449, 487, 496, 555, 556, 665, 700, 772, 959, 966, 987, 1051, 1052, 1099], "exact": [127, 129, 131, 217, 268, 559, 560, 561, 580, 665, 1055, 1056, 1057], "minimum": [127, 128, 129, 131, 159, 192, 268, 374, 375, 376, 475, 481, 496, 635, 636, 665, 720, 772, 815, 854, 881, 882, 883, 977, 983, 987, 1099, 1107], "especi": [127, 503, 665, 994, 1099], "test_unique_xyz": 127, "assert_someth": 127, "punctuat": 127, "test_special_char_colname_init": 127, "inner_dtyp": [128, 131], "select_from": [128, 131], "min_siz": [128, 129, 131, 1107], "max_siz": [128, 129, 131, 1107], "anoth": [128, 164, 268, 323, 331, 448, 465, 468, 665, 699, 750, 772, 825, 834, 886, 958, 1009, 1099], "randomli": 128, "innermost": 128, "2x": 128, "lst": 128, "11330": 128, "24030": 128, "116": 128, "zz": [128, 131], "uint8_pair": [128, 1107], "uint": [128, 1107], "zip": [128, 1107], "131": 128, "176": 128, "149": [128, 1107], "max_data_s": [129, 131], "include_col": 129, "allow_infin": [129, 131], "allowed_dtyp": [129, 131, 1107], "excluded_dtyp": [129, 131], "describ": [129, 163, 268, 1099], "desir": [129, 449, 611, 612, 959], "n_chunk": [129, 131, 268, 781, 886, 1099], "randomis": 129, "onto": 129, "pct": 129, "preced": [129, 775], "disallow": [129, 131], "inf": [129, 131, 289, 324, 399, 402, 493, 580, 665, 788, 826, 897, 905, 909, 965, 981, 985, 1086, 1099], "exclud": [129, 131, 319, 322, 397, 661, 665, 901, 918, 1099], "deploi": [129, 131], "characterist": [129, 131], "concret": [129, 131], "test_repr": 129, "isinst": [129, 131, 268], "0x11f561580": 129, "known": [129, 449, 755, 760, 959], "0565": 129, "34715": 129, "5844": 129, "33": [129, 191, 268, 515, 665, 719, 772, 1001, 1099], "076854": 129, "3382": 129, "48662": 129, "7540": 129, "29": [129, 165, 166, 183, 239, 268, 330, 351, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 833, 858, 862, 866, 873], "836271": 129, "4063": 129, "06": [129, 239, 268, 332, 350, 357, 358, 367, 772, 775, 865, 866], "39092": 129, "1889": 129, "13": [129, 142, 143, 154, 155, 162, 166, 174, 184, 193, 243, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 268, 277, 469, 471, 562, 601, 606, 609, 618, 649, 654, 665, 683, 684, 694, 695, 701, 711, 748, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 772, 866, 873, 874, 967, 1058, 1099], "41": [129, 513, 665, 1107], "874455": 129, "15836": 129, "1755e": 129, "575050513": 129, "profil": [130, 132, 772], "balanc": [130, 132, 1107], "set_environ": 130, "polars_hypothesis_profil": [130, 132], "1500": 130, "constructor": 131, "normal": [131, 165, 268, 371, 411, 526, 665, 700, 772, 879, 922, 1022, 1099], "test_repr_is_valid_str": 131, "experi": 131, "create_list_strategi": [131, 1107], "polars_max_thread": 133, "behind": 133, "lock": 133, "reason": [133, 459, 665], "pyspark": 133, "udf": [133, 138, 186, 197, 249, 254, 268, 282, 461, 489, 592, 630, 665, 722, 755, 760, 772, 782, 967, 1099], "recommend": [133, 180, 197, 268, 611, 775], "easi": [135, 1107], "restor": 135, "restore_default": 135, "relat": [135, 775], "set_tbl_row": 135, "initi": [135, 606, 618, 655], "whatev": 135, "were": [135, 661], "enter": 135, "advantag": [135, 197, 268], "set_": 135, "set_verbos": 135, "do_various_th": 135, "cleaner": 135, "breviti": 135, "vein": 135, "durat": [135, 183, 239, 268, 330, 337, 338, 341, 345, 347, 349, 354, 361, 369, 578, 611, 612, 652, 653, 665, 709, 772, 775, 833, 840, 841, 844, 851, 853, 856, 861, 868, 873, 876, 1082, 1099], "set_ascii_t": 135, "write_ascii_frame_to_stdout": 135, "sy": 135, "nan_as_nul": 137, "polarsdatafram": 137, "futur": 137, "notimplementederror": 137, "num_row": 137, "get_column": [137, 231, 268], "dtypekind": 137, "inference_s": [138, 186, 268], "256": [138, 186, 268, 981, 1099], "deprec": [138, 140, 249, 268, 282, 306, 358, 366, 405, 424, 430, 446, 450, 457, 504, 559, 561, 592, 599, 611, 613, 628, 641, 652, 665, 680, 698, 702, 703, 704, 713, 725, 752, 755, 772, 781, 782, 826, 865, 873, 934, 940, 956, 960, 985, 995, 1055, 1057, 1099], "19": [138, 166, 183, 249, 268, 282, 358, 359, 366, 405, 457, 504, 507, 509, 559, 561, 562, 592, 613, 628, 665, 701, 702, 703, 704, 709, 713, 755, 772, 782, 826, 865, 866, 873, 985, 995, 1055, 1057, 1058, 1099], "map_row": [138, 268], "tri": [138, 186, 268], "approxim": [139, 140, 268, 283, 593, 665, 679, 680, 772, 1107], "hyperloglog": [139, 268, 283, 593, 665, 679, 772], "algorithm": [139, 268, 283, 593, 665, 679, 772], "cardin": [139, 268, 283, 593, 665, 679, 772], "approx_n_uniqu": [140, 268, 665, 680, 772], "k": [141, 208, 233, 268, 305, 309, 411, 579, 665, 681, 742, 772, 803, 808, 922, 1083, 1099], "intoexpr": [141, 164, 165, 166, 167, 168, 169, 211, 212, 219, 233, 243, 244, 247, 268, 281, 397, 422, 424, 430, 438, 439, 440, 441, 446, 450, 487, 520, 529, 589, 591, 594, 597, 600, 601, 602, 606, 609, 611, 612, 613, 618, 624, 625, 632, 636, 641, 644, 647, 649, 652, 653, 655, 665, 681, 696, 699, 700, 701, 702, 703, 704, 729, 730, 737, 742, 748, 749, 753, 772, 901, 1099], "nulls_last": [141, 219, 233, 268, 292, 528, 665, 681, 737, 742, 772, 791, 1099], "smallest": [141, 233, 268, 305, 665, 681, 742, 772, 803, 1099], "largest": [141, 165, 166, 183, 233, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 579, 665, 681, 700, 701, 709, 742, 772, 862, 866, 873, 1083, 1099], "search": [141, 183, 233, 268, 681, 709, 737, 742, 772], "top_k": [141, 268, 305, 665, 681, 772, 803, 1099], "greater": [142, 183, 268, 390, 391, 526, 556, 665, 709, 772, 1022, 1052, 1099], "cheap": [142, 143, 212, 244, 268, 683, 684, 730, 749, 772, 781, 814, 818, 1099], "deepcopi": [142, 143, 268, 683, 684, 772, 814, 818, 1099], "clear": [143, 268, 684, 772, 818, 1099], "appl": [144, 173, 182, 202, 204, 225, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 268, 501, 537, 557, 665, 708, 726, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 772, 1033, 1053], "banana": [144, 225, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 268, 501, 665, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767], "pairwis": [145, 268], "pearson": [145, 268, 411, 526, 603, 665, 922, 1022, 1099], "correl": [145, 268, 603, 642], "coeffici": [145, 268, 526, 665, 1022, 1099], "corrcoef": [145, 268], "percentil": [146, 268, 827, 1099], "summari": [146, 268, 827, 1099], "glimps": [146, 171, 268], "usd": [146, 163, 268, 1107], "2020": [146, 163, 166, 268, 333, 337, 338, 341, 344, 345, 347, 349, 354, 358, 361, 362, 365, 366, 559, 560, 561, 701, 772, 775, 836, 840, 841, 844, 851, 853, 856, 861, 865, 868, 869, 872, 873, 1055, 1056, 1057], "null_count": [146, 149, 268, 323, 665, 772, 825, 827, 1099], "266667": [146, 268], "666667": [146, 188, 240, 256, 268, 374, 665, 746, 762, 772], "std": [146, 268, 512, 665, 772, 827, 1003, 1099], "101514": [146, 268], "707107": [146, 268, 375, 512, 665, 882, 1099], "57735": [146, 268], "columnnameorselector": [147, 149, 196, 198, 208, 227, 235, 236, 237, 268, 688, 689, 718, 743, 772], "more_column": [147, 152, 213, 236, 268, 377, 616, 665, 688, 692, 732, 744, 772], "subset": [149, 194, 235, 268, 689, 743, 772], "preserv": [149, 156, 164, 167, 182, 186, 229, 230, 268, 328, 329, 383, 523, 665, 689, 696, 708, 772, 830, 831, 890, 1019, 1081, 1099], "behavior": [149, 268, 448, 689, 772, 781, 826, 958, 985, 1099], "all_horizont": [149, 268, 588, 689, 772], "is_nul": [149, 268, 665, 689, 772, 1099], "sizeunit": [151, 268, 880, 1099], "heap": [151, 268, 880, 1099], "its": [151, 268, 332, 359, 366, 529, 655, 665, 772, 809, 835, 866, 873, 880, 1099], "bitmap": [151, 268, 880, 1099], "structarrai": [151, 268, 880, 1099], "constant": [151, 166, 268, 330, 380, 665, 701, 772, 833, 880, 887, 1099], "unchang": [151, 268, 578, 665, 713, 714, 755, 760, 772, 880, 1082, 1099], "capac": [151, 217, 268, 880, 1017, 1099], "ffi": [151, 268, 880, 1099], "kb": [151, 268, 880, 1099], "mb": [151, 268, 880, 1099], "gb": [151, 268, 880, 1099], "tb": [151, 268, 880, 1099], "revers": [151, 268, 318, 319, 320, 321, 322, 458, 491, 571, 665, 772, 821, 822, 823, 824, 1099], "1_000_000": [151, 268, 880, 1099], "25888898": [151, 268], "689577102661133": [151, 268], "long": [152, 190, 237, 268, 692, 718, 772], "letter": [152, 252, 262, 268, 377, 540, 616, 665, 692, 758, 768, 772, 775, 1036], "onlin": [153, 268, 781, 886, 1099], "rerun": [153, 268, 781, 886, 1099], "conveni": [153, 268, 781, 886, 1099], "evalu": [154, 156, 183, 268, 279, 293, 323, 395, 416, 417, 449, 460, 486, 588, 590, 594, 598, 611, 612, 615, 624, 625, 638, 641, 647, 652, 653, 655, 656, 665, 696, 706, 708, 709, 772, 792, 825, 926, 927, 1090, 1099], "Not": [154, 268, 404, 406, 460, 665, 694, 772], "fillnullstrategi": [155, 268, 382, 665, 695, 772, 889, 1099], "matches_supertyp": [155, 268, 695, 772], "forward": [155, 183, 268, 351, 382, 388, 665, 695, 709, 772, 858, 889, 1099], "consecut": [155, 268, 299, 382, 388, 532, 665, 695, 772, 889, 1028, 1099], "fill_nan": [155, 268, 665, 772, 1099], "OR": [156, 268, 590, 591, 696, 772, 775], "reduct": [159, 268], "supercast": [159, 268], "parent": [159, 268], "rule": [159, 268], "arithmet": [159, 268], "zip_with": [159, 268, 1099], "foo11": [159, 268], "bar22": [159, 268], "null_equ": [160, 268, 1009, 1099], "retriev": [161, 268, 418, 419, 568, 928, 929, 1064], "max_items_per_column": [163, 268], "max_colname_length": [163, 268], "return_as_str": [163, 268, 472], "preview": [163, 268], "cleanli": [163, 268], "few": [163, 268], "exce": [163, 268], "trail": [163, 268, 552, 558, 1048, 1054], "ellipsi": [163, 268], "head": [163, 185, 222, 268, 281, 415, 665, 712, 772, 924, 1070, 1099], "tail": [163, 171, 268, 281, 526, 665, 772, 896, 1022, 1099], "more_bi": [164, 167, 196, 219, 268, 529, 665, 699, 702, 737, 772], "groupbi": [164, 268, 282, 459, 461, 592, 630, 665, 772], "consist": [164, 167, 196, 268, 559, 699, 702, 772, 781, 886, 1055, 1099], "regardless": [164, 167, 268, 543, 655, 1039], "agg": [164, 165, 166, 168, 268, 276, 383, 385, 461, 528, 529, 574, 586, 604, 630, 665, 685, 691, 693, 699, 700, 701, 703, 704, 723, 731, 735, 772, 775], "Or": [164, 165, 166, 183, 219, 239, 247, 268, 487, 529, 655, 661, 665, 699, 700, 701, 709, 737, 753, 772], "index_column": [165, 166, 168, 169, 268, 700, 701, 703, 704, 772], "timedelta": [165, 166, 168, 169, 183, 239, 268, 336, 355, 356, 359, 366, 368, 506, 507, 508, 509, 510, 512, 513, 514, 611, 612, 652, 653, 665, 700, 701, 703, 704, 709, 772, 775, 847, 849, 854, 862, 866, 873, 976, 977, 1099], "period": [165, 166, 168, 169, 215, 216, 268, 359, 366, 374, 375, 376, 442, 488, 519, 520, 611, 612, 652, 653, 665, 700, 701, 703, 704, 733, 734, 772, 866, 873, 881, 882, 883, 952, 981, 1014, 1015, 1099], "include_boundari": [165, 168, 268, 700, 703, 772], "closedinterv": [165, 166, 168, 169, 268, 397, 506, 507, 508, 509, 510, 512, 513, 514, 611, 612, 652, 653, 665, 700, 701, 703, 704, 772, 901, 1099], "start_bi": [165, 168, 268, 700, 703, 772], "startbi": [165, 168, 268, 700, 703, 772], "window": [165, 166, 168, 169, 268, 323, 359, 366, 374, 375, 376, 459, 461, 487, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 601, 642, 643, 665, 700, 701, 703, 704, 772, 825, 866, 873, 881, 882, 883, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1099], "check_sort": [165, 166, 168, 169, 268, 700, 701, 703, 704, 772], "dynamicgroupbi": [165, 168, 268], "member": [165, 268, 700, 772, 908, 1099], "seen": [165, 268, 299, 388, 665, 700, 772], "roll": [165, 166, 169, 268, 351, 352, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 601, 642, 643, 665, 700, 701, 704, 772, 858, 859, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1099], "slot": [165, 268, 323, 326, 423, 665, 700, 772, 825, 828, 933, 1099], "interv": [165, 166, 168, 169, 239, 268, 324, 359, 366, 397, 493, 506, 507, 508, 509, 510, 512, 513, 514, 611, 612, 652, 653, 665, 700, 701, 703, 704, 772, 826, 839, 842, 843, 850, 852, 855, 857, 860, 863, 864, 866, 871, 873, 874, 901, 985, 1099], "1n": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "1u": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "microsecond": [165, 166, 180, 183, 207, 208, 226, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 613, 614, 651, 665, 700, 701, 709, 723, 772, 775, 862, 866, 873], "1m": [165, 166, 183, 239, 268, 344, 345, 347, 354, 355, 359, 361, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 851, 853, 861, 862, 866, 868, 873], "minut": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 613, 614, 651, 652, 665, 700, 701, 709, 772, 775, 862, 866, 873], "1h": [165, 166, 183, 239, 268, 338, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 652, 653, 665, 700, 701, 709, 772, 841, 843, 862, 866, 873], "hour": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 613, 614, 651, 652, 665, 700, 701, 709, 772, 775, 862, 866, 873], "1d": [165, 166, 183, 239, 268, 331, 341, 349, 355, 359, 366, 369, 506, 507, 508, 509, 510, 512, 513, 514, 611, 612, 614, 627, 665, 700, 701, 709, 772, 775, 834, 842, 844, 849, 856, 862, 866, 871, 873], "1w": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "week": [165, 166, 168, 183, 239, 268, 355, 359, 366, 368, 506, 507, 508, 509, 510, 512, 513, 514, 614, 665, 700, 701, 703, 709, 772, 775, 862, 866, 873, 875], "1mo": [165, 166, 183, 239, 268, 333, 337, 351, 352, 355, 358, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 611, 612, 665, 700, 701, 709, 772, 836, 840, 857, 858, 859, 862, 863, 864, 865, 866, 873, 874], "month": [165, 166, 183, 239, 268, 336, 351, 352, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 610, 611, 612, 613, 614, 665, 700, 701, 709, 772, 839, 858, 859, 862, 866, 873], "1q": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "quarter": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "1y": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 611, 665, 700, 701, 709, 772, 862, 866, 873], "1i": [165, 166, 183, 239, 268, 355, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862], "3d12h4m25": [165, 166, 183, 239, 268, 359, 366, 700, 701, 709, 772, 866, 873], "suffix": [165, 166, 182, 183, 211, 239, 243, 247, 268, 277, 303, 355, 359, 366, 404, 406, 407, 408, 458, 487, 491, 501, 506, 507, 508, 509, 510, 512, 513, 514, 537, 665, 700, 701, 708, 709, 729, 748, 750, 753, 772, 775, 801, 862, 866, 873, 1033], "_satur": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 611, 612, 665, 700, 701, 709, 772, 862, 866, 873], "satur": [165, 166, 183, 239, 268, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 862, 866, 873], "28": [165, 166, 183, 225, 239, 268, 275, 355, 358, 359, 366, 369, 506, 507, 508, 509, 510, 512, 513, 514, 611, 665, 700, 701, 709, 772, 862, 865, 866, 873, 876, 1107], "correspond": [165, 166, 183, 229, 239, 268, 343, 355, 359, 366, 461, 496, 503, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 701, 709, 772, 846, 862, 866, 873, 987, 994, 1099], "due": [165, 166, 183, 208, 239, 268, 277, 307, 338, 355, 359, 366, 410, 491, 506, 507, 508, 509, 510, 512, 513, 514, 571, 665, 700, 701, 709, 772, 804, 841, 862, 866, 873, 1099], "daylight": [165, 166, 183, 239, 268, 330, 338, 355, 359, 366, 506, 507, 508, 509, 510, 512, 513, 514, 614, 665, 700, 701, 709, 772, 841, 862, 866, 873], "10i": [165, 166, 268, 700, 701, 772], "ascend": [165, 166, 168, 169, 268, 700, 701, 703, 704, 772], "dynam": [165, 168, 268, 449, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 703, 772, 959], "matter": [165, 166, 168, 169, 180, 207, 208, 226, 268, 700, 701, 703, 704, 772], "_lower_bound": [165, 168, 268, 700, 703, 772], "_upper_bound": [165, 168, 268, 700, 703, 772], "harder": [165, 168, 268, 700, 703, 772], "tempor": [165, 166, 168, 169, 180, 207, 208, 226, 268, 397, 506, 507, 508, 509, 510, 512, 513, 514, 665, 676, 700, 701, 703, 704, 772, 775, 901, 918, 1099], "inclus": [165, 166, 168, 169, 268, 397, 506, 507, 508, 509, 510, 512, 513, 514, 554, 555, 594, 611, 612, 624, 625, 652, 653, 665, 700, 701, 703, 704, 772, 901, 1050, 1051, 1099], "datapoint": [165, 168, 268, 700, 703, 772], "mondai": [165, 168, 268, 366, 368, 700, 703, 772, 873, 875], "tuesdai": [165, 168, 268, 700, 703, 772], "wednesdai": [165, 168, 268, 700, 703, 772], "thursdai": [165, 168, 268, 700, 703, 772], "fridai": [165, 168, 268, 700, 703, 772], "saturdai": [165, 168, 268, 700, 703, 772], "sundai": [165, 168, 268, 368, 700, 703, 772, 875], "weekli": [165, 168, 268, 366, 700, 703, 772, 873], "sorted": [165, 166, 168, 169, 268, 700, 701, 703, 704, 772], "metadata": [165, 166, 168, 169, 268, 700, 701, 703, 704, 772], "verifi": [165, 166, 168, 169, 268, 700, 701, 703, 704, 772], "incorrectli": [165, 166, 168, 169, 268, 449, 700, 701, 703, 704, 772], "incorrect": [165, 166, 168, 169, 268, 369, 518, 665, 700, 701, 703, 704, 755, 760, 772, 876, 1012, 1099], "re": [165, 229, 268, 351, 352, 700, 772, 858, 859, 1106], "come": [165, 268, 351, 352, 411, 665, 677, 700, 771, 772, 858, 859, 922, 1099], "set_index": [165, 268, 700, 772], "resampl": [165, 268, 700, 772], "reset_index": [165, 268, 700, 772], "though": [165, 268, 661, 700, 772], "evenli": [165, 268, 700, 772], "upsampl": [165, 268, 700, 772], "datetime_rang": [165, 268, 331, 333, 337, 341, 344, 345, 347, 349, 351, 352, 354, 355, 358, 359, 361, 366, 369, 506, 507, 509, 512, 513, 514, 665, 700, 772, 833, 834, 836, 840, 841, 842, 843, 844, 849, 850, 851, 852, 853, 855, 856, 858, 859, 860, 861, 862, 865, 866, 868, 871, 873], "30m": [165, 268, 359, 366, 700, 772, 866, 873], "time_min": [165, 268, 700, 772], "time_max": [165, 268, 700, 772], "23": [165, 166, 268, 332, 336, 340, 348, 356, 359, 368, 506, 507, 509, 512, 513, 514, 613, 614, 651, 652, 653, 665, 700, 701, 772, 775, 835, 843, 1107], "boundari": [165, 268, 312, 313, 314, 366, 665, 700, 772, 815, 816, 817, 873, 897, 1099], "time_count": [165, 268, 700, 772], "_lower_boundari": [165, 268, 700, 772], "_upper_boundari": [165, 268, 700, 772], "lower_bound": [165, 268, 312, 314, 397, 665, 700, 772, 815, 817, 901, 1086, 1099], "upper_bound": [165, 268, 312, 313, 397, 449, 665, 700, 772, 815, 816, 901, 965, 1099], "time_agg_list": [165, 268, 700, 772], "bys": [165, 268, 700, 772], "int_rang": [165, 237, 254, 268, 594, 700, 714, 760, 772], "2i": [165, 268, 700, 772], "3i": [165, 268, 700, 772], "a_agg_list": [165, 268, 700, 772], "rollinggroupbi": [166, 169, 268], "group_by_dynam": [166, 268, 701, 703, 772], "t_0": [166, 268, 506, 507, 508, 509, 510, 512, 513, 514, 665, 701, 772], "t_1": [166, 268, 506, 507, 508, 509, 510, 512, 513, 514, 665, 701, 772], "t_n": [166, 268, 506, 507, 508, 509, 510, 512, 513, 514, 665, 701, 772], "43": [166, 268, 322, 513, 665, 701, 772], "strptime": [166, 268, 358, 701, 772, 865], "set_sort": [166, 183, 239, 268, 665, 701, 709, 772, 1099], "2d": [166, 229, 268, 355, 627, 701, 772, 833, 839], "sum_a": [166, 268, 701, 772], "min_a": [166, 268, 701, 772], "max_a": [166, 268, 701, 772], "group_bi": [167, 194, 267, 268, 276, 383, 385, 461, 528, 529, 574, 586, 604, 630, 665, 685, 691, 693, 702, 723, 735, 771, 772, 775], "group_by_rol": [168, 169, 268, 506, 507, 508, 509, 510, 512, 513, 514, 665, 700, 704, 772], "seed_1": [170, 268, 392, 665, 895, 1099], "seed_2": [170, 268, 392, 665, 895, 1099], "seed_3": [170, 268, 392, 665, 895, 1099], "hash": [170, 268, 665, 1099], "u64": [170, 268, 392, 498, 665, 723, 772, 895, 1099], "10783150408545073287": [170, 268], "1438741209321515184": [170, 268], "10047419486152048166": [170, 268], "2047317070637311557": [170, 268], "ab": [171, 185, 222, 243, 268, 568, 569, 665, 748, 772, 896, 924, 1070, 1099], "grown": [173, 268], "intermedi": [175, 268, 707, 772, 1107], "linear": [175, 200, 260, 268, 396, 420, 464, 494, 510, 601, 602, 639, 665, 707, 724, 766, 772, 900, 930, 986, 1001, 1099], "mask": [176, 178, 268, 301, 398, 400, 403, 409, 533, 535, 665, 799, 890, 901, 903, 906, 911, 919, 982, 983, 1010, 1029, 1031, 1090, 1099], "visual": [176, 178, 268], "scalar": [179, 186, 206, 268, 517, 592, 627, 630, 665, 921, 1008, 1099], "With": [179, 268, 506, 507, 508, 509, 510, 512, 513, 514, 665, 921, 1099], "buffer_s": [180, 268], "veri": [180, 234, 268, 461, 665, 684, 760, 772, 818, 1099], "fit": [180, 217, 237, 268, 521, 641, 665, 1016, 1017, 1099], "signific": [180, 186, 268, 282, 461, 665, 967, 1099], "4x": [180, 268], "materialis": [180, 181, 206, 207, 208, 268], "rows_by_kei": [180, 207, 268], "awar": [180, 207, 208, 226, 268, 1057], "iter_row": [181, 206, 207, 208, 268], "17_500": [181, 268], "klmnoopqrstuvwxyz": [181, 268], "__name__": [181, 268], "7500": [181, 268], "15_000": [181, 268], "record_batch": [181, 268], "to_arrow": [181, 268, 1099], "to_batch": [181, 268], "date32": [181, 268], "large_str": [181, 224, 230, 268], "15000": [181, 268], "2500": [181, 268], "left_on": [182, 183, 268, 708, 709, 772], "right_on": [182, 183, 268, 708, 709, 772], "_right": [182, 183, 268, 708, 709, 772], "joinvalid": [182, 268, 708, 772], "semi": [182, 268, 708, 772], "anti": [182, 268, 708, 760, 772, 1010, 1011, 1099], "cross": [182, 268, 366, 708, 772, 873], "many_to_mani": [182, 268, 708, 772], "one_to_on": [182, 268, 708, 772], "one_to_mani": [182, 268, 708, 772], "many_to_on": [182, 268, 708, 772], "join_asof": [182, 268, 708, 772], "stringcach": [182, 268, 676, 807, 809], "other_df": [182, 268], "by_left": [183, 268, 709, 772], "by_right": [183, 268, 709, 772], "asofjoinstrategi": [183, 268, 709, 772], "allow_parallel": [183, 268, 708, 709, 772], "force_parallel": [183, 268, 708, 709, 772], "asof": [183, 268, 709, 772], "rather": [183, 268, 472, 493, 503, 567, 665, 709, 772, 985, 994, 1063, 1099], "asof_join": [183, 268], "distanc": [183, 268, 709, 772, 897, 1099], "plan": [183, 184, 268, 682, 687, 691, 698, 708, 709, 725, 731, 735, 752, 772], "forc": [183, 186, 254, 268, 708, 709, 760, 772, 967, 1099], "gdp": [183, 268, 709, 772], "2016": [183, 268, 709, 772], "2017": [183, 268, 709, 772], "2018": [183, 268, 358, 709, 772, 865], "2019": [183, 268, 709, 772], "jan": [183, 268, 709, 772], "1st": [183, 268, 611, 709, 772], "4164": [183, 268, 709, 772], "4411": [183, 268, 709, 772], "4566": [183, 268, 709, 772], "4696": [183, 268, 709, 772], "popul": [183, 268, 709, 772], "12th": [183, 268, 709, 772], "82": [183, 268, 709, 772], "66": [183, 268, 513, 587, 665, 709, 772, 1001, 1099], "83": [183, 268, 709, 772], "52": [183, 243, 268, 367, 515, 665, 709, 748, 772], "request": [184, 268], "describe_plan": [184, 268], "unoptim": [184, 268], "describe_optimized_plan": [184, 268], "show_graph": [184, 268, 772], "un": [184, 268], "graphviz": [184, 268, 735, 772], "much": [186, 237, 254, 268, 323, 448, 461, 630, 665, 760, 825, 958, 967, 1099], "almost": [186, 254, 268, 559, 560, 561, 611, 772, 967, 1055, 1056, 1057, 1099], "_significantly_": [186, 254, 268, 967, 1099], "intens": [186, 254, 268, 487, 665, 967, 1099], "materi": [186, 254, 268, 723, 760, 772, 775, 967, 1099], "parallelis": [186, 254, 268, 967, 1099], "achiev": [186, 254, 268, 461, 665, 826, 967, 985, 1099], "best": [186, 254, 268, 461, 665, 967, 1099], "arbitrarili": [186, 268], "rearrang": [186, 268], "transform": [186, 268, 459, 563, 565, 566, 665], "lru_cach": [186, 268, 461, 665, 967, 1099], "column_1": [186, 234, 268], "better": [186, 229, 254, 268, 461, 665, 760, 1010, 1011, 1099], "axi": [187, 188, 190, 192, 221, 268, 595, 596, 718, 772], "null_strategi": [188, 221, 268], "nullstrategi": [188, 221, 268], "propag": [188, 221, 268, 373, 480, 481, 483, 665, 976, 977, 1099], "spam": [188, 268, 540, 1036], "id_var": [190, 268, 718, 772], "value_var": [190, 268, 718, 772], "variable_nam": [190, 268, 718, 772], "value_nam": [190, 268, 718, 772], "unpivot": [190, 268, 718, 772], "leav": [190, 268, 449, 718, 772], "massag": [190, 268, 718, 772], "measur": [190, 268, 718, 772], "merg": [191, 268, 719, 772], "caller": [191, 268, 449, 714, 719, 755, 760, 772], "respons": [191, 268, 719, 772], "steve": [191, 268, 719, 772], "elis": [191, 268, 719, 772], "bob": [191, 268, 719, 772], "ag": [191, 268, 719, 772], "anna": [191, 268, 719, 772], "megan": [191, 268, 719, 772], "thoma": [191, 268, 719, 772], "21": [191, 221, 268, 506, 507, 509, 512, 513, 514, 620, 665, 719, 772, 775], "what": [194, 268, 1080, 1089, 1099], "pack": [194, 268], "expr_unique_subset": [194, 268], "df_nuniqu": [194, 268], "df_agg_nuniqu": [194, 268], "include_kei": [196, 208, 268], "offer": [197, 268, 489, 665, 722, 772], "fulli": [197, 209, 268], "cast_str_to_int": [197, 268, 722, 772], "col_nam": [197, 268, 722, 772], "tdf": [197, 268, 722, 772], "aggregate_funct": [198, 268], "pivotagg": [198, 268], "sort_column": [198, 268], "predefin": [198, 268], "median": [198, 268, 382, 508, 665, 750, 772, 999, 1099], "predict": [198, 201, 239, 268], "transpos": [198, 268], "discoveri": [198, 268], "col1": [198, 234, 268, 772, 1107], "col2": [198, 234, 268, 772, 1107], "col3": [198, 268, 1107], "tanh": [198, 268, 665, 1099], "998347": [198, 268], "964028": [198, 268], "999954": [198, 268], "interpol": [200, 260, 268, 382, 464, 494, 510, 639, 665, 724, 766, 772, 986, 1001, 1099], "rollinginterpolationmethod": [200, 260, 268, 494, 510, 639, 665, 724, 766, 772, 986, 1001, 1099], "midpoint": [200, 260, 268, 494, 510, 639, 665, 724, 766, 772, 986, 1001, 1099], "by_pred": [206, 268], "accord": [206, 268, 460, 493, 611, 665, 846, 985, 1099], "mutual": [206, 268], "exclus": [206, 268, 587, 594, 624, 625, 665], "addition": [206, 268], "clariti": [206, 268], "toomanyrowsreturnederror": [206, 268, 676], "norowsreturnederror": [206, 268, 676], "inherit": [206, 268], "rowserror": [206, 268, 676], "high": [208, 268, 493, 665, 985, 1099], "cost": [208, 268], "reoconstruct": [208, 268], "defaultdict": [208, 268], "assum": [208, 268, 713, 714, 755, 760, 772], "with_replac": [209, 268, 516, 665, 1007, 1099], "modul": [209, 268, 664, 775, 1007, 1018, 1099, 1107], "named_expr": [211, 212, 243, 244, 268, 644, 647, 729, 730, 748, 749, 772], "threshold": [211, 268, 729, 772], "set_auto_structifi": [211, 243, 268, 729, 748, 772], "auto_structifi": [211, 243, 268, 729, 748, 772], "is_odd": [211, 268, 729, 772], "_is_odd": [211, 268, 729, 772], "sequenti": [212, 244, 268, 730, 749, 772], "shift_and_fil": [215, 268, 665, 772, 1099], "fill_valu": [216, 237, 268, 520, 665, 734, 772, 1015, 1099], "shift": [216, 268, 326, 423, 488, 520, 601, 665, 734, 772, 828, 933, 981, 1015, 1099], "shrink": [217, 268, 521, 665, 1016, 1017, 1099], "hold": [217, 268], "ddof": [220, 240, 268, 512, 514, 531, 585, 603, 642, 643, 646, 654, 665, 738, 746, 772, 1003, 1005, 1026, 1088, 1099], "deviat": [220, 268, 375, 512, 531, 646, 665, 738, 772, 882, 1026, 1099], "degre": [220, 240, 268, 495, 512, 514, 531, 585, 596, 603, 642, 643, 646, 654, 665, 738, 746, 772, 1003, 1005, 1026, 1088, 1099], "freedom": [220, 240, 268, 512, 514, 531, 585, 603, 642, 643, 646, 654, 665, 738, 746, 772, 1003, 1005, 1026, 1088, 1099], "divisor": [220, 240, 268, 512, 514, 531, 585, 603, 642, 643, 646, 654, 665, 738, 746, 772, 1003, 1005, 1026, 1088, 1099], "816497": [220, 268], "16a": [221, 268], "27b": [221, 268], "38c": [221, 268], "nth": [223, 268, 556, 575, 665, 741, 772, 1052, 1072, 1099], "mostli": [224, 268, 383, 665], "categoricaltyp": [224, 268], "as_seri": [225, 268, 826, 985, 1099], "fruit": [225, 268, 501, 537, 557, 665, 1033, 1053], "car": [225, 268, 501, 665], "beetl": [225, 268, 501, 665], "audi": [225, 268, 501, 665], "300": [225, 268, 997, 998, 1000, 1099], "drop_first": [227, 268], "dummi": [227, 268, 1076, 1099], "foo_1": [227, 268], "foo_2": [227, 268], "bar_3": [227, 268], "bar_4": [227, 268], "ham_a": [227, 268], "ham_b": [227, 268], "instantiat": [228, 268, 1078, 1099], "from_repr": [228, 268, 1078, 1099], "df_from_str_repr": [228, 268], "eval": [228, 268, 615, 1078, 1099], "indexord": [229, 268], "fortran": [229, 268], "downstream": [229, 268, 518, 665, 1012, 1099], "applic": [229, 268, 461, 506, 507, 508, 509, 510, 512, 513, 514, 665], "prevent": [229, 268, 277, 321, 322, 410, 572, 665, 772, 823, 824, 1069, 1099], "reshap": [229, 268, 426, 665, 936, 1099], "ll": [229, 268], "u1": [229, 268], "f4": [229, 268], "view": [229, 268, 461, 665, 1080, 1099], "recarrai": [229, 268], "rec": [229, 268], "use_pyarrow_extension_arrai": [230, 268, 1081, 1099], "extens": [230, 268, 1081, 1099], "trigger": [230, 268, 1081, 1099], "sent": [230, 268, 1080, 1081, 1099], "pandas_df1": [230, 268], "pandas_df2": [230, 268], "pandas_df2_pa": [230, 268], "na": [230, 268, 1081, 1099], "four": [232, 268], "five": [232, 268, 1107], "bottom_k": [233, 268, 579, 665, 742, 772, 1083, 1099], "include_head": [234, 268], "header_nam": [234, 268], "column_nam": [234, 268], "perhap": [234, 268], "column_2": [234, 268], "name_gener": [234, 268], "base_nam": [234, 268], "my_column_": [234, 268], "my_column_0": [234, 268], "my_column_1": [234, 268], "my_column_2": [234, 268], "new_id": [234, 268], "uniquekeepstrategi": [235, 268, 743, 772], "kept": [235, 268, 743, 772], "decompos": [236, 268, 744, 772], "t_a": [236, 268, 744, 772], "t_b": [236, 268, 744, 772], "t_c": [236, 268, 744, 772], "t_d": [236, 268, 744, 772], "womp": [236, 268, 744, 772], "t_": [236, 268, 744, 772], "t_struct": [236, 268, 744, 772], "step": [237, 268, 594, 624, 625], "unstackdirect": [237, 268], "pivot": [237, 268], "phase": [237, 268], "subject": [237, 268], "ascii_uppercas": [237, 268], "h": [237, 268, 275, 362, 365, 521, 559, 561, 564, 665, 1055, 1057, 1060], "x_0": [237, 268, 374, 375, 376, 665, 881, 882, 883, 1099], "x_1": [237, 268], "y_0": [237, 268, 374, 375, 376, 665, 881, 882, 883, 1099], "y_1": [237, 268], "z_0": [237, 268], "z_1": [237, 268], "syntact": [238, 268, 588, 590, 608, 616, 617, 621, 626, 631, 635, 638, 639, 644, 648, 656, 745, 772, 1025, 1099], "sugar": [238, 268, 588, 590, 608, 616, 617, 621, 626, 631, 635, 638, 639, 644, 648, 656, 745, 772, 1025, 1099], "coalesc": [238, 268, 559, 745, 772, 1055], "400": [238, 268, 745, 772, 997, 998, 1000, 1099], "600": [238, 268, 745, 772, 775], "700": [238, 268, 745, 772], "new_df": [238, 268, 745, 772], "time_column": [239, 268], "frequenc": [239, 268], "date_rang": [239, 268, 336, 339, 356, 364, 368, 839, 857, 863, 864, 874, 875], "forward_fil": [239, 268, 319, 322, 665], "varianc": [240, 268, 376, 411, 514, 585, 654, 665, 746, 772, 883, 922, 1005, 1088, 1099], "grow": [241, 268], "not_": [243, 268, 405, 665, 748, 772, 1099], "not_c": [243, 268, 748, 772], "diff": [243, 268, 337, 341, 345, 347, 349, 354, 361, 438, 665, 748, 772, 840, 844, 851, 853, 856, 861, 868, 948, 1099], "_diff": [243, 268, 748, 772], "row_nr": [245, 268, 460, 506, 507, 509, 512, 513, 514, 665, 751, 772, 1011, 1099], "named_agg": [247, 753], "_sum": [247, 753], "_mean_squar": [247, 753], "b_sum": [247, 753], "c_mean_squar": [247, 753], "sub": [249, 254, 295, 296, 297, 665, 794, 795, 796], "map_group": [249, 592, 755], "deem": [250, 317, 604, 665, 756], "nr": [252, 262, 758, 768], "triangl": [254, 760], "group_df": [254, 760], "maxim": [255, 290, 665, 761, 789, 1099], "833333": [256, 762], "minim": [258, 291, 419, 521, 529, 665, 764, 790, 929, 971, 1016, 1099], "overview": [268, 665, 676, 772, 1099, 1107], "frameinittyp": [268, 772], "entri": [268, 772, 1106], "mydatafram": 268, "df4": 268, "df5": 268, "df6": 268, "approx_uniqu": [268, 772], "strict": [268, 301, 307, 533, 535, 548, 559, 560, 561, 564, 665, 772, 799, 804, 1009, 1029, 1031, 1044, 1055, 1056, 1057, 1060, 1099], "overflow": [268, 307, 321, 322, 548, 572, 665, 772, 804, 823, 824, 1044, 1069, 1099], "to_dict": [268, 772], "corr": 268, "drop_in_plac": 268, "drop_nul": [268, 328, 665, 772, 830, 1099], "estimated_s": [268, 1099], "explod": [268, 385, 487, 500, 665, 772, 991, 1099], "find_idx_by_nam": 268, "fold": [268, 470, 600, 606, 607, 640], "frame_equ": [268, 366], "groupby_dynam": [268, 772], "groupby_rol": [268, 772], "hash_row": 268, "hstack": 268, "insert_at_idx": 268, "is_dupl": [268, 665, 1099], "is_empti": [268, 1099], "is_uniqu": [268, 665, 1099], "iter_slic": 268, "melt": [268, 772], "merge_sort": [268, 772], "n_uniqu": [268, 665, 1099], "pipe": [268, 665, 772], "quantil": [268, 493, 510, 665, 772, 985, 1001, 1099], "replace_at_idx": 268, "select_seq": [268, 772], "shrink_to_fit": [268, 1099], "take_everi": [268, 665, 772, 1099], "to_dummi": [268, 1099], "to_numpi": [268, 459, 665, 1099], "to_panda": [268, 1099], "to_struct": [268, 540], "unnest": [268, 324, 493, 502, 540, 541, 555, 556, 569, 665, 772, 826, 959, 985, 993, 1051, 1052, 1099], "unstack": 268, "with_columns_seq": [268, 772], "write_avro": 268, "write_databas": 268, "write_delta": 268, "write_excel": 268, "write_ipc_stream": 268, "write_json": [268, 772], "write_parquet": 268, "cumprod": [275, 665, 1099], "ghi": [275, 540, 665, 775, 1036], "94": [276, 665], "map_alia": [277, 665], "to_uppercas": [277, 541, 665], "ignore_nul": [278, 280, 374, 375, 376, 588, 590, 665, 779, 780, 881, 882, 883, 1089, 1099], "confus": [278, 404, 406, 665], "kleen": [278, 280, 588, 590, 665, 779, 780, 1099], "bitwis": [279, 486, 587, 588, 589, 590, 591, 665], "upcast": [281, 665], "skip_nul": [282, 461, 665, 782, 967, 1099], "pass_nam": [282, 461, 665], "mapelementsstrategi": [282, 461, 665], "thread_loc": [282, 461, 665], "map_el": [282, 459, 587, 665, 782, 1099], "unknown": [282, 460, 461, 539, 627, 665, 1035], "stage": [282, 665], "code": [282, 300, 302, 303, 304, 461, 518, 665, 711, 772, 1012, 1099], "amount": [282, 461, 614, 665], "releas": [282, 461, 665, 772, 1107], "gil": [282, 461, 665], "invers": [284, 285, 286, 287, 288, 289, 665, 783, 784, 785, 786, 787, 788, 1099], "cosin": [284, 285, 315, 316, 459, 665, 783, 784, 819, 820, 1099], "570796": [284, 286, 665, 783, 785, 1099], "hyperbol": [285, 287, 289, 316, 525, 577, 665, 784, 786, 788, 820, 1021, 1074, 1099], "sine": [286, 287, 459, 524, 525, 665, 785, 786, 1020, 1021, 1099], "881374": [287, 665, 786, 1099], "tangent": [288, 289, 576, 577, 665, 787, 788, 1073, 1074, 1099], "785398": [288, 595, 596, 665, 787, 1099], "arg_wher": [293, 665], "substr": [300, 303, 304, 533, 537, 549, 550, 554, 555, 556, 557, 775, 798, 801, 802, 1029, 1033, 1045, 1046, 1050, 1051, 1052, 1053], "ends_with": [300, 304, 533, 557, 775, 1053], "x00": [300, 302, 303, 304], "xff": [300, 302, 303, 304], "hex": [300, 301, 302, 303, 304, 535, 536, 548, 799, 800, 1031, 1032, 1044], "code_encoded_hex": [300, 302, 303, 304], "contains_ff": [300, 303, 304], "starts_with_ff": [300, 303, 304], "ends_with_ff": [300, 303, 304], "000000": [300, 302, 303, 304], "ffff00": [300, 302, 303, 304], "0000ff": [300, 302, 303, 304], "transferencod": [301, 302, 535, 536, 799, 800, 1031, 1032], "base64": [301, 302, 535, 536, 799, 800, 1031, 1032], "anywher": [303, 304, 559, 560, 561, 1055, 1056, 1057], "complex": [305, 323, 579, 665, 803, 825, 1083, 1099], "frac": [305, 374, 375, 376, 526, 579, 665, 803, 881, 882, 883, 1022, 1083, 1099], "supersed": [306, 665], "to_fram": [308, 339, 359, 364, 366, 559, 826, 985, 1010, 1011, 1051, 1052, 1055, 1099], "categoricalord": [309, 808], "lexic": [309, 775, 808, 810], "259921": [310, 665, 811, 1099], "587401": [310, 665], "foo_clip": [312, 313, 314, 665], "clip": [313, 314, 665, 816, 817, 1099], "543081": [316, 665, 820, 1099], "cumul": [318, 319, 320, 321, 322, 606, 607, 608, 609, 665, 821, 822, 823, 824, 1099], "a_revers": [318, 319, 320, 321, 322, 458, 501, 571, 665], "value_cummax": [319, 665], "value_cummax_all_fil": [319, 665], "value_cumsum": [322, 665], "value_cumsum_all_fil": [322, 665], "min_period": [323, 374, 375, 376, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 642, 643, 665, 825, 881, 882, 883, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1099], "slide": [323, 665, 825, 1099], "realli": [323, 665, 825, 1099], "visit": [323, 665, 825, 1099], "label": [324, 493, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 665, 723, 772, 826, 985, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1099], "left_clos": [324, 493, 665, 826, 985, 1099], "include_break": [324, 493, 665, 826, 985, 1099], "bin": [324, 493, 548, 587, 658, 665, 826, 897, 985, 1044, 1093, 1099], "discret": [324, 326, 371, 423, 438, 493, 665, 826, 828, 879, 897, 933, 948, 985, 1099], "plu": [324, 454, 665, 826, 964, 985, 1099], "endpoint": [324, 493, 506, 507, 508, 509, 510, 512, 513, 514, 665, 826, 985, 1099], "observ": [324, 374, 375, 376, 493, 665, 826, 881, 882, 883, 985, 1099], "fall": [324, 493, 503, 665, 826, 901, 985, 994, 1099], "qcut": [324, 665, 826, 1099], "breakpoint": [324, 493, 665, 826, 985, 1099], "brk": [324, 493, 665], "foo_bin": [324, 493, 665], "radian": [325, 595, 665], "pi": [325, 665, 819, 1020, 1073, 1099], "720": [325, 495, 665], "540": [325, 495, 665], "360": [325, 495, 665], "180": [325, 495, 665], "null_behavior": [326, 423, 665, 828, 933, 1099], "nullbehavior": [326, 423, 665, 828, 933, 1099], "th": [326, 423, 438, 526, 665, 828, 933, 948, 1022, 1099], "drop_nan": [329, 665, 831, 1099], "utc": [330, 333, 338, 358, 559, 561, 775, 833, 836, 841, 865, 1055, 1057], "usual": [330, 833], "vari": [330, 611, 833, 1107], "rare": [330, 833], "countri": [330, 833], "switch": [330, 833], "samoa": [330, 833], "apia": [330, 833], "did": [330, 833], "2011": [330, 833], "dst_offset": [330, 366, 833, 873], "2012": [330, 833], "replace_time_zon": [330, 338, 837, 838, 870], "pacif": [330, 833], "11h": [330, 833], "13h": [330, 833], "lose": [331, 834], "2001": [331, 336, 339, 340, 342, 348, 350, 355, 356, 357, 359, 364, 366, 367, 368, 369, 506, 507, 509, 512, 513, 514, 559, 665, 775, 834, 839, 842, 843, 845, 847, 848, 849, 850, 852, 854, 855, 857, 860, 862, 863, 864, 866, 871, 873, 874, 875, 876, 877, 1055], "time_unit_m": [331, 834], "time_unit_n": [331, 834], "naiv": [332, 835, 1057], "compon": [332, 360, 559, 561, 614, 835, 867, 1055, 1057], "resolv": 332, "tm": [332, 775], "456000": [332, 835], "101000": 332, "456": [332, 775, 835, 1077, 1099], "07": [332, 358, 359, 366, 559, 611, 620, 775, 835, 865, 1055], "101": [332, 548, 1044, 1107], "d1": 332, "d2": 332, "d3": 332, "europ": [333, 338, 358, 366, 836, 841, 865, 873], "london": [333, 338, 358, 366, 836, 841, 865, 873], "gmt": [333, 338, 358, 366, 836, 841, 865, 873], "bst": [333, 338, 358, 366, 836, 841, 865, 873], "weekdai": [336, 356], "ordinal_dai": [336, 368], "day_of_month": [336, 356, 368], "day_of_year": [336, 356, 368], "356": [336, 356, 368], "357": [336, 356, 368], "358": [336, 356, 368], "359": [336, 356, 368], "days_diff": 337, "base_utc_offset": [338, 841], "26": [338, 367, 841], "0m": [338, 841], "epochtimeunit": [339, 620, 842], "unix": [339, 620, 842], "epoch_n": [339, 842], "epoch_": [339, 842], "978307200000000": [339, 364, 842, 871], "978307200": [339, 842], "978393600000000": [339, 364, 842, 871], "978393600": [339, 842], "978480000000000": [339, 364, 842, 871], "978480000": [339, 842], "2010": [340, 348, 775], "hours_diff": 341, "leap": [342, 355, 611, 845, 862], "2002": [342, 355, 845, 862, 877], "iso": [343, 367, 368, 846, 874, 875], "1977": [343, 370], "1978": [343, 370], "1979": [343, 370], "calendar_year": [343, 370], "1976": [343, 370], "1_001": [344, 345, 347, 354], "002": [344, 345, 347, 354, 614, 851, 853, 861], "003": [344, 345, 347, 354], "3000": 344, "997": [344, 345, 347, 354], "997000": 344, "998": [344, 345, 347, 354], "998000": 344, "999": [344, 345, 347, 354, 775, 1107], "999000": [344, 775], "microseconds_diff": 345, "milliseconds_diff": 347, "minutes_diff": 349, "1440": [349, 856], "think": [351, 352, 858, 859], "vectoris": [351, 352, 858, 859], "tseri": [351, 352, 858, 859], "monthend": [351, 858], "rollforward": [351, 858], "monthbegin": [352, 859], "rollback": [352, 859], "nanoseconds_diff": 354, "1000000": [354, 567, 861], "minu": [355, 862], "dictat": [355, 862], "2005": [355, 862], "date_plus_1i": [355, 862], "1y2mo": [355, 862], "date_min": 355, "1998": [355, 862], "1999": [355, 775, 862], "2003": [355, 620, 862], "2004": [355, 862], "2006": [355, 862], "new_dat": 355, "ordin": [356, 496, 665, 863, 987, 1099], "366": [356, 863], "use_earliest": [358, 366, 559, 561, 613, 865, 873, 1055, 1057], "ambigu": [358, 366, 559, 561, 613, 865, 873, 1055, 1057], "convert_time_zon": [358, 865], "earliest": [358, 366, 559, 561, 613, 865, 873, 1055, 1057], "london_timezon": [358, 865], "amsterdam": [358, 865], "london_to_amsterdam": [358, 865], "cet": [358, 865], "cest": [358, 865], "ts_local": [358, 865], "brussel": [358, 865], "half": [359, 374, 375, 376, 665, 866, 881, 882, 883, 1099], "225": [359, 366], "10m": [359, 366, 866, 873], "milli": [360, 867], "micro": [360, 867], "456789": [360, 775, 867], "111110": [360, 867], "765431": [360, 867], "11111": [360, 867], "seconds_diff": 361, "to_str": [362, 869], "datetime_str": [362, 365], "timestamp_n": [364, 871], "timestamp_m": 364, "978307200000": 364, "978393600000": 364, "978480000000": 364, "strftime": [365, 872], "offset_bi": [366, 614, 873], "15m": [366, 873], "ambiguous_map": 366, "map_dict": [366, 459, 665, 873, 1099], "53": [367, 874], "time_unit_u": 369, "32971": [369, 876], "32974": [369, 876], "32976": [369, 876], "iso_year": 370, "718281828459045": [371, 452, 665, 879, 962, 1099], "pk": [371, 665, 879, 1099], "probabl": [371, 493, 665, 879, 985, 1099], "459148": [371, 665], "754888": [371, 665], "eq": [373, 665, 1099], "span": [374, 375, 376, 665, 881, 882, 883, 1099], "half_lif": [374, 375, 376, 665, 881, 882, 883, 1099], "adjust": [374, 375, 376, 526, 665, 881, 882, 883, 1022, 1099], "exponenti": [374, 375, 376, 378, 490, 665, 881, 882, 883, 884, 1099], "weight": [374, 375, 376, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 526, 665, 881, 882, 883, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1022, 1099], "decai": [374, 375, 376, 665, 881, 882, 883, 1099], "term": [374, 375, 376, 544, 547, 665, 881, 882, 883, 1040, 1043, 1099], "mass": [374, 375, 376, 665, 881, 882, 883, 1099], "gamma": [374, 375, 376, 665, 881, 882, 883, 1099], "foral": [374, 375, 376, 665, 881, 882, 883, 1099], "geq": [374, 375, 376, 665, 881, 882, 883, 1099], "theta": [374, 375, 376, 665, 881, 882, 883, 1099], "life": [374, 375, 376, 665, 881, 882, 883, 1099], "exp": [374, 375, 376, 665, 881, 882, 883, 1099], "ln": [374, 375, 376, 665, 881, 882, 883, 1099], "smooth": [374, 375, 376, 665, 881, 882, 883, 1099], "factor": [374, 375, 376, 578, 665, 881, 882, 883, 1082, 1099], "leq": [374, 375, 376, 665, 881, 882, 883, 1099], "imbal": [374, 375, 376, 665, 881, 882, 883, 1099], "ew": [374, 375, 376, 665, 881, 882, 883, 1099], "w_i": [374, 375, 376, 665, 881, 882, 883, 1099], "recurs": [374, 375, 376, 665, 881, 882, 883, 1099], "y_t": [374, 375, 376, 665, 881, 882, 883, 1099], "y_": [374, 375, 376, 665, 881, 882, 883, 1099], "x_t": [374, 375, 376, 665, 881, 882, 883, 1099], "x_2": [374, 375, 376, 665, 881, 882, 883, 1099], "428571": [374, 665], "bia": [375, 376, 411, 511, 526, 665, 882, 883, 922, 1002, 1022, 1099], "unbias": [375, 376, 665, 882, 883, 1099], "963624": [375, 665, 882, 1099], "928571": [376, 665, 883, 1099], "wildcard": [377, 606, 607, 618, 640, 661, 665], "regex": [377, 467, 533, 534, 537, 539, 540, 541, 549, 550, 557, 616, 665, 775, 1029, 1030, 1033, 1035, 1036, 1037, 1045, 1046, 1053], "aa": [377, 533, 616, 665, 1029], "ba": [377, 616, 665, 775], "cc": [377, 616, 665], "718282": [378, 665], "389056": [378, 665], "54": [378, 665, 1107], "59815": [378, 665], "expand": [379, 466, 467, 499, 665, 775, 885, 1099], "pythonliter": [380, 665, 887, 968, 971, 1099], "extrem": [380, 505, 665, 887, 996, 1099], "group_col": [383, 586, 665], "g1": [383, 586, 665], "g2": [383, 586, 665], "lt": [383, 586, 665, 1099], "gte": [383, 586, 665], "exprlistnamespac": [385, 665], "divis": [387, 580, 665], "truediv": [387, 665], "9774092659964970114": [392, 665], "13614470193936745724": [392, 665], "1101441246220388612": [392, 665], "11638928888656214026": [392, 665], "13382926553367784577": [392, 665], "cumsum": [395, 570, 609, 665, 706, 772, 921, 1099], "interpolationmethod": [396, 665, 900, 1099], "regrid": [396, 665], "grid": [396, 665], "df_original_grid": [396, 665], "grid_point": [396, 665], "df_new_grid": [396, 665], "conflat": [397, 665], "finit": [399, 580, 603, 665, 905, 1099], "optional_memb": [401, 665, 908, 1099], "infinit": [402, 580, 665, 909, 1099], "_isnan": [404, 665], "b_isnan": [404, 665], "negat": [405, 484, 665, 979, 1099], "_is_not_nan": [406, 665], "b_is_not_nan": [406, 665], "_not_nul": [407, 665], "a_not_nul": [407, 665], "b_not_nul": [407, 665], "_isnul": [408, 665], "a_isnul": [408, 665], "b_isnul": [408, 665], "constraint": [410, 491, 571, 665], "chain": [410, 491, 571, 655, 665], "undo": [410, 473, 491, 571, 665], "333333": [410, 665, 981, 1005, 1099], "fisher": [411, 526, 665, 922, 1022, 1099], "fourth": [411, 665, 922, 1099], "subtract": [411, 570, 665, 922, 1099], "distribut": [411, 526, 665, 922, 1022, 1099], "elimin": [411, 665, 922, 1099], "bias": [411, 526, 665, 922, 1022, 1099], "scipi": [411, 526, 665, 922, 1022, 1099], "stat": [411, 526, 665, 922, 1022, 1099], "153061": [411, 665], "sublist": [418, 419, 421, 423, 427, 428, 429, 431, 432, 438, 443, 447, 448, 449, 908, 928, 929, 931, 933, 937, 938, 939, 941, 942, 948, 953, 957, 958, 959, 1099], "membership": [421, 931], "listcol": 422, "number_of_two": 422, "set_differ": [424, 934], "blindli": [425, 935], "worth": [425, 935], "enough": [425, 526, 665, 935, 1022, 1099], "concat_list": [425, 615, 935], "rank": [425, 603, 615, 665, 935, 1099], "exprnamespac": 426, "flat": [426, 500, 665, 936, 991, 1099], "set_intersect": [430, 940], "symmetr": [440, 446, 950, 956], "sdiff": 440, "taken": [443, 553, 953, 1049], "set_symmetric_differ": [446, 956], "null_on_oob": [448, 958], "cheaper": [448, 958], "n_field_strategi": [449, 959], "tostructstrategi": [449, 959], "first_non_nul": [449, 959], "max_width": [449, 959], "field_0": [449, 959], "field_1": [449, 959], "field_n": [449, 959], "pre": [449, 461, 493, 638, 641, 656, 665, 985, 1099], "n0": 449, "n1": 449, "set_union": [450, 960], "logarithm": [452, 453, 454, 665, 962, 963, 964, 1099], "584963": [452, 665], "30103": [453, 665], "60206": [453, 665], "natur": [454, 665, 964, 1099], "693147": [454, 665], "098612": [454, 665], "386294": [454, 665], "lowest": [455, 665], "9223372036854775808": [455, 665], "agg_list": [457, 459, 665], "map_batch": [457, 628, 665, 713, 772], "b_revers": [458, 501, 571, 665], "rstrip": [458, 665], "_revers": [458, 501, 571, 665], "whole": [459, 528, 529, 539, 665, 760, 772, 1035], "elementwis": [459, 504, 505, 506, 507, 509, 513, 665, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1099], "third": [459, 665], "parti": [459, 665], "book": [459, 665], "bug": [459, 461, 665, 713, 714, 755, 760, 772, 967, 1099], "func": [459, 665], "argmax": [459, 665], "remap": [460, 665, 966, 1099], "lookup": [460, 661, 665, 966, 1099], "country_code_dict": [460, 665], "ca": [460, 665], "canada": [460, 665], "de": [460, 665], "germani": [460, 665], "fr": [460, 665], "franc": [460, 665], "country_cod": [460, 665], "rest": [460, 665], "discourag": [461, 665], "loop": [461, 665], "a_times_2": [461, 665], "tip": [461, 665], "again": [461, 665], "behav": [461, 665, 781, 1099], "exprmetanamespac": [465, 468], "foo_bar2": [465, 468], "computeerror": [469, 548, 676, 1044], "e_filt": [469, 471], "e_sum_ov": [469, 471], "e_sum_slic": [469, 471], "e_count": 469, "tree": 472, "keep_nam": [473, 665], "modulu": [476, 665], "xlog2": [478, 490, 665], "poison": [480, 481, 665, 976, 977, 1099], "nanmax": [480, 481, 665, 976, 977, 1099], "inequ": [482, 665], "ne": [483, 665, 1099], "more_expr": [487, 597, 600, 601, 602, 665], "mapping_strategi": [487, 665], "windowmappingstrategi": [487, 665], "group_to_row": [487, 665], "outcom": [487, 665], "group_dtyp": [487, 665], "warn": [487, 665], "flatten": [487, 665], "_max": [487, 665], "c_max": [487, 665], "_min": [487, 665], "c_min": [487, 665], "percent": [488, 665, 981, 1099], "090909": [488, 665], "extract_numb": [489, 665], "digit": [489, 515, 540, 567, 665, 1006, 1030, 1036, 1063, 1099, 1107], "scale_negative_even": [489, 665], "expon": [490, 665, 1099], "reverse_": [491, 665], "reverse_a": [491, 665], "reverse_b": [491, 665], "allow_dupl": [493, 665, 985, 1099], "duplicateerror": [493, 665, 676, 985, 1099], "happen": [493, 665, 985, 1099], "cut": [493, 665, 985, 1099], "566371": [495, 665], "424778": [495, 665], "283185": [495, 665], "141593": [495, 665, 783, 1099], "rankmethod": [496, 665, 987, 1099], "ti": [496, 665, 987, 1099], "competit": [496, 665, 987, 1099], "highest": [496, 583, 603, 665, 772, 987, 1099], "immedi": [496, 594, 598, 611, 612, 624, 625, 638, 641, 647, 652, 653, 656, 665, 987, 1099], "64bit": [498, 665, 989, 1099], "safe": [498, 665, 772, 989, 1057, 1080, 1099], "fruits_revers": [501, 665], "cars_revers": [501, 665], "rle": [503, 665, 994, 1099], "themselv": [503, 665, 994, 1099], "a_r": [503, 665], "ab_r": [503, 665], "window_s": [504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 642, 643, 665, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1099], "rolling_map": [504, 665, 995, 1099], "multipli": [504, 505, 506, 507, 509, 512, 513, 514, 665, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1099], "rolling_sum": [505, 665, 996, 1099], "nansum": [505, 665, 996, 1099], "travers": [506, 507, 509, 513, 665, 997, 998, 1000, 1003, 1004, 1005, 1099], "vector": [506, 507, 509, 513, 665, 997, 998, 1000, 1003, 1004, 1005, 1099], "5h": [506, 507, 508, 509, 510, 512, 513, 514, 665], "df_tempor": [506, 507, 509, 512, 513, 514, 665], "closur": [506, 507, 512, 513, 514, 665], "rolling_row_max": [506, 665], "2h": [506, 507, 509, 512, 513, 514, 665], "rolling_row_mean": [507, 665], "rolling_row_min": [509, 665], "625": [510, 665], "skew": [511, 665, 1002, 1099], "381802": [511, 665, 1002, 1099], "47033": [511, 665, 1002, 1099], "38180177416060584": [511, 665, 1002, 1099], "47033046033698594": [511, 665, 1002, 1099], "433013": [512, 665, 738, 772], "rolling_row_std": [512, 665], "rolling_row_sum": [513, 665], "39": [513, 620, 665], "63": [513, 665], "69": [513, 665], "1875": [514, 665, 746, 772], "rolling_row_var": [514, 665], "searchsortedsid": [517, 665, 1008, 1099], "leftmost": [517, 665, 1008, 1099], "rightmost": [517, 665, 1008, 1099], "six": [517, 665], "extrema": [521, 665, 1016, 1099], "112": [521, 665, 1107], "129": [521, 665], "i8": [521, 638, 641, 656, 665, 828, 992, 1086, 1099], "8589934592": [521, 665], "1073741824": [521, 665], "content": [522, 665, 1018, 1099], "175201": [525, 665, 1021, 1099], "unimod": [526, 665, 1022, 1099], "skewtest": [526, 665, 1022, 1099], "speak": [526, 665, 1022, 1099], "g_1": [526, 665, 1022, 1099], "m_3": [526, 665, 1022, 1099], "m_2": [526, 665, 1022, 1099], "m_i": [526, 665, 1022, 1099], "sum_": [526, 665, 1022, 1099], "texttt": [526, 665, 1022, 1099], "k_3": [526, 665, 1022, 1099], "k_2": [526, 665, 1022, 1099], "sqrt": [526, 595, 596, 665, 1022, 1099], "343622": [526, 665], "value1": [529, 665], "value2": [529, 665], "attain": [529, 665], "414214": [530, 665, 1025, 1099], "sensit": [533, 540, 549, 1029, 1036, 1045], "ilmsuxu": [533, 539, 540, 549, 1029, 1035, 1036, 1045], "default_match": 533, "insensitive_match": 533, "section": [533, 539, 540, 549, 1029, 1035, 1036, 1045], "crab": [533, 1029], "dog": [533, 563, 566, 602, 1029, 1059, 1062], "rab": [533, 1029], "success": [534, 540, 1030, 1036], "overlap": [534, 540, 1030, 1036], "123": [534, 540, 550, 775, 1030, 1036, 1046, 1077, 1099], "bla": [534, 540, 1030, 1036], "asd": [534, 540, 1030, 1036], "678": [534, 540, 1030, 1036], "910t": [534, 540, 1030, 1036], "count_digit": 534, "666f6f": [536, 1032], "626172": [536, 1032], "mango": [537, 557, 1033, 1053], "go": [537, 1033], "has_suffix": 537, "group_index": [539, 1035], "captur": [539, 541, 1035, 1037], "nthose": [539, 1035], "nodd": [539, 1035], "nthe": [539, 1035], "vote": [539, 541, 1035, 1037], "ballon_dor": [539, 541, 1035, 1037], "404": [539, 541, 1035, 1037], "ref": [539, 541, 1035, 1037], "candid": [539, 541, 1035, 1037], "messi": [539, 541, 1035, 1037], "ronaldo": [539, 1035], "haystack": [540, 1036], "email": [540, 1036], "real": [540, 1036], "some_account": [540, 1036], "somewher": [540, 1036], "net": [540, 1036], "jkl": [540, 1036], "uvw": [540, 1036], "co": [540, 665, 1036, 1099], "uk": [540, 1036], "address": 540, "xi": [540, 1036], "insensit": [540, 549, 775, 1029, 1036, 1045], "quantifi": [540, 1036], "email_part": [540, 1036], "extracted_nr": 540, "910": [540, 1036], "unnam": [541, 1037], "weghorst": [541, 1037], "candi": 541, "json_path_match": [542, 1038], "jsonpath": [542, 543, 1038, 1039], "json_path": [543, 1039], "json_val": [543, 1039], "n_char": [544, 1040], "caf\u00e9": [544, 547, 1040, 1043], "345": [544, 547, 1040, 1043], "\u6771\u4eac": [544, 547, 1040, 1043], "nchar": [544, 547], "fill_char": [545, 551, 1041, 1047], "justifi": [545, 551, 1041, 1047], "pad": [545, 551, 567, 1041, 1047, 1063], "cow": [545, 551, 1041, 1047], "monkei": [545, 551, 1041, 1047], "hippopotamu": [545, 551, 1041, 1047], "strip": [546, 552, 1042, 1048], "tworld": [546, 1042, 1054], "wod": [546, 1042], "rld": [546, 558, 1042], "radix": [548, 1044], "parseerror": [548, 1044], "becom": [548, 1044], "silent": [548, 1044], "110": [548, 1044], "010": [548, 1044], "fa1e": [548, 1044], "ff00": [548, 1044], "cafe": [548, 1044], "64030": [548, 1044], "65280": [548, 1044], "51966": [548, 1044], "replace_al": [549, 1045], "citi": 549, "philadelphia": 549, "season": 549, "spring": 549, "summer": 549, "autumn": 549, "winter": 549, "weather": [549, 1045], "raini": [549, 1045], "sunni": [549, 1045], "cloudi": 549, "snowi": 549, "foggi": [549, 1045], "123abc": [549, 1045], "abc456": [549, 1045], "abcabc": [550, 1046], "123a123": [550, 1046], "bc": [550, 648, 1046], "oldw": 552, "he": 552, "subslic": [553, 1049], "pear": [553, 1049], "papaya": [553, 1049], "dragonfruit": [553, 1049], "s_slice": 553, "ear": [553, 1049], "aya": [553, 1049], "uit": [553, 1049], "ya": [553, 1049], "onf": [553, 1049], "a_1": [555, 1051, 1076, 1099], "d_4": [555, 1051], "rename_field": [555, 556, 826, 985, 1051, 1052, 1099], "first_part": [555, 556, 1051, 1052], "second_part": [555, 556, 1051, 1052], "remaind": [556, 1052], "app": [557, 1053], "has_prefix": 557, "nworld": 558, "ow": 558, "hell": [558, 1054], "polarstemporaltyp": [559, 1055], "introduc": [559, 560, 561, 1055, 1056, 1057], "penalti": [559, 560, 561, 1055, 1056, 1057], "clean": [559, 560, 561, 1055, 1056, 1057], "beforehand": [559, 560, 561, 1055, 1056, 1057], "certainli": [559, 560, 561, 1055, 1056, 1057], "3f": [559, 561, 1055, 1057], "00z": [559, 561, 1055, 1057], "sun": [559, 1055], "jul": [559, 1055], "34": [559, 1055], "inference_length": [562, 1058], "3420": [562, 1058], "120134": [562, 1058], "3212": [562, 1058], "143": [562, 1058, 1107], "lowercas": [563, 1059], "variant": [563, 565, 566], "titlecas": [565, 1061], "sing": [565, 1061], "welcom": [565, 1061], "THERE": [565, 1061], "NO": [565, 775, 1061], "There": [565, 1061], "uppercas": [566, 1062], "100000": 567, "0010": 567, "0001": 567, "00000": 567, "00001": 567, "cd": [568, 569], "struct_col": [568, 569], "www": [569, 772], "xxx": 569, "yyi": 569, "zzz": 569, "obvious": 569, "structfieldnotfounderror": [569, 676], "761594": [577, 665, 1074, 1099], "replic": [578, 665, 1082, 1099], "vals_phys": [578, 665], "floordiv": [580, 665], "ieee": [580, 665], "754": [580, 665], "mathemat": [580, 615, 665], "undefin": [580, 665], "On": [580, 665], "operand": [580, 665], "infin": [580, 665], "value_count": [582, 665, 1099], "9223372036854775807": [583, 665], "occurr": [584, 665, 897, 1087, 1099], "binary_str": [587, 665], "zfill": [587, 665], "250": [587, 665, 998, 1099, 1107], "bin_x": [587, 665], "bin_i": [587, 665], "xor_xi": [587, 665], "bin_xor_xi": [587, 665], "00001010": [587, 665], "00000001": [587, 665], "00001011": [587, 665], "00001000": [587, 665], "00000010": [587, 665], "11111010": [587, 665], "00000011": [587, 665], "249": [587, 665], "11111001": [587, 665], "01000010": [587, 665], "00000100": [587, 665], "70": [587, 665], "01000110": [587, 665], "AND": [588, 589, 775, 1080, 1099], "any_horizont": 590, "returns_scalar": [592, 630], "polarsintegertyp": [594, 624, 625], "arctan": [595, 596, 665, 1099], "angl": [595, 596], "plane": [595, 596], "rai": [595, 596], "tworoottwo": [595, 596], "arctan2d": 595, "atan2d": [595, 596], "atan2": [595, 596], "135": [595, 596], "356194": [595, 596], "arctan2": 596, "arg_tru": [598, 665, 1099], "lag": 601, "mimic": 601, "a_lag_": 601, "a_rol": 601, "swim": 602, "walk": 602, "full_sent": 602, "correlationmethod": 603, "propagate_nan": 603, "spearman": 603, "544705": 603, "covari": [605, 643], "acc": [606, 607, 618, 640], "include_init": 606, "accumul": [606, 607, 618, 640], "fn": [606, 607, 618, 640], "new_valu": [606, 607, 618, 640], "cumreduc": 606, "cumsum_horizont": 608, "1h30m25": [611, 612, 652, 653], "further": [611, 612, 661, 1081, 1099], "granular": 611, "finer": 611, "permut": 611, "februari": 611, "later": [611, 731, 772], "febrari": 611, "28th": 611, "march": 611, "31st": 611, "approach": 611, "prior": 611, "began": 611, "januari": 611, "1mo_satur": 611, "month_end": 611, "routin": 611, "1985": 611, "999999": [613, 651, 652, 653, 775], "contrast": 614, "sometim": [614, 664], "tbl_width_char": 614, "120": 614, "add_week": 614, "add_dai": 614, "add_second": 614, "add_milli": 614, "add_hour": 614, "add_calendar_dai": 614, "add_calendar_month": 614, "mo": 614, "add_calendar_year": 614, "2024": [614, 775], "a_b_doubl": 615, "f_string": 619, "placehold": 619, "hello_": 619, "_world": 619, "foo_": 619, "_bar_": 619, "foo_a_bar_1": 619, "foo_b_bar_2": 619, "foo_c_bar_3": 619, "epoch": 620, "timestep": 620, "1666683077": 620, "1666683099": 620, "12345": [620, 812, 892, 1006, 1099], "12346": 620, "agg_group": [621, 665], "allow_object": 627, "valueexcept": 627, "test_func": 629, "list_of_seri": 630, "my_custom_aggreg": 630, "understood": 630, "max_horizont": 631, "min_horizont": [635, 644], "power": [645, 1099], "a_a": 645, "a_txt": 645, "605551": 646, "605551275463989": 646, "my_struct": 647, "thens": 655, "elif": 655, "pick": 655, "afterward": 655, "own": [655, 1107], "isn": 655, "arr": [657, 1080, 1091, 1099], "technic": 661, "columnfactori": 661, "helper": 661, "__call__": 661, "__getattr__": 661, "idiomat": [661, 760], "quick": [661, 827, 1099, 1107], "prototyp": 661, "keystrok": 661, "drawback": 661, "readabl": 661, "more_nam": 661, "hamburg": 661, "and_": 665, "arcco": [665, 1099], "arccosh": [665, 1099], "arcsin": [665, 1099], "arcsinh": [665, 1099], "arctanh": [665, 1099], "arg_max": [665, 1099], "arg_min": [665, 1099], "arg_sort": [665, 1099], "arg_uniqu": [665, 1099], "backward_fil": 665, "cbrt": [665, 1099], "clip_max": [665, 1099], "clip_min": [665, 1099], "cosh": [665, 1099], "cumcount": 665, "cummax": [665, 1099], "cummin": [665, 1099], "cumulative_ev": [665, 1099], "entropi": [665, 1099], "eq_miss": [665, 1099], "ewm_mean": [665, 1099], "ewm_std": [665, 1099], "ewm_var": [665, 1099], "extend_const": [665, 1099], "from_json": [665, 772], "ge": [665, 1099], "gt": [665, 1099], "implod": [665, 1099], "inspect": [665, 772], "is_between": [665, 1099], "is_finit": [665, 1099], "is_first": [665, 1099], "is_in": [665, 1099], "is_infinit": [665, 1099], "is_last": [665, 1099], "is_nan": [665, 1099], "is_not": 665, "is_not_nan": [665, 1099], "is_not_nul": [665, 1099], "kurtosi": [665, 1099], "le": [665, 1099], "log10": [665, 1099], "log1p": [665, 1099], "mod": 665, "mul": 665, "nan_max": [665, 1099], "nan_min": [665, 1099], "ne_miss": [665, 1099], "or_": 665, "pct_chang": [665, 1099], "pow": [665, 1099], "reinterpret": [665, 1099], "repeat_bi": 665, "rle_id": [665, 1099], "rolling_appli": [665, 1099], "rolling_max": [665, 1099], "rolling_mean": [665, 1099], "rolling_median": [665, 1099], "rolling_min": [665, 1099], "rolling_quantil": [665, 1099], "rolling_skew": [665, 1099], "rolling_std": [665, 1099], "rolling_var": [665, 1099], "search_sort": [665, 1099], "shrink_dtyp": [665, 1099], "sin": [665, 1099], "sinh": [665, 1099], "sort_bi": 665, "tan": [665, 1099], "to_phys": [665, 809, 1099], "unique_count": [665, 1099], "xor": 665, "expos": 676, "miscellan": 676, "arrowerror": 676, "columnnotfounderror": 676, "invalidoperationerror": 676, "polarspanicerror": 676, "schemaerror": 676, "schemafieldnotfounderror": 676, "shapeerror": 676, "parametr": 676, "build_info": 676, "get_index_typ": 676, "show_vers": 676, "threadpool_s": 676, "sqlcontext": [676, 1106], "hit": [682, 772], "node": [682, 706, 713, 714, 718, 723, 726, 772], "huge": [685, 772], "saver": [685, 772], "stringio": [687, 698, 731, 772], "snippet": [689, 772], "purpos": [693, 772], "deseri": [698, 725, 731, 772], "lazygroupbi": [699, 700, 701, 702, 703, 704, 772], "dynamic_group_bi": [701, 772], "other_lf": [708, 772], "validate_output_schema": [713, 714, 772], "streamabl": [713, 714, 718, 772], "past": [713, 714, 772], "paramount": [713, 714, 772], "elig": [713, 714, 772], "invari": [714, 772], "upheld": [714, 772], "prune": [714, 772], "100_000": [714, 772], "200000": [714, 772], "199998": [714, 772], "199996": [714, 772], "199994": [714, 772], "199992": [714, 772], "show_plot": [723, 772], "truncate_nod": [723, 772], "figsiz": [723, 735, 772], "gantt": [723, 772], "plot": [723, 735, 772], "group_by_partit": [723, 772], "470": [723, 772], "475": [723, 772], "1964": [723, 772], "swap": [726, 772], "dataframescan": [731, 772], "output_schema": [731, 772], "run_parallel": [731, 772], "duplicate_check": [731, 772], "output_path": [735, 772], "raw_output": [735, 772], "figur": [735, 772], "290994": [738, 772], "118034": [738, 772], "extern": [750, 772], "lf_other": [750, 772], "afoo": [750, 772], "cfoo": [750, 772], "train_lf": [750, 772], "feature_0": [750, 772], "feature_1": [750, 772], "test_lf": [750, 772], "_train": [750, 772], "feature_0_train": [750, 772], "opaqu": 760, "my_column": 760, "lf5": 772, "lf6": 772, "collect_async": 772, "queue": 772, "_asyncdataframeresult": 772, "asynchron": 772, "insid": 772, "put_nowait": 772, "instantli": 772, "gevent": 772, "asyncio": 772, "greenlet": 772, "task": 772, "janu": 772, "aio": 772, "lib": [772, 1075, 1099], "wrapper": 772, "collect_all_async": 772, "explain": 772, "read_json": 772, "sink_csv": 772, "sink_ipc": 772, "sink_parquet": 772, "with_context": 772, "intuit": 775, "broadcast": 775, "emploi": 775, "complement": 775, "plenti": 775, "cde": 775, "fgg": 775, "jjk": 775, "lmn": 775, "opp": 775, "qqr": 775, "by_dtyp": 775, "as_expr": 775, "dispatch": 775, "selectortyp": 775, "1_234_500": 775, "5_000_555": 775, "1234500": 775, "5000555": 775, "by_nam": 775, "4_500_000": 775, "4500000": 775, "3265500": 775, "zap": 775, "2031": 775, "tstamp_tokyo": 775, "987654": 775, "123465": 775, "tstamp_utc": 775, "2025": 775, "666000": 775, "tstamp": 775, "600000": 775, "123000": 775, "666": 775, "td1": 775, "123456": 775, "987000": 775, "td2": 775, "td3": 775, "2m": [775, 855], "456m": 775, "7d": 775, "456789\u00b5": 775, "18d": 775, "999999\u00b5": 775, "23h": 775, "987m": 775, "14d": 775, "16h": 775, "39m": 775, "21d": 775, "456001\u00b5": 775, "expand_selector": 775, "789": 775, "colz": [775, 1107], "everyth": 775, "signed_integ": 775, "unsigned_integ": 775, "is_selector": 775, "obj": 775, "include_categor": 775, "set_ord": [775, 810], "2345": 775, "3456": 775, "append_chunk": [781, 1099], "super": [781, 1099], "292432": [784, 1099], "549306": [788, 1099], "catnamespac": 805, "56789": [812, 892, 1006, 1099], "901234": [812, 892, 1006, 1099], "1232e": [819, 1099], "break_point_label": [826, 985, 1099], "break_point": [826, 897, 985, 1099], "category_label": [826, 985, 1099], "series_num": [827, 1099], "581139": [827, 1099], "series_str": [827, 1099], "datetimeindex": [829, 1099], "datetimenamespac": 832, "ser": [837, 838, 870], "kathmandu": [837, 838, 870], "0545": [837, 838, 870], "500m": [850, 852, 860], "500000": 850, "500000000": 860, "date_minus_1y_2mon": 862, "165": [866, 873], "series_equ": [866, 1099], "timestamp_u": 871, "978307200000000000": 871, "978393600000000000": 871, "978480000000000000": 871, "005": [879, 1099], "06293300616044681": [879, 1099], "65": [879, 1099], "8568409950394724": [879, 1099], "4000000": [880, 1099], "814697265625": [880, 1099], "bitmask": [894, 1099], "swiftli": [894, 1099], "10734580197236529959": [895, 1099], "3022416320763508302": [895, 1099], "13756996518000038261": [895, 1099], "bin_count": [897, 1099], "a_count": [897, 1099], "listnamespac": 925, "field_2": 959, "n00": 959, "n01": 959, "n02": 959, "2147483648": [965, 1099], "iso3166": [966, 1099], "tur": [966, 1061, 1099], "jpn": [966, 1099], "nld": [966, 1099], "country_lookup": [966, 1099], "japan": [966, 1099], "t\u00fcrkiy": [966, 1099], "netherland": [966, 1099], "unrecognis": [966, 1099], "unspecifi": [966, 1099], "country_nam": [966, 1099], "166667": [981, 1099], "142857": [981, 1099], "peak": [982, 983, 1099], "200": [997, 998, 1000, 1099], "150": [998, 1099], "350": [998, 1099], "450": [998, 1099], "dev": [1003, 1099], "527525": [1003, 1099], "57": [1006, 1099, 1107], "frequent": [1010, 1011, 1099], "mutat": [1011, 1099], "2246e": [1020, 1073, 1099], "stringnamespac": 1027, "orld": 1048, "6331e16": [1073, 1099], "int64arrai": [1075, 1099], "a_2": [1076, 1099], "a_3": [1076, 1099], "s_from_str_repr": [1078, 1099], "zero_copy_onli": [1080, 1099], "writabl": [1080, 1099], "presenc": [1080, 1099], "immut": [1080, 1099], "127": [1086, 1099], "seriesview": [1089, 1099], "arraylik": 1099, "dtype_if_empti": 1099, "position": 1099, "scenario": 1099, "chunk_length": 1099, "333": 1099, "get_chunk": 1099, "has_valid": 1099, "hist": 1099, "is_boolean": 1099, "is_float": 1099, "is_integ": 1099, "is_numer": [1099, 1107], "is_sort": 1099, "is_tempor": 1099, "is_utf8": 1099, "new_from_index": 1099, "peak_max": 1099, "peak_min": 1099, "set_at_idx": 1099, "two_a": 1106, "__enter__": 1106, "__exit__": 1106, "exc_typ": 1106, "baseexcept": 1106, "exc_val": 1106, "exc_tb": 1106, "tracebacktyp": 1106, "primari": 1107, "assert_frame_equ": 1107, "assert_series_equ": 1107, "guid": 1107, "machin": 1107, "xdist": 1107, "significantli": 1107, "hardwar": 1107, "setup": 1107, "sec": 1107, "numeric_dtyp": 1107, "null_probabililti": 1107, "test_numer": 1107, "col0": 1107, "col4": 1107, "29096": 1107, "485": 1107, "2147483647": 1107, "8257e14": 1107, "7508": 1107, "37338": 1107, "7264": 1107, "321": 1107, "16996": 1107, "121": 1107, "361": 1107, "63204": 1107, "1443e235": 1107, "conform": 1107, "ascii_lett": 1107, "id_char": 1107, "alphabet": 1107, "price": 1107, "min_valu": 1107, "max_valu": 1107, "test_price_calcul": 1107, "a101": 1107, "8nin": 1107, "qhoo": 1107, "714": 1107, "544": 1107, "i0e0": 1107, "0000": 1107, "test_miscellan": 1107, "235": 1107, "87": 1107, "186": 1107, "174": 1107, "179": 1107, "213": 1107, "221": 1107, "86": 1107, "255": 1107}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [37, 0, 1, "", "DataType"], [38, 0, 1, "", "Date"], [39, 0, 1, "", "Datetime"], [40, 0, 1, "", "Decimal"], [41, 0, 1, "", "Duration"], [42, 0, 1, "", "Float32"], [43, 0, 1, "", "Float64"], [44, 0, 1, "", "Int16"], [45, 0, 1, "", "Int32"], [46, 0, 1, "", "Int64"], [47, 0, 1, "", "Int8"], [51, 0, 1, "", "List"], [52, 0, 1, "", "Null"], [53, 0, 1, "", "Object"], [1106, 0, 1, "", "SQLContext"], [60, 0, 1, "", "StringCache"], [61, 0, 1, "", "Struct"], [62, 0, 1, "", "Time"], [63, 0, 1, "", "UInt16"], [64, 0, 1, "", "UInt32"], [65, 0, 1, "", "UInt64"], [66, 0, 1, "", "UInt8"], [67, 0, 1, "", "Unknown"], [68, 0, 1, "", "Utf8"], [69, 4, 1, "", "align_frames"], [588, 4, 1, "", "all"], [589, 4, 1, "", "all_horizontal"], [590, 4, 1, "", "any"], [591, 4, 1, "", "any_horizontal"], [592, 4, 1, "", "apply"], [593, 4, 1, "", "approx_n_unique"], [594, 4, 1, "", "arange"], [595, 4, 1, "", "arctan2"], [596, 4, 1, "", "arctan2d"], [597, 4, 1, "", "arg_sort_by"], [598, 4, 1, "", "arg_where"], [599, 4, 1, "", "avg"], [74, 4, 1, "", "build_info"], [600, 4, 1, "", "coalesce"], [75, 4, 1, "", "collect_all"], [76, 4, 1, "", "concat"], [601, 4, 1, "", "concat_list"], [602, 4, 1, "", "concat_str"], [603, 4, 1, "", "corr"], [604, 4, 1, "", "count"], [605, 4, 1, "", "cov"], [606, 4, 1, "", "cumfold"], [607, 4, 1, "", "cumreduce"], [608, 4, 1, "", "cumsum"], [609, 4, 1, "", "cumsum_horizontal"], [610, 4, 1, "", "date"], [611, 4, 1, "", "date_range"], [612, 4, 1, "", "date_ranges"], [613, 4, 1, "", "datetime"], [614, 4, 1, "", "duration"], [615, 4, 1, "", "element"], [77, 4, 1, "", "enable_string_cache"], [616, 4, 1, "", "exclude"], [617, 4, 1, "", "first"], [618, 4, 1, "", "fold"], [619, 4, 1, "", "format"], [92, 4, 1, "", "from_arrow"], [93, 4, 1, "", "from_dataframe"], [94, 4, 1, "", "from_dict"], [95, 4, 1, "", "from_dicts"], [620, 4, 1, "", "from_epoch"], [96, 4, 1, "", "from_numpy"], [97, 4, 1, "", "from_pandas"], [98, 4, 1, "", "from_records"], [99, 4, 1, "", "from_repr"], [100, 4, 1, "", "get_index_type"], [621, 4, 1, "", "groups"], [622, 4, 1, "", "head"], [623, 4, 1, "", "implode"], [624, 4, 1, "", "int_range"], [625, 4, 1, "", "int_ranges"], [626, 4, 1, "", "last"], [627, 4, 1, "", "lit"], [628, 4, 1, "", "map"], [629, 4, 1, "", "map_batches"], [630, 4, 1, "", "map_groups"], [631, 4, 1, "", "max"], [632, 4, 1, "", "max_horizontal"], [633, 4, 1, "", "mean"], [634, 4, 1, "", "median"], [635, 4, 1, "", "min"], [636, 4, 1, "", "min_horizontal"], [637, 4, 1, "", "n_unique"], [638, 4, 1, "", "ones"], [639, 4, 1, "", "quantile"], [102, 4, 1, "", "read_avro"], [103, 4, 1, "", "read_csv"], [104, 4, 1, "", "read_csv_batched"], [105, 4, 1, "", "read_database"], [106, 4, 1, "", "read_database_uri"], [107, 4, 1, "", "read_delta"], [108, 4, 1, "", "read_excel"], [109, 4, 1, "", "read_ipc"], [110, 4, 1, "", "read_ipc_schema"], [111, 4, 1, "", "read_ipc_stream"], [112, 4, 1, "", "read_json"], [113, 4, 1, "", "read_ndjson"], [114, 4, 1, "", "read_parquet"], [115, 4, 1, "", "read_parquet_schema"], [640, 4, 1, "", "reduce"], [641, 4, 1, "", "repeat"], [642, 4, 1, "", "rolling_corr"], [643, 4, 1, "", "rolling_cov"], [116, 4, 1, "", "scan_csv"], [117, 4, 1, "", "scan_delta"], [118, 4, 1, "", "scan_ipc"], [119, 4, 1, "", "scan_ndjson"], [120, 4, 1, "", "scan_parquet"], [121, 4, 1, "", "scan_pyarrow_dataset"], [644, 4, 1, "", "select"], [775, 6, 0, "-", "selectors"], [122, 4, 1, "", "set_random_seed"], [123, 4, 1, "", "show_versions"], [645, 4, 1, "", "sql_expr"], [646, 4, 1, "", "std"], [647, 4, 1, "", "struct"], [648, 4, 1, "", "sum"], [649, 4, 1, "", "sum_horizontal"], [650, 4, 1, "", "tail"], [133, 4, 1, "", "threadpool_size"], [651, 4, 1, "", "time"], [652, 4, 1, "", "time_range"], [653, 4, 1, "", "time_ranges"], [134, 4, 1, "", "using_string_cache"], [654, 4, 1, "", "var"], [655, 4, 1, "", "when"], [656, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[137, 1, 1, "", "__dataframe__"], [138, 1, 1, "", "apply"], [139, 1, 1, "", "approx_n_unique"], [140, 1, 1, "", "approx_unique"], [141, 1, 1, "", "bottom_k"], [142, 1, 1, "", "clear"], [143, 1, 1, "", "clone"], [144, 2, 1, "", "columns"], [145, 1, 1, "", "corr"], [146, 1, 1, "", "describe"], [147, 1, 1, "", "drop"], [148, 1, 1, "", "drop_in_place"], [149, 1, 1, "", "drop_nulls"], [150, 2, 1, "", "dtypes"], [151, 1, 1, "", "estimated_size"], [152, 1, 1, "", "explode"], [153, 1, 1, "", "extend"], [154, 1, 1, "", "fill_nan"], [155, 1, 1, "", "fill_null"], [156, 1, 1, "", "filter"], [157, 1, 1, "", "find_idx_by_name"], [158, 2, 1, "", "flags"], [159, 1, 1, "", "fold"], [160, 1, 1, "", "frame_equal"], [161, 1, 1, "", "get_column"], [162, 1, 1, "", "get_columns"], [163, 1, 1, "", "glimpse"], [164, 1, 1, "", "group_by"], [165, 1, 1, "", "group_by_dynamic"], [166, 1, 1, "", "group_by_rolling"], [167, 1, 1, "", "groupby"], [168, 1, 1, "", "groupby_dynamic"], [169, 1, 1, "", "groupby_rolling"], [170, 1, 1, "", "hash_rows"], [171, 1, 1, "", "head"], [172, 2, 1, "", "height"], [173, 1, 1, "", "hstack"], [174, 1, 1, "", "insert_at_idx"], [175, 1, 1, "", "interpolate"], [176, 1, 1, "", "is_duplicated"], [177, 1, 1, "", "is_empty"], [178, 1, 1, "", "is_unique"], [179, 1, 1, "", "item"], [180, 1, 1, "", "iter_rows"], [181, 1, 1, "", "iter_slices"], [182, 1, 1, "", "join"], [183, 1, 1, "", "join_asof"], [184, 1, 1, "", "lazy"], [185, 1, 1, "", "limit"], [186, 1, 1, "", "map_rows"], [187, 1, 1, "", "max"], [188, 1, 1, "", "mean"], [189, 1, 1, "", "median"], [190, 1, 1, "", "melt"], [191, 1, 1, "", "merge_sorted"], [192, 1, 1, "", "min"], [193, 1, 1, "", "n_chunks"], [194, 1, 1, "", "n_unique"], [195, 1, 1, "", "null_count"], [196, 1, 1, "", "partition_by"], [197, 1, 1, "", "pipe"], [198, 1, 1, "", "pivot"], [199, 1, 1, "", "product"], [200, 1, 1, "", "quantile"], [201, 1, 1, "", "rechunk"], [202, 1, 1, "", "rename"], [203, 1, 1, "", "replace"], [204, 1, 1, "", "replace_at_idx"], [205, 1, 1, "", "reverse"], [206, 1, 1, "", "row"], [207, 1, 1, "", "rows"], [208, 1, 1, "", "rows_by_key"], [209, 1, 1, "", "sample"], [210, 2, 1, "", "schema"], [211, 1, 1, "", "select"], [212, 1, 1, "", "select_seq"], [213, 1, 1, "", "set_sorted"], [214, 2, 1, "", "shape"], [215, 1, 1, "", "shift"], [216, 1, 1, "", "shift_and_fill"], [217, 1, 1, "", "shrink_to_fit"], [218, 1, 1, "", "slice"], [219, 1, 1, "", "sort"], [220, 1, 1, "", "std"], [221, 1, 1, "", "sum"], [222, 1, 1, "", "tail"], [223, 1, 1, "", "take_every"], [224, 1, 1, "", "to_arrow"], [225, 1, 1, "", "to_dict"], [226, 1, 1, "", "to_dicts"], [227, 1, 1, "", "to_dummies"], [228, 1, 1, "", "to_init_repr"], [229, 1, 1, "", "to_numpy"], [230, 1, 1, "", "to_pandas"], [231, 1, 1, "", "to_series"], [232, 1, 1, "", "to_struct"], [233, 1, 1, "", "top_k"], [234, 1, 1, "", "transpose"], [235, 1, 1, "", "unique"], [236, 1, 1, "", "unnest"], [237, 1, 1, "", "unstack"], [238, 1, 1, "", "update"], [239, 1, 1, "", "upsample"], [240, 1, 1, "", "var"], [241, 1, 1, "", "vstack"], [242, 2, 1, "", "width"], [243, 1, 1, "", "with_columns"], [244, 1, 1, "", "with_columns_seq"], [245, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_ipc_stream"], [34, 1, 1, "", "write_json"], [35, 1, 1, "", "write_ndjson"], [36, 1, 1, "", "write_parquet"]], "polars.DataType": [[37, 1, 1, "", "__init__"]], "polars.Date": [[38, 1, 1, "", "__init__"]], "polars.Datetime": [[39, 1, 1, "", "__init__"]], "polars.Decimal": [[40, 1, 1, "", "__init__"]], "polars.Duration": [[41, 1, 1, "", "__init__"]], "polars.Expr": [[274, 1, 1, "", "abs"], [275, 1, 1, "", "add"], [276, 1, 1, "", "agg_groups"], [277, 1, 1, "", "alias"], [278, 1, 1, "", "all"], [279, 1, 1, "", "and_"], [280, 1, 1, "", "any"], [281, 1, 1, "", "append"], [282, 1, 1, "", "apply"], [283, 1, 1, "", "approx_n_unique"], [284, 1, 1, "", "arccos"], [285, 1, 1, "", "arccosh"], [286, 1, 1, "", "arcsin"], [287, 1, 1, "", "arcsinh"], [288, 1, 1, "", "arctan"], [289, 1, 1, "", "arctanh"], [290, 1, 1, "", "arg_max"], [291, 1, 1, "", "arg_min"], [292, 1, 1, "", "arg_sort"], [293, 1, 1, "", "arg_true"], [294, 1, 1, "", "arg_unique"], [299, 1, 1, "", "backward_fill"], [305, 1, 1, "", "bottom_k"], [306, 1, 1, "", "cache"], [307, 1, 1, "", "cast"], [310, 1, 1, "", "cbrt"], [311, 1, 1, "", "ceil"], [312, 1, 1, "", "clip"], [313, 1, 1, "", "clip_max"], [314, 1, 1, "", "clip_min"], [315, 1, 1, "", "cos"], [316, 1, 1, "", "cosh"], [317, 1, 1, "", "count"], [318, 1, 1, "", "cumcount"], [319, 1, 1, "", "cummax"], [320, 1, 1, "", "cummin"], [321, 1, 1, "", "cumprod"], [322, 1, 1, "", "cumsum"], [323, 1, 1, "", "cumulative_eval"], [324, 1, 1, "", "cut"], [325, 1, 1, "", "degrees"], [326, 1, 1, "", "diff"], [327, 1, 1, "", "dot"], [328, 1, 1, "", "drop_nans"], [329, 1, 1, "", "drop_nulls"], [371, 1, 1, "", "entropy"], [372, 1, 1, "", "eq"], [373, 1, 1, "", "eq_missing"], [374, 1, 1, "", "ewm_mean"], [375, 1, 1, "", "ewm_std"], [376, 1, 1, "", "ewm_var"], [377, 1, 1, "", "exclude"], [378, 1, 1, "", "exp"], [379, 1, 1, "", "explode"], [380, 1, 1, "", "extend_constant"], [381, 1, 1, "", "fill_nan"], [382, 1, 1, "", "fill_null"], [383, 1, 1, "", "filter"], [384, 1, 1, "", "first"], [385, 1, 1, "", "flatten"], [386, 1, 1, "", "floor"], [387, 1, 1, "", "floordiv"], [388, 1, 1, "", "forward_fill"], [389, 1, 1, "", "from_json"], [390, 1, 1, "", "ge"], [391, 1, 1, "", "gt"], [392, 1, 1, "", "hash"], [393, 1, 1, "", "head"], [394, 1, 1, "", "implode"], [395, 1, 1, "", "inspect"], [396, 1, 1, "", "interpolate"], [397, 1, 1, "", "is_between"], [398, 1, 1, "", "is_duplicated"], [399, 1, 1, "", "is_finite"], [400, 1, 1, "", "is_first"], [401, 1, 1, "", "is_in"], [402, 1, 1, "", "is_infinite"], [403, 1, 1, "", "is_last"], [404, 1, 1, "", "is_nan"], [405, 1, 1, "", "is_not"], [406, 1, 1, "", "is_not_nan"], [407, 1, 1, "", "is_not_null"], [408, 1, 1, "", "is_null"], [409, 1, 1, "", "is_unique"], [410, 1, 1, "", "keep_name"], [411, 1, 1, "", "kurtosis"], [412, 1, 1, "", "last"], [413, 1, 1, "", "le"], [414, 1, 1, "", "len"], [415, 1, 1, "", "limit"], [452, 1, 1, "", "log"], [453, 1, 1, "", "log10"], [454, 1, 1, "", "log1p"], [455, 1, 1, "", "lower_bound"], [456, 1, 1, "", "lt"], [457, 1, 1, "", "map"], [458, 1, 1, "", "map_alias"], [459, 1, 1, "", "map_batches"], [460, 1, 1, "", "map_dict"], [461, 1, 1, "", "map_elements"], [462, 1, 1, "", "max"], [463, 1, 1, "", "mean"], [464, 1, 1, "", "median"], [475, 1, 1, "", "min"], [476, 1, 1, "", "mod"], [477, 1, 1, "", "mode"], [478, 1, 1, "", "mul"], [479, 1, 1, "", "n_unique"], [480, 1, 1, "", "nan_max"], [481, 1, 1, "", "nan_min"], [482, 1, 1, "", "ne"], [483, 1, 1, "", "ne_missing"], [484, 1, 1, "", "not_"], [485, 1, 1, "", "null_count"], [486, 1, 1, "", "or_"], [487, 1, 1, "", "over"], [488, 1, 1, "", "pct_change"], [489, 1, 1, "", "pipe"], [490, 1, 1, "", "pow"], [491, 1, 1, "", "prefix"], [492, 1, 1, "", "product"], [493, 1, 1, "", "qcut"], [494, 1, 1, "", "quantile"], [495, 1, 1, "", "radians"], [496, 1, 1, "", "rank"], [497, 1, 1, "", "rechunk"], [498, 1, 1, "", "reinterpret"], [499, 1, 1, "", "repeat_by"], [500, 1, 1, "", "reshape"], [501, 1, 1, "", "reverse"], [502, 1, 1, "", "rle"], [503, 1, 1, "", "rle_id"], [504, 1, 1, "", "rolling_apply"], [505, 1, 1, "", "rolling_map"], [506, 1, 1, "", "rolling_max"], [507, 1, 1, "", "rolling_mean"], [508, 1, 1, "", "rolling_median"], [509, 1, 1, "", "rolling_min"], [510, 1, 1, "", "rolling_quantile"], [511, 1, 1, "", "rolling_skew"], [512, 1, 1, "", "rolling_std"], [513, 1, 1, "", "rolling_sum"], [514, 1, 1, "", "rolling_var"], [515, 1, 1, "", "round"], [516, 1, 1, "", "sample"], [517, 1, 1, "", "search_sorted"], [518, 1, 1, "", "set_sorted"], [519, 1, 1, "", "shift"], [520, 1, 1, "", "shift_and_fill"], [521, 1, 1, "", "shrink_dtype"], [522, 1, 1, "", "shuffle"], [523, 1, 1, "", "sign"], [524, 1, 1, "", "sin"], [525, 1, 1, "", "sinh"], [526, 1, 1, "", "skew"], [527, 1, 1, "", "slice"], [528, 1, 1, "", "sort"], [529, 1, 1, "", "sort_by"], [530, 1, 1, "", "sqrt"], [531, 1, 1, "", "std"], [570, 1, 1, "", "sub"], [571, 1, 1, "", "suffix"], [572, 1, 1, "", "sum"], [573, 1, 1, "", "tail"], [574, 1, 1, "", "take"], [575, 1, 1, "", "take_every"], [576, 1, 1, "", "tan"], [577, 1, 1, "", "tanh"], [578, 1, 1, "", "to_physical"], [579, 1, 1, "", "top_k"], [580, 1, 1, "", "truediv"], [581, 1, 1, "", "unique"], [582, 1, 1, "", "unique_counts"], [583, 1, 1, "", "upper_bound"], [584, 1, 1, "", "value_counts"], [585, 1, 1, "", "var"], [586, 1, 1, "", "where"], [587, 1, 1, "", "xor"]], "polars.Expr.arr": [[295, 1, 1, "", "max"], [296, 1, 1, "", "min"], [297, 1, 1, "", "sum"], [298, 1, 1, "", "unique"]], "polars.Expr.bin": [[300, 1, 1, "", "contains"], [301, 1, 1, "", "decode"], [302, 1, 1, "", "encode"], [303, 1, 1, "", "ends_with"], [304, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[308, 1, 1, "", "get_categories"], [309, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[330, 1, 1, "", "base_utc_offset"], [331, 1, 1, "", "cast_time_unit"], [332, 1, 1, "", "combine"], [333, 1, 1, "", "convert_time_zone"], [334, 1, 1, "", "date"], [335, 1, 1, "", "datetime"], [336, 1, 1, "", "day"], [337, 1, 1, "", "days"], [338, 1, 1, "", "dst_offset"], [339, 1, 1, "", "epoch"], [340, 1, 1, "", "hour"], [341, 1, 1, "", "hours"], [342, 1, 1, "", "is_leap_year"], [343, 1, 1, "", "iso_year"], [344, 1, 1, "", "microsecond"], [345, 1, 1, "", "microseconds"], [346, 1, 1, "", "millisecond"], [347, 1, 1, "", "milliseconds"], [348, 1, 1, "", "minute"], [349, 1, 1, "", "minutes"], [350, 1, 1, "", "month"], [351, 1, 1, "", "month_end"], [352, 1, 1, "", "month_start"], [353, 1, 1, "", "nanosecond"], [354, 1, 1, "", "nanoseconds"], [355, 1, 1, "", "offset_by"], [356, 1, 1, "", "ordinal_day"], [357, 1, 1, "", "quarter"], [358, 1, 1, "", "replace_time_zone"], [359, 1, 1, "", "round"], [360, 1, 1, "", "second"], [361, 1, 1, "", "seconds"], [362, 1, 1, "", "strftime"], [363, 1, 1, "", "time"], [364, 1, 1, "", "timestamp"], [365, 1, 1, "", "to_string"], [366, 1, 1, "", "truncate"], [367, 1, 1, "", "week"], [368, 1, 1, "", "weekday"], [369, 1, 1, "", "with_time_unit"], [370, 1, 1, "", "year"]], "polars.Expr.list": [[416, 1, 1, "", "all"], [417, 1, 1, "", "any"], [418, 1, 1, "", "arg_max"], [419, 1, 1, "", "arg_min"], [420, 1, 1, "", "concat"], [421, 1, 1, "", "contains"], [422, 1, 1, "", "count_match"], [423, 1, 1, "", "diff"], [424, 1, 1, "", "difference"], [425, 1, 1, "", "eval"], [426, 1, 1, "", "explode"], [427, 1, 1, "", "first"], [428, 1, 1, "", "get"], [429, 1, 1, "", "head"], [430, 1, 1, "", "intersection"], [431, 1, 1, "", "join"], [432, 1, 1, "", "last"], [433, 1, 1, "", "lengths"], [434, 1, 1, "", "max"], [435, 1, 1, "", "mean"], [436, 1, 1, "", "min"], [437, 1, 1, "", "reverse"], [438, 1, 1, "", "set_difference"], [439, 1, 1, "", "set_intersection"], [440, 1, 1, "", "set_symmetric_difference"], [441, 1, 1, "", "set_union"], [442, 1, 1, "", "shift"], [443, 1, 1, "", "slice"], [444, 1, 1, "", "sort"], [445, 1, 1, "", "sum"], [446, 1, 1, "", "symmetric_difference"], [447, 1, 1, "", "tail"], [448, 1, 1, "", "take"], [449, 1, 1, "", "to_struct"], [450, 1, 1, "", "union"], [451, 1, 1, "", "unique"]], "polars.Expr.meta": [[465, 1, 1, "", "eq"], [466, 1, 1, "", "has_multiple_outputs"], [467, 1, 1, "", "is_regex_projection"], [468, 1, 1, "", "ne"], [469, 1, 1, "", "output_name"], [470, 1, 1, "", "pop"], [471, 1, 1, "", "root_names"], [472, 1, 1, "", "tree_format"], [473, 1, 1, "", "undo_aliases"], [474, 1, 1, "", "write_json"]], "polars.Expr.str": [[532, 1, 1, "", "concat"], [533, 1, 1, "", "contains"], [534, 1, 1, "", "count_match"], [535, 1, 1, "", "decode"], [536, 1, 1, "", "encode"], [537, 1, 1, "", "ends_with"], [538, 1, 1, "", "explode"], [539, 1, 1, "", "extract"], [540, 1, 1, "", "extract_all"], [541, 1, 1, "", "extract_groups"], [542, 1, 1, "", "json_extract"], [543, 1, 1, "", "json_path_match"], [544, 1, 1, "", "lengths"], [545, 1, 1, "", "ljust"], [546, 1, 1, "", "lstrip"], [547, 1, 1, "", "n_chars"], [548, 1, 1, "", "parse_int"], [549, 1, 1, "", "replace"], [550, 1, 1, "", "replace_all"], [551, 1, 1, "", "rjust"], [552, 1, 1, "", "rstrip"], [553, 1, 1, "", "slice"], [554, 1, 1, "", "split"], [555, 1, 1, "", "split_exact"], [556, 1, 1, "", "splitn"], [557, 1, 1, "", "starts_with"], [558, 1, 1, "", "strip"], [559, 1, 1, "", "strptime"], [560, 1, 1, "", "to_date"], [561, 1, 1, "", "to_datetime"], [562, 1, 1, "", "to_decimal"], [563, 1, 1, "", "to_lowercase"], [564, 1, 1, "", "to_time"], [565, 1, 1, "", "to_titlecase"], [566, 1, 1, "", "to_uppercase"], [567, 1, 1, "", "zfill"]], "polars.Expr.struct": [[568, 1, 1, "", "field"], [569, 1, 1, "", "rename_fields"]], "polars.Float32": [[42, 1, 1, "", "__init__"]], "polars.Float64": [[43, 1, 1, "", "__init__"]], "polars.Int16": [[44, 1, 1, "", "__init__"]], "polars.Int32": [[45, 1, 1, "", "__init__"]], "polars.Int64": [[46, 1, 1, "", "__init__"]], "polars.Int8": [[47, 1, 1, "", "__init__"]], "polars.LazyFrame": [[679, 1, 1, "", "approx_n_unique"], [680, 1, 1, "", "approx_unique"], [681, 1, 1, "", "bottom_k"], [682, 1, 1, "", "cache"], [683, 1, 1, "", "clear"], [684, 1, 1, "", "clone"], [685, 1, 1, "", "collect"], [686, 2, 1, "", "columns"], [687, 1, 1, "", "deserialize"], [688, 1, 1, "", "drop"], [689, 1, 1, "", "drop_nulls"], [690, 2, 1, "", "dtypes"], [691, 1, 1, "", "explain"], [692, 1, 1, "", "explode"], [693, 1, 1, "", "fetch"], [694, 1, 1, "", "fill_nan"], [695, 1, 1, "", "fill_null"], [696, 1, 1, "", "filter"], [697, 1, 1, "", "first"], [698, 1, 1, "", "from_json"], [699, 1, 1, "", "group_by"], [700, 1, 1, "", "group_by_dynamic"], [701, 1, 1, "", "group_by_rolling"], [702, 1, 1, "", "groupby"], [703, 1, 1, "", "groupby_dynamic"], [704, 1, 1, "", "groupby_rolling"], [705, 1, 1, "", "head"], [706, 1, 1, "", "inspect"], [707, 1, 1, "", "interpolate"], [708, 1, 1, "", "join"], [709, 1, 1, "", "join_asof"], [710, 1, 1, "", "last"], [711, 1, 1, "", "lazy"], [712, 1, 1, "", "limit"], [713, 1, 1, "", "map"], [714, 1, 1, "", "map_batches"], [715, 1, 1, "", "max"], [716, 1, 1, "", "mean"], [717, 1, 1, "", "median"], [718, 1, 1, "", "melt"], [719, 1, 1, "", "merge_sorted"], [720, 1, 1, "", "min"], [721, 1, 1, "", "null_count"], [722, 1, 1, "", "pipe"], [723, 1, 1, "", "profile"], [724, 1, 1, "", "quantile"], [725, 1, 1, "", "read_json"], [726, 1, 1, "", "rename"], [727, 1, 1, "", "reverse"], [728, 2, 1, "", "schema"], [729, 1, 1, "", "select"], [730, 1, 1, "", "select_seq"], [731, 1, 1, "", "serialize"], [732, 1, 1, "", "set_sorted"], [733, 1, 1, "", "shift"], [734, 1, 1, "", "shift_and_fill"], [735, 1, 1, "", "show_graph"], [48, 1, 1, "", "sink_csv"], [49, 1, 1, "", "sink_ipc"], [50, 1, 1, "", "sink_parquet"], [736, 1, 1, "", "slice"], [737, 1, 1, "", "sort"], [738, 1, 1, "", "std"], [739, 1, 1, "", "sum"], [740, 1, 1, "", "tail"], [741, 1, 1, "", "take_every"], [742, 1, 1, "", "top_k"], [743, 1, 1, "", "unique"], [744, 1, 1, "", "unnest"], [745, 1, 1, "", "update"], [746, 1, 1, "", "var"], [747, 2, 1, "", "width"], [748, 1, 1, "", "with_columns"], [749, 1, 1, "", "with_columns_seq"], [750, 1, 1, "", "with_context"], [751, 1, 1, "", "with_row_count"], [752, 1, 1, "", "write_json"]], "polars.List": [[51, 1, 1, "", "__init__"]], "polars.Null": [[52, 1, 1, "", "__init__"]], "polars.Object": [[53, 1, 1, "", "__init__"]], "polars.SQLContext": [[1106, 1, 1, "", "__enter__"], [1106, 1, 1, "", "__exit__"], [1106, 1, 1, "", "__init__"], [54, 1, 1, "", "execute"], [55, 1, 1, "", "register"], [56, 1, 1, "", "register_globals"], [57, 1, 1, "", "register_many"], [58, 1, 1, "", "tables"], [59, 1, 1, "", "unregister"]], "polars.Series": [[777, 1, 1, "", "abs"], [778, 1, 1, "", "alias"], [779, 1, 1, "", "all"], [780, 1, 1, "", "any"], [781, 1, 1, "", "append"], [782, 1, 1, "", "apply"], [783, 1, 1, "", "arccos"], [784, 1, 1, "", "arccosh"], [785, 1, 1, "", "arcsin"], [786, 1, 1, "", "arcsinh"], [787, 1, 1, "", "arctan"], [788, 1, 1, "", "arctanh"], [789, 1, 1, "", "arg_max"], [790, 1, 1, "", "arg_min"], [791, 1, 1, "", "arg_sort"], [792, 1, 1, "", "arg_true"], [793, 1, 1, "", "arg_unique"], [803, 1, 1, "", "bottom_k"], [804, 1, 1, "", "cast"], [805, 3, 1, "", "cat"], [811, 1, 1, "", "cbrt"], [812, 1, 1, "", "ceil"], [813, 1, 1, "", "chunk_lengths"], [814, 1, 1, "", "clear"], [815, 1, 1, "", "clip"], [816, 1, 1, "", "clip_max"], [817, 1, 1, "", "clip_min"], [818, 1, 1, "", "clone"], [819, 1, 1, "", "cos"], [820, 1, 1, "", "cosh"], [821, 1, 1, "", "cummax"], [822, 1, 1, "", "cummin"], [823, 1, 1, "", "cumprod"], [824, 1, 1, "", "cumsum"], [825, 1, 1, "", "cumulative_eval"], [826, 1, 1, "", "cut"], [827, 1, 1, "", "describe"], [828, 1, 1, "", "diff"], [829, 1, 1, "", "dot"], [830, 1, 1, "", "drop_nans"], [831, 1, 1, "", "drop_nulls"], [832, 3, 1, "", "dt"], [878, 3, 1, "", "dtype"], [879, 1, 1, "", "entropy"], [880, 1, 1, "", "estimated_size"], [881, 1, 1, "", "ewm_mean"], [882, 1, 1, "", "ewm_std"], [883, 1, 1, "", "ewm_var"], [884, 1, 1, "", "exp"], [885, 1, 1, "", "explode"], [886, 1, 1, "", "extend"], [887, 1, 1, "", "extend_constant"], [888, 1, 1, "", "fill_nan"], [889, 1, 1, "", "fill_null"], [890, 1, 1, "", "filter"], [891, 3, 1, "", "flags"], [892, 1, 1, "", "floor"], [893, 1, 1, "", "get_chunks"], [894, 1, 1, "", "has_validity"], [895, 1, 1, "", "hash"], [896, 1, 1, "", "head"], [897, 1, 1, "", "hist"], [898, 1, 1, "", "implode"], [899, 3, 1, "", "inner_dtype"], [900, 1, 1, "", "interpolate"], [901, 1, 1, "", "is_between"], [902, 1, 1, "", "is_boolean"], [903, 1, 1, "", "is_duplicated"], [904, 1, 1, "", "is_empty"], [905, 1, 1, "", "is_finite"], [906, 1, 1, "", "is_first"], [907, 1, 1, "", "is_float"], [908, 1, 1, "", "is_in"], [909, 1, 1, "", "is_infinite"], [910, 1, 1, "", "is_integer"], [911, 1, 1, "", "is_last"], [912, 1, 1, "", "is_nan"], [913, 1, 1, "", "is_not_nan"], [914, 1, 1, "", "is_not_null"], [915, 1, 1, "", "is_null"], [916, 1, 1, "", "is_numeric"], [917, 1, 1, "", "is_sorted"], [918, 1, 1, "", "is_temporal"], [919, 1, 1, "", "is_unique"], [920, 1, 1, "", "is_utf8"], [921, 1, 1, "", "item"], [922, 1, 1, "", "kurtosis"], [923, 1, 1, "", "len"], [924, 1, 1, "", "limit"], [925, 3, 1, "", "list"], [962, 1, 1, "", "log"], [963, 1, 1, "", "log10"], [964, 1, 1, "", "log1p"], [965, 1, 1, "", "lower_bound"], [966, 1, 1, "", "map_dict"], [967, 1, 1, "", "map_elements"], [968, 1, 1, "", "max"], [969, 1, 1, "", "mean"], [970, 1, 1, "", "median"], [971, 1, 1, "", "min"], [972, 1, 1, "", "mode"], [973, 1, 1, "", "n_chunks"], [974, 1, 1, "", "n_unique"], [975, 3, 1, "", "name"], [976, 1, 1, "", "nan_max"], [977, 1, 1, "", "nan_min"], [978, 1, 1, "", "new_from_index"], [979, 1, 1, "", "not_"], [980, 1, 1, "", "null_count"], [981, 1, 1, "", "pct_change"], [982, 1, 1, "", "peak_max"], [983, 1, 1, "", "peak_min"], [984, 1, 1, "", "product"], [985, 1, 1, "", "qcut"], [986, 1, 1, "", "quantile"], [987, 1, 1, "", "rank"], [988, 1, 1, "", "rechunk"], [989, 1, 1, "", "reinterpret"], [990, 1, 1, "", "rename"], [991, 1, 1, "", "reshape"], [992, 1, 1, "", "reverse"], [993, 1, 1, "", "rle"], [994, 1, 1, "", "rle_id"], [995, 1, 1, "", "rolling_apply"], [996, 1, 1, "", "rolling_map"], [997, 1, 1, "", "rolling_max"], [998, 1, 1, "", "rolling_mean"], [999, 1, 1, "", "rolling_median"], [1000, 1, 1, "", "rolling_min"], [1001, 1, 1, "", "rolling_quantile"], [1002, 1, 1, "", "rolling_skew"], [1003, 1, 1, "", "rolling_std"], [1004, 1, 1, "", "rolling_sum"], [1005, 1, 1, "", "rolling_var"], [1006, 1, 1, "", "round"], [1007, 1, 1, "", "sample"], [1008, 1, 1, "", "search_sorted"], [1009, 1, 1, "", "series_equal"], [1010, 1, 1, "", "set"], [1011, 1, 1, "", "set_at_idx"], [1012, 1, 1, "", "set_sorted"], [1013, 3, 1, "", "shape"], [1014, 1, 1, "", "shift"], [1015, 1, 1, "", "shift_and_fill"], [1016, 1, 1, "", "shrink_dtype"], [1017, 1, 1, "", "shrink_to_fit"], [1018, 1, 1, "", "shuffle"], [1019, 1, 1, "", "sign"], [1020, 1, 1, "", "sin"], [1021, 1, 1, "", "sinh"], [1022, 1, 1, "", "skew"], [1023, 1, 1, "", "slice"], [1024, 1, 1, "", "sort"], [1025, 1, 1, "", "sqrt"], [1026, 1, 1, "", "std"], [1027, 3, 1, "", "str"], [1069, 1, 1, "", "sum"], [1070, 1, 1, "", "tail"], [1071, 1, 1, "", "take"], [1072, 1, 1, "", "take_every"], [1073, 1, 1, "", "tan"], [1074, 1, 1, "", "tanh"], [1075, 1, 1, "", "to_arrow"], [1076, 1, 1, "", "to_dummies"], [1077, 1, 1, "", "to_frame"], [1078, 1, 1, "", "to_init_repr"], [1079, 1, 1, "", "to_list"], [1080, 1, 1, "", "to_numpy"], [1081, 1, 1, "", "to_pandas"], [1082, 1, 1, "", "to_physical"], [1083, 1, 1, "", "top_k"], [1084, 1, 1, "", "unique"], [1085, 1, 1, "", "unique_counts"], [1086, 1, 1, "", "upper_bound"], [1087, 1, 1, "", "value_counts"], [1088, 1, 1, "", "var"], [1089, 1, 1, "", "view"], [1090, 1, 1, "", "zip_with"]], "polars.Series.arr": [[794, 1, 1, "", "max"], [795, 1, 1, "", "min"], [796, 1, 1, "", "sum"], [797, 1, 1, "", "unique"]], "polars.Series.bin": [[798, 1, 1, "", "contains"], [799, 1, 1, "", "decode"], [800, 1, 1, "", "encode"], [801, 1, 1, "", "ends_with"], [802, 1, 1, "", "starts_with"]], "polars.Series.cat": [[806, 1, 1, "", "get_categories"], [807, 1, 1, "", "is_local"], [808, 1, 1, "", "set_ordering"], [809, 1, 1, "", "to_local"], [810, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[833, 1, 1, "", "base_utc_offset"], [834, 1, 1, "", "cast_time_unit"], [835, 1, 1, "", "combine"], [836, 1, 1, "", "convert_time_zone"], [837, 1, 1, "", "date"], [838, 1, 1, "", "datetime"], [839, 1, 1, "", "day"], [840, 1, 1, "", "days"], [841, 1, 1, "", "dst_offset"], [842, 1, 1, "", "epoch"], [843, 1, 1, "", "hour"], [844, 1, 1, "", "hours"], [845, 1, 1, "", "is_leap_year"], [846, 1, 1, "", "iso_year"], [847, 1, 1, "", "max"], [848, 1, 1, "", "mean"], [849, 1, 1, "", "median"], [850, 1, 1, "", "microsecond"], [851, 1, 1, "", "microseconds"], [852, 1, 1, "", "millisecond"], [853, 1, 1, "", "milliseconds"], [854, 1, 1, "", "min"], [855, 1, 1, "", "minute"], [856, 1, 1, "", "minutes"], [857, 1, 1, "", "month"], [858, 1, 1, "", "month_end"], [859, 1, 1, "", "month_start"], [860, 1, 1, "", "nanosecond"], [861, 1, 1, "", "nanoseconds"], [862, 1, 1, "", "offset_by"], [863, 1, 1, "", "ordinal_day"], [864, 1, 1, "", "quarter"], [865, 1, 1, "", "replace_time_zone"], [866, 1, 1, "", "round"], [867, 1, 1, "", "second"], [868, 1, 1, "", "seconds"], [869, 1, 1, "", "strftime"], [870, 1, 1, "", "time"], [871, 1, 1, "", "timestamp"], [872, 1, 1, "", "to_string"], [873, 1, 1, "", "truncate"], [874, 1, 1, "", "week"], [875, 1, 1, "", "weekday"], [876, 1, 1, "", "with_time_unit"], [877, 1, 1, "", "year"]], "polars.Series.list": [[926, 1, 1, "", "all"], [927, 1, 1, "", "any"], [928, 1, 1, "", "arg_max"], [929, 1, 1, "", "arg_min"], [930, 1, 1, "", "concat"], [931, 1, 1, "", "contains"], [932, 1, 1, "", "count_match"], [933, 1, 1, "", "diff"], [934, 1, 1, "", "difference"], [935, 1, 1, "", "eval"], [936, 1, 1, "", "explode"], [937, 1, 1, "", "first"], [938, 1, 1, "", "get"], [939, 1, 1, "", "head"], [940, 1, 1, "", "intersection"], [941, 1, 1, "", "join"], [942, 1, 1, "", "last"], [943, 1, 1, "", "lengths"], [944, 1, 1, "", "max"], [945, 1, 1, "", "mean"], [946, 1, 1, "", "min"], [947, 1, 1, "", "reverse"], [948, 1, 1, "", "set_difference"], [949, 1, 1, "", "set_intersection"], [950, 1, 1, "", "set_symmetric_difference"], [951, 1, 1, "", "set_union"], [952, 1, 1, "", "shift"], [953, 1, 1, "", "slice"], [954, 1, 1, "", "sort"], [955, 1, 1, "", "sum"], [956, 1, 1, "", "symmetric_difference"], [957, 1, 1, "", "tail"], [958, 1, 1, "", "take"], [959, 1, 1, "", "to_struct"], [960, 1, 1, "", "union"], [961, 1, 1, "", "unique"]], "polars.Series.str": [[1028, 1, 1, "", "concat"], [1029, 1, 1, "", "contains"], [1030, 1, 1, "", "count_match"], [1031, 1, 1, "", "decode"], [1032, 1, 1, "", "encode"], [1033, 1, 1, "", "ends_with"], [1034, 1, 1, "", "explode"], [1035, 1, 1, "", "extract"], [1036, 1, 1, "", "extract_all"], [1037, 1, 1, "", "extract_groups"], [1038, 1, 1, "", "json_extract"], [1039, 1, 1, "", "json_path_match"], [1040, 1, 1, "", "lengths"], [1041, 1, 1, "", "ljust"], [1042, 1, 1, "", "lstrip"], [1043, 1, 1, "", "n_chars"], [1044, 1, 1, "", "parse_int"], [1045, 1, 1, "", "replace"], [1046, 1, 1, "", "replace_all"], [1047, 1, 1, "", "rjust"], [1048, 1, 1, "", "rstrip"], [1049, 1, 1, "", "slice"], [1050, 1, 1, "", "split"], [1051, 1, 1, "", "split_exact"], [1052, 1, 1, "", "splitn"], [1053, 1, 1, "", "starts_with"], [1054, 1, 1, "", "strip"], [1055, 1, 1, "", "strptime"], [1056, 1, 1, "", "to_date"], [1057, 1, 1, "", "to_datetime"], [1058, 1, 1, "", "to_decimal"], [1059, 1, 1, "", "to_lowercase"], [1060, 1, 1, "", "to_time"], [1061, 1, 1, "", "to_titlecase"], [1062, 1, 1, "", "to_uppercase"], [1063, 1, 1, "", "zfill"]], "polars.Series.struct": [[1064, 1, 1, "", "field"], [1065, 3, 1, "", "fields"], [1066, 1, 1, "", "rename_fields"], [1067, 3, 1, "", "schema"], [1068, 1, 1, "", "unnest"]], "polars.StringCache": [[60, 1, 1, "", "__init__"]], "polars.Struct": [[61, 1, 1, "", "__init__"]], "polars.Time": [[62, 1, 1, "", "__init__"]], "polars.UInt16": [[63, 1, 1, "", "__init__"]], "polars.UInt32": [[64, 1, 1, "", "__init__"]], "polars.UInt64": [[65, 1, 1, "", "__init__"]], "polars.UInt8": [[66, 1, 1, "", "__init__"]], "polars.Unknown": [[67, 1, 1, "", "__init__"]], "polars.Utf8": [[68, 1, 1, "", "__init__"]], "polars.api": [[70, 4, 1, "", "register_dataframe_namespace"], [71, 4, 1, "", "register_expr_namespace"], [72, 4, 1, "", "register_lazyframe_namespace"], [73, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[246, 1, 1, "", "__iter__"], [247, 1, 1, "", "agg"], [248, 1, 1, "", "all"], [249, 1, 1, "", "apply"], [250, 1, 1, "", "count"], [251, 1, 1, "", "first"], [252, 1, 1, "", "head"], [253, 1, 1, "", "last"], [254, 1, 1, "", "map_groups"], [255, 1, 1, "", "max"], [256, 1, 1, "", "mean"], [257, 1, 1, "", "median"], [258, 1, 1, "", "min"], [259, 1, 1, "", "n_unique"], [260, 1, 1, "", "quantile"], [261, 1, 1, "", "sum"], [262, 1, 1, "", "tail"]], "polars.exceptions": [[78, 5, 1, "", "ArrowError"], [79, 5, 1, "", "ColumnNotFoundError"], [80, 5, 1, "", "ComputeError"], [81, 5, 1, "", "DuplicateError"], [82, 5, 1, "", "InvalidOperationError"], [83, 5, 1, "", "NoDataError"], [84, 5, 1, "", "NoRowsReturnedError"], [85, 5, 1, "", "PolarsPanicError"], [86, 5, 1, "", "RowsError"], [87, 5, 1, "", "SchemaError"], [88, 5, 1, "", "SchemaFieldNotFoundError"], [89, 5, 1, "", "ShapeError"], [90, 5, 1, "", "StructFieldNotFoundError"], [91, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[101, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[753, 1, 1, "", "agg"], [754, 1, 1, "", "all"], [755, 1, 1, "", "apply"], [756, 1, 1, "", "count"], [757, 1, 1, "", "first"], [758, 1, 1, "", "head"], [759, 1, 1, "", "last"], [760, 1, 1, "", "map_groups"], [761, 1, 1, "", "max"], [762, 1, 1, "", "mean"], [763, 1, 1, "", "median"], [764, 1, 1, "", "min"], [765, 1, 1, "", "n_unique"], [766, 1, 1, "", "quantile"], [767, 1, 1, "", "sum"], [768, 1, 1, "", "tail"]], "polars.selectors": [[775, 4, 1, "", "all"], [775, 4, 1, "", "by_dtype"], [775, 4, 1, "", "by_name"], [775, 4, 1, "", "categorical"], [775, 4, 1, "", "contains"], [775, 4, 1, "", "date"], [775, 4, 1, "", "datetime"], [775, 4, 1, "", "duration"], [775, 4, 1, "", "ends_with"], [775, 4, 1, "", "expand_selector"], [775, 4, 1, "", "first"], [775, 4, 1, "", "float"], [775, 4, 1, "", "integer"], [775, 4, 1, "", "is_selector"], [775, 4, 1, "", "last"], [775, 4, 1, "", "matches"], [775, 4, 1, "", "numeric"], [775, 4, 1, "", "starts_with"], [775, 4, 1, "", "string"], [775, 4, 1, "", "temporal"], [775, 4, 1, "", "time"]], "polars.testing": [[124, 4, 1, "", "assert_frame_equal"], [125, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[126, 0, 1, "", "column"], [127, 4, 1, "", "columns"], [128, 4, 1, "", "create_list_strategy"], [129, 4, 1, "", "dataframes"], [130, 4, 1, "", "load_profile"], [131, 4, 1, "", "series"], [132, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[126, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 153, 886], "api": [1, 70, 71, 72, 73, 676], "provid": 1, "new": 1, "function": [1, 135, 664, 675, 775], "avail": 1, "registr": 1, "exampl": [1, 775, 1107], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 661, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1107], "arrai": [2, 657, 1091], "binari": [3, 658, 670, 1093], "boolean": [4, 659, 1094], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 135], "activate_decim": 6, "load": [7, 135], "restore_default": 8, "save": [9, 135], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 135], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_ipc_stream": 33, "write_json": [34, 474, 752], "write_ndjson": 35, "write_parquet": 36, "datatyp": 37, "date": [38, 334, 610, 837], "datetim": [39, 335, 613, 838], "decim": 40, "durat": [41, 614], "float32": 42, "float64": 43, "int16": 44, "int32": 45, "int64": 46, "int8": 47, "lazyfram": [48, 49, 50, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772], "sink_csv": 48, "sink_ipc": 49, "sink_parquet": 50, "list": [51, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 666, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 1100], "null": 52, "object": 53, "sqlcontext": [54, 55, 56, 57, 58, 59], "execut": 54, "regist": 55, "register_glob": 56, "register_mani": 57, "tabl": 58, "unregist": 59, "stringcach": [60, 675], "struct": [61, 568, 569, 647, 672, 1064, 1065, 1066, 1067, 1068, 1104], "time": [62, 363, 651, 870], "uint16": 63, "uint32": 64, "uint64": 65, "uint8": 66, "unknown": 67, "utf8": 68, "align_fram": 69, "register_dataframe_namespac": 70, "register_expr_namespac": 71, "register_lazyframe_namespac": 72, "register_series_namespac": 73, "build_info": 74, "collect_al": 75, "concat": [76, 420, 532, 930, 1028], "enable_string_cach": 77, "except": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 272], "arrowerror": 78, "columnnotfounderror": 79, "computeerror": 80, "duplicateerror": 81, "invalidoperationerror": 82, "nodataerror": 83, "norowsreturnederror": 84, "polarspanicerror": 85, "rowserror": 86, "schemaerror": 87, "schemafieldnotfounderror": 88, "shapeerror": 89, "structfieldnotfounderror": 90, "toomanyrowsreturnederror": 91, "from_arrow": 92, "from_datafram": 93, "from_dict": [94, 95], "from_numpi": 96, "from_panda": 97, "from_record": 98, "from_repr": 99, "get_index_typ": 100, "io": 101, "csv": [101, 677], "batched_read": 101, "batchedcsvread": [101, 677], "next_batch": 101, "read_avro": 102, "read_csv": 103, "read_csv_batch": 104, "read_databas": 105, "read_database_uri": 106, "read_delta": 107, "read_excel": 108, "read_ipc": 109, "read_ipc_schema": 110, "read_ipc_stream": 111, "read_json": [112, 725], "read_ndjson": 113, "read_parquet": 114, "read_parquet_schema": 115, "scan_csv": 116, "scan_delta": 117, "scan_ipc": 118, "scan_ndjson": 119, "scan_parquet": 120, "scan_pyarrow_dataset": 121, "set_random_se": 122, "show_vers": 123, "test": [124, 125, 126, 127, 128, 129, 130, 131, 132, 1107], "assert_frame_equ": 124, "assert_series_equ": 125, "parametr": [126, 127, 128, 129, 130, 131, 132, 1107], "column": [126, 127, 144, 662, 686], "create_list_strategi": 128, "load_profil": 130, "seri": [131, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1099], "set_profil": 132, "threadpool_s": 133, "using_string_cach": 134, "option": 135, "current": 135, "us": 135, "context": 135, "manag": 135, "decor": 135, "aggreg": [136, 273, 678, 776], "__dataframe__": 137, "appli": [138, 249, 282, 592, 755, 782], "approx_n_uniqu": [139, 283, 593, 679], "approx_uniqu": [140, 680], "bottom_k": [141, 305, 681, 803], "clear": [142, 683, 814], "clone": [143, 684, 818], "corr": [145, 603], "describ": [146, 827], "drop": [147, 688], "drop_in_plac": 148, "drop_nul": [149, 329, 689, 831], "dtype": [150, 690, 878], "estimated_s": [151, 880], "explod": [152, 379, 426, 538, 692, 885, 936, 1034], "fill_nan": [154, 381, 694, 888], "fill_nul": [155, 382, 695, 889], "filter": [156, 383, 696, 890], "find_idx_by_nam": 157, "flag": [158, 891], "fold": [159, 618], "frame_equ": 160, "get_column": [161, 162], "glimps": 163, "group_bi": [164, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 699, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768], "group_by_dynam": [165, 700], "group_by_rol": [166, 701], "groupbi": [167, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 267, 702, 771], "groupby_dynam": [168, 703], "groupby_rol": [169, 704], "hash_row": 170, "head": [171, 252, 393, 429, 622, 705, 758, 896, 939], "height": 172, "hstack": 173, "insert_at_idx": 174, "interpol": [175, 396, 707, 900], "is_dupl": [176, 398, 903], "is_empti": [177, 904], "is_uniqu": [178, 409, 919], "item": [179, 921], "iter_row": 180, "iter_slic": 181, "join": [182, 431, 708, 941], "join_asof": [183, 709], "lazi": [184, 711], "limit": [185, 415, 712, 924], "map_row": 186, "max": [187, 255, 295, 434, 462, 631, 715, 761, 794, 847, 944, 968], "mean": [188, 256, 435, 463, 633, 716, 762, 848, 945, 969], "median": [189, 257, 464, 634, 717, 763, 849, 970], "melt": [190, 718], "merge_sort": [191, 719], "min": [192, 258, 296, 436, 475, 635, 720, 764, 795, 854, 946, 971], "n_chunk": [193, 973], "n_uniqu": [194, 259, 479, 637, 765, 974], "null_count": [195, 485, 721, 980], "partition_bi": 196, "pipe": [197, 489, 722], "pivot": 198, "product": [199, 492, 984], "quantil": [200, 260, 494, 639, 724, 766, 986], "rechunk": [201, 497, 988], "renam": [202, 726, 990], "replac": [203, 549, 1045], "replace_at_idx": 204, "revers": [205, 437, 501, 727, 947, 992], "row": [206, 207], "rows_by_kei": 208, "sampl": [209, 516, 1007], "schema": [210, 728, 1067], "select": [211, 270, 644, 669, 729, 774, 1102], "select_seq": [212, 730], "set_sort": [213, 518, 732, 1012], "shape": [214, 1013], "shift": [215, 442, 519, 733, 952, 1014], "shift_and_fil": [216, 520, 734, 1015], "shrink_to_fit": [217, 1017], "slice": [218, 443, 527, 553, 736, 953, 1023, 1049], "sort": [219, 444, 528, 737, 954, 1024], "std": [220, 531, 646, 738, 1026], "sum": [221, 261, 297, 445, 572, 648, 739, 767, 796, 955, 1069], "tail": [222, 262, 447, 573, 650, 740, 768, 957, 1070], "take_everi": [223, 575, 741, 1072], "to_arrow": [224, 1075], "to_dict": [225, 226], "to_dummi": [227, 1076], "to_init_repr": [228, 1078], "to_numpi": [229, 1080], "to_panda": [230, 1081], "to_seri": 231, "to_struct": [232, 449, 959], "top_k": [233, 579, 742, 1083], "transpos": 234, "uniqu": [235, 298, 451, 581, 743, 797, 961, 1084], "unnest": [236, 744, 1068], "unstack": 237, "updat": [238, 745], "upsampl": 239, "var": [240, 585, 654, 746, 1088], "vstack": 241, "width": [242, 747], "with_column": [243, 748], "with_columns_seq": [244, 749], "with_row_count": [245, 751], "__iter__": 246, "agg": [247, 753], "all": [248, 278, 416, 588, 754, 779, 926], "count": [250, 317, 604, 756], "first": [251, 384, 427, 617, 697, 757, 937], "last": [253, 412, 432, 626, 710, 759, 942], "map_group": [254, 630, 760], "attribut": [263, 769, 1092], "comput": [264, 663, 1096], "descript": [265, 770, 1097], "export": [266, 1098], "miscellan": [269, 668, 675, 773, 1101], "manipul": [270, 669, 774, 1102], "data": 271, "type": 271, "numer": [271, 670], "tempor": [271, 673, 1105], "nest": 271, "other": 271, "expr": [274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "ab": [274, 777], "add": 275, "agg_group": 276, "alia": [277, 778], "and_": 279, "ani": [280, 417, 590, 780, 927], "append": [281, 781], "arcco": [284, 783], "arccosh": [285, 784], "arcsin": [286, 785], "arcsinh": [287, 786], "arctan": [288, 787], "arctanh": [289, 788], "arg_max": [290, 418, 789, 928], "arg_min": [291, 419, 790, 929], "arg_sort": [292, 791], "arg_tru": [293, 792], "arg_uniqu": [294, 793], "arr": [295, 296, 297, 298, 794, 795, 796, 797], "backward_fil": 299, "bin": [300, 301, 302, 303, 304, 798, 799, 800, 801, 802], "contain": [300, 421, 533, 798, 931, 1029], "decod": [301, 535, 799, 1031], "encod": [302, 536, 800, 1032], "ends_with": [303, 537, 801, 1033], "starts_with": [304, 557, 802, 1053], "cach": [306, 682], "cast": [307, 804], "cat": [308, 309, 805, 806, 807, 808, 809, 810], "get_categori": [308, 806], "set_ord": [309, 808], "cbrt": [310, 811], "ceil": [311, 812], "clip": [312, 815], "clip_max": [313, 816], "clip_min": [314, 817], "co": [315, 819], "cosh": [316, 820], "cumcount": 318, "cummax": [319, 821], "cummin": [320, 822], "cumprod": [321, 823], "cumsum": [322, 608, 824], "cumulative_ev": [323, 825], "cut": [324, 826], "degre": 325, "diff": [326, 423, 828, 933], "dot": [327, 829], "drop_nan": [328, 830], "dt": [330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877], "base_utc_offset": [330, 833], "cast_time_unit": [331, 834], "combin": [332, 835], "convert_time_zon": [333, 836], "dai": [336, 337, 839, 840], "dst_offset": [338, 841], "epoch": [339, 842], "hour": [340, 341, 843, 844], "is_leap_year": [342, 845], "iso_year": [343, 846], "microsecond": [344, 345, 850, 851], "millisecond": [346, 347, 852, 853], "minut": [348, 349, 855, 856], "month": [350, 857], "month_end": [351, 858], "month_start": [352, 859], "nanosecond": [353, 354, 860, 861], "offset_bi": [355, 862], "ordinal_dai": [356, 863], "quarter": [357, 864], "replace_time_zon": [358, 865], "round": [359, 515, 866, 1006], "second": [360, 361, 867, 868], "strftime": [362, 869], "timestamp": [364, 871], "to_str": [365, 872], "truncat": [366, 873], "week": [367, 874], "weekdai": [368, 875], "with_time_unit": [369, 876], "year": [370, 877], "entropi": [371, 879], "eq": [372, 465], "eq_miss": 373, "ewm_mean": [374, 881], "ewm_std": [375, 882], "ewm_var": [376, 883], "exclud": [377, 616], "exp": [378, 884], "extend_const": [380, 887], "flatten": 385, "floor": [386, 892], "floordiv": 387, "forward_fil": 388, "from_json": [389, 698], "ge": 390, "gt": 391, "hash": [392, 895], "implod": [394, 623, 898], "inspect": [395, 706], "is_between": [397, 901], "is_finit": [399, 905], "is_first": [400, 906], "is_in": [401, 908], "is_infinit": [402, 909], "is_last": [403, 911], "is_nan": [404, 912], "is_not": 405, "is_not_nan": [406, 913], "is_not_nul": [407, 914], "is_nul": [408, 915], "keep_nam": 410, "kurtosi": [411, 922], "le": 413, "len": [414, 923], "count_match": [422, 534, 932, 1030], "differ": [424, 934], "eval": [425, 935], "get": [428, 938], "intersect": [430, 940], "length": [433, 544, 943, 1040], "set_differ": [438, 948], "set_intersect": [439, 949], "set_symmetric_differ": [440, 950], "set_union": [441, 951], "symmetric_differ": [446, 956], "take": [448, 574, 958, 1071], "union": [450, 960], "log": [452, 962], "log10": [453, 963], "log1p": [454, 964], "lower_bound": [455, 965], "lt": 456, "map": [457, 628, 713], "map_alia": 458, "map_batch": [459, 629, 714], "map_dict": [460, 966], "map_el": [461, 967], "meta": [465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 667], "has_multiple_output": 466, "is_regex_project": 467, "ne": [468, 482], "output_nam": 469, "pop": 470, "root_nam": 471, "tree_format": 472, "undo_alias": 473, "mod": 476, "mode": [477, 972], "mul": 478, "nan_max": [480, 976], "nan_min": [481, 977], "ne_miss": 483, "not_": [484, 979], "or_": 486, "over": 487, "pct_chang": [488, 981], "pow": 490, "prefix": 491, "qcut": [493, 985], "radian": 495, "rank": [496, 987], "reinterpret": [498, 989], "repeat_bi": 499, "reshap": [500, 991], "rle": [502, 993], "rle_id": [503, 994], "rolling_appli": [504, 995], "rolling_map": [505, 996], "rolling_max": [506, 997], "rolling_mean": [507, 998], "rolling_median": [508, 999], "rolling_min": [509, 1000], "rolling_quantil": [510, 1001], "rolling_skew": [511, 1002], "rolling_std": [512, 1003], "rolling_sum": [513, 1004], "rolling_var": [514, 1005], "search_sort": [517, 1008], "shrink_dtyp": [521, 1016], "shuffl": [522, 1018], "sign": [523, 1019], "sin": [524, 1020], "sinh": [525, 1021], "skew": [526, 1022], "sort_bi": 529, "sqrt": [530, 1025], "str": [532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063], "extract": [539, 1035], "extract_al": [540, 1036], "extract_group": [541, 1037], "json_extract": [542, 1038], "json_path_match": [543, 1039], "ljust": [545, 1041], "lstrip": [546, 1042], "n_char": [547, 1043], "parse_int": [548, 1044], "replace_al": [550, 1046], "rjust": [551, 1047], "rstrip": [552, 1048], "split": [554, 1050], "split_exact": [555, 1051], "splitn": [556, 1052], "strip": [558, 1054], "strptime": [559, 1055], "to_dat": [560, 1056], "to_datetim": [561, 1057], "to_decim": [562, 1058], "to_lowercas": [563, 1059], "to_tim": [564, 1060], "to_titlecas": [565, 1061], "to_uppercas": [566, 1062], "zfill": [567, 1063], "field": [568, 1064, 1065], "rename_field": [569, 1066], "sub": 570, "suffix": 571, "tan": [576, 1073], "tanh": [577, 1074], "to_phys": [578, 1082], "truediv": 580, "unique_count": [582, 1085], "upper_bound": [583, 1086], "value_count": [584, 1087], "where": 586, "xor": 587, "all_horizont": 589, "any_horizont": 591, "arang": 594, "arctan2": 595, "arctan2d": 596, "arg_sort_bi": 597, "arg_wher": 598, "avg": 599, "coalesc": 600, "concat_list": 601, "concat_str": 602, "cov": 605, "cumfold": 606, "cumreduc": 607, "cumsum_horizont": 609, "date_rang": [611, 612], "element": 615, "format": 619, "from_epoch": 620, "group": 621, "int_rang": [624, 625], "lit": 627, "max_horizont": 632, "min_horizont": 636, "ones": 638, "reduc": 640, "repeat": 641, "rolling_corr": 642, "rolling_cov": 643, "sql_expr": 645, "sum_horizont": 649, "time_rang": [652, 653], "when": 655, "zero": 656, "categori": [660, 1095], "col": 661, "name": [662, 975], "express": 665, "oper": [670, 775], "conjunct": 670, "comparison": 670, "string": [671, 1103], "window": 674, "convers": 675, "parallel": 675, "random": 675, "refer": 676, "input": 677, "output": 677, "feather": 677, "ipc": 677, "parquet": 677, "databas": 677, "json": 677, "avro": 677, "excel": 677, "delta": 677, "lake": 677, "dataset": 677, "collect": 685, "deseri": 687, "explain": 691, "fetch": 693, "profil": [723, 1107], "serial": 731, "show_graph": 735, "with_context": 750, "lazygroupbi": [753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768], "read": 773, "write": 773, "logic": 773, "plan": 773, "selector": 775, "import": 775, "set": [775, 1010], "is_loc": 807, "to_loc": 809, "uses_lexical_ord": 810, "chunk_length": 813, "get_chunk": 893, "has_valid": 894, "hist": 897, "inner_dtyp": 899, "is_boolean": 902, "is_float": 907, "is_integ": 910, "is_numer": 916, "is_sort": 917, "is_tempor": 918, "is_utf8": 920, "new_from_index": 978, "peak_max": 982, "peak_min": 983, "series_equ": 1009, "set_at_idx": 1011, "to_fram": 1077, "to_list": 1079, "view": 1089, "zip_with": 1090, "sql": 1106, "method": 1106, "assert": 1107, "primit": 1107, "strategi": 1107, "helper": 1107, "util": 1108}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.read_database_uri": [[106, "polars-read-database-uri"]], "polars.read_parquet": [[114, "polars-read-parquet"]], "polars.DataFrame.approx_n_unique": [[139, "polars-dataframe-approx-n-unique"]], "polars.exceptions.SchemaFieldNotFoundError": [[88, "polars-exceptions-schemafieldnotfounderror"]], "polars.DataFrame.approx_unique": [[140, "polars-dataframe-approx-unique"]], "polars.DataFrame.clone": [[143, "polars-dataframe-clone"]], "polars.scan_ndjson": [[119, "polars-scan-ndjson"]], "polars.exceptions.RowsError": [[86, "polars-exceptions-rowserror"]], "polars.exceptions.ColumnNotFoundError": [[79, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.SchemaError": [[87, "polars-exceptions-schemaerror"]], "polars.from_dicts": [[95, "polars-from-dicts"]], "polars.read_csv": [[103, "polars-read-csv"]], "polars.read_delta": [[107, "polars-read-delta"]], "polars.DataFrame.describe": [[146, "polars-dataframe-describe"]], "polars.testing.parametric.column": [[126, "polars-testing-parametric-column"]], "polars.exceptions.PolarsPanicError": [[85, "polars-exceptions-polarspanicerror"]], "polars.from_pandas": [[97, "polars-from-pandas"]], "polars.read_avro": [[102, "polars-read-avro"]], "polars.read_csv_batched": [[104, "polars-read-csv-batched"]], "polars.scan_ipc": [[118, "polars-scan-ipc"]], "polars.testing.assert_frame_equal": [[124, "polars-testing-assert-frame-equal"]], "polars.testing.parametric.set_profile": [[132, "polars-testing-parametric-set-profile"]], "Aggregation": [[136, "aggregation"], [776, "aggregation"], [678, "aggregation"], [273, "aggregation"]], "polars.DataFrame.drop": [[147, "polars-dataframe-drop"]], "polars.exceptions.TooManyRowsReturnedError": [[91, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_records": [[98, "polars-from-records"]], "polars.exceptions.StructFieldNotFoundError": [[90, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.clear": [[142, "polars-dataframe-clear"]], "polars.DataFrame.corr": [[145, "polars-dataframe-corr"]], "polars.DataFrame.apply": [[138, "polars-dataframe-apply"]], "polars.collect_all": [[75, "polars-collect-all"]], "polars.testing.assert_series_equal": [[125, "polars-testing-assert-series-equal"]], "polars.concat": [[76, "polars-concat"]], "polars.using_string_cache": [[134, "polars-using-string-cache"]], "polars.testing.parametric.dataframes": [[129, "polars-testing-parametric-dataframes"]], "polars.from_repr": [[99, "polars-from-repr"]], "polars.scan_delta": [[117, "polars-scan-delta"]], "polars.threadpool_size": [[133, "polars-threadpool-size"]], "polars.scan_pyarrow_dataset": [[121, "polars-scan-pyarrow-dataset"]], "polars.read_ipc_schema": [[110, "polars-read-ipc-schema"]], "polars.set_random_seed": [[122, "polars-set-random-seed"]], "polars.testing.parametric.load_profile": [[130, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.series": [[131, "polars-testing-parametric-series"]], "polars.DataFrame.__dataframe__": [[137, "polars-dataframe-dataframe"]], "polars.DataFrame.columns": [[144, "polars-dataframe-columns"]], "polars.exceptions.DuplicateError": [[81, "polars-exceptions-duplicateerror"]], "polars.get_index_type": [[100, "polars-get-index-type"]], "polars.exceptions.ShapeError": [[89, "polars-exceptions-shapeerror"]], "polars.exceptions.NoDataError": [[83, "polars-exceptions-nodataerror"]], "polars.enable_string_cache": [[77, "polars-enable-string-cache"]], "polars.exceptions.NoRowsReturnedError": [[84, "polars-exceptions-norowsreturnederror"]], "polars.from_dataframe": [[93, "polars-from-dataframe"]], "polars.from_numpy": [[96, "polars-from-numpy"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[101, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_database": [[105, "polars-read-database"]], "polars.from_dict": [[94, "polars-from-dict"]], "polars.read_json": [[112, "polars-read-json"]], "polars.read_parquet_schema": [[115, "polars-read-parquet-schema"]], "polars.build_info": [[74, "polars-build-info"]], "polars.scan_parquet": [[120, "polars-scan-parquet"]], "polars.exceptions.InvalidOperationError": [[82, "polars-exceptions-invalidoperationerror"]], "polars.from_arrow": [[92, "polars-from-arrow"]], "polars.DataFrame.bottom_k": [[141, "polars-dataframe-bottom-k"]], "polars.testing.parametric.create_list_strategy": [[128, "polars-testing-parametric-create-list-strategy"]], "Config": [[135, "config"]], "Config options": [[135, "config-options"]], "Config load, save, and current state": [[135, "config-load-save-and-current-state"]], "Use as a context manager": [[135, "use-as-a-context-manager"]], "Use as a function decorator": [[135, "use-as-a-function-decorator"]], "polars.testing.parametric.columns": [[127, "polars-testing-parametric-columns"]], "polars.scan_csv": [[116, "polars-scan-csv"]], "polars.exceptions.ArrowError": [[78, "polars-exceptions-arrowerror"]], "polars.exceptions.ComputeError": [[80, "polars-exceptions-computeerror"]], "polars.show_versions": [[123, "polars-show-versions"]], "polars.read_ipc": [[109, "polars-read-ipc"]], "polars.read_ndjson": [[113, "polars-read-ndjson"]], "polars.read_excel": [[108, "polars-read-excel"]], "polars.read_ipc_stream": [[111, "polars-read-ipc-stream"]], "polars.api.register_expr_namespace": [[71, "polars-api-register-expr-namespace"]], "polars.Object": [[53, "polars-object"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.Int8": [[47, "polars-int8"]], "polars.SQLContext.register_globals": [[56, "polars-sqlcontext-register-globals"]], "polars.List": [[51, "polars-list"]], "polars.api.register_dataframe_namespace": [[70, "polars-api-register-dataframe-namespace"]], "polars.Int32": [[45, "polars-int32"]], "polars.Null": [[52, "polars-null"]], "polars.Datetime": [[39, "polars-datetime"]], "polars.Decimal": [[40, "polars-decimal"]], "polars.Time": [[62, "polars-time"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.SQLContext.execute": [[54, "polars-sqlcontext-execute"]], "polars.UInt16": [[63, "polars-uint16"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Array": [[2, "polars-array"]], "polars.api.register_lazyframe_namespace": [[72, "polars-api-register-lazyframe-namespace"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Duration": [[41, "polars-duration"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_ndjson": [[35, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.SQLContext.register_many": [[57, "polars-sqlcontext-register-many"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Int64": [[46, "polars-int64"]], "polars.DataType": [[37, "polars-datatype"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.LazyFrame.sink_ipc": [[49, "polars-lazyframe-sink-ipc"]], "polars.UInt64": [[65, "polars-uint64"]], "polars.LazyFrame.sink_parquet": [[50, "polars-lazyframe-sink-parquet"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.Int16": [[44, "polars-int16"]], "polars.DataFrame.write_json": [[34, "polars-dataframe-write-json"]], "polars.SQLContext.register": [[55, "polars-sqlcontext-register"]], "polars.UInt32": [[64, "polars-uint32"]], "polars.api.register_series_namespace": [[73, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.StringCache": [[60, "polars-stringcache"]], "polars.align_frames": [[69, "polars-align-frames"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.DataFrame.write_parquet": [[36, "polars-dataframe-write-parquet"]], "polars.LazyFrame.sink_csv": [[48, "polars-lazyframe-sink-csv"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.SQLContext.unregister": [[59, "polars-sqlcontext-unregister"]], "polars.Struct": [[61, "polars-struct"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.UInt8": [[66, "polars-uint8"]], "polars.SQLContext.tables": [[58, "polars-sqlcontext-tables"]], "polars.Unknown": [[67, "polars-unknown"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1107, "examples"], [775, "examples"]], "polars.Date": [[38, "polars-date"]], "polars.Float32": [[42, "polars-float32"]], "polars.Binary": [[3, "polars-binary"]], "polars.Float64": [[43, "polars-float64"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Utf8": [[68, "polars-utf8"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.DataFrame.write_ipc_stream": [[33, "polars-dataframe-write-ipc-stream"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "Index": [[0, "index"]], "polars.Series.qcut": [[985, "polars-series-qcut"]], "polars.Series.min": [[971, "polars-series-min"]], "polars.Series.rolling_median": [[999, "polars-series-rolling-median"]], "polars.Series.str.extract": [[1035, "polars-series-str-extract"]], "polars.Series.skew": [[1022, "polars-series-skew"]], "polars.Series.rolling_min": [[1000, "polars-series-rolling-min"]], "polars.Series.sin": [[1020, "polars-series-sin"]], "polars.Series.series_equal": [[1009, "polars-series-series-equal"]], "polars.Series.sqrt": [[1025, "polars-series-sqrt"]], "polars.Series.mode": [[972, "polars-series-mode"]], "polars.Series.rolling_apply": [[995, "polars-series-rolling-apply"]], "polars.Series.set_at_idx": [[1011, "polars-series-set-at-idx"]], "polars.Series.set": [[1010, "polars-series-set"]], "polars.Series.shape": [[1013, "polars-series-shape"]], "polars.Series.rechunk": [[988, "polars-series-rechunk"]], "polars.Series.product": [[984, "polars-series-product"]], "polars.Series.null_count": [[980, "polars-series-null-count"]], "polars.Series.peak_max": [[982, "polars-series-peak-max"]], "polars.Series.peak_min": [[983, "polars-series-peak-min"]], "polars.Series.n_unique": [[974, "polars-series-n-unique"]], "polars.Series.not_": [[979, "polars-series-not"]], "polars.Series.lower_bound": [[965, "polars-series-lower-bound"]], "polars.Series.str.count_match": [[1030, "polars-series-str-count-match"]], "polars.Series.round": [[1006, "polars-series-round"]], "polars.Series.sinh": [[1021, "polars-series-sinh"]], "polars.Series.max": [[968, "polars-series-max"]], "polars.Series.rle_id": [[994, "polars-series-rle-id"]], "polars.Series.rolling_mean": [[998, "polars-series-rolling-mean"]], "polars.Series.slice": [[1023, "polars-series-slice"]], "polars.Series.nan_max": [[976, "polars-series-nan-max"]], "polars.Series.sort": [[1024, "polars-series-sort"]], "polars.Series.str.explode": [[1034, "polars-series-str-explode"]], "polars.Series.quantile": [[986, "polars-series-quantile"]], "polars.Series.rename": [[990, "polars-series-rename"]], "polars.Series.rolling_std": [[1003, "polars-series-rolling-std"]], "polars.Series.median": [[970, "polars-series-median"]], "polars.Series.rolling_map": [[996, "polars-series-rolling-map"]], "polars.Series.rolling_skew": [[1002, "polars-series-rolling-skew"]], "polars.Series.str.concat": [[1028, "polars-series-str-concat"]], "polars.Series.reinterpret": [[989, "polars-series-reinterpret"]], "polars.Series.str.ends_with": [[1033, "polars-series-str-ends-with"]], "polars.Series.sample": [[1007, "polars-series-sample"]], "polars.Series.map_dict": [[966, "polars-series-map-dict"]], "polars.Series.mean": [[969, "polars-series-mean"]], "polars.Series.n_chunks": [[973, "polars-series-n-chunks"]], "polars.Series.rolling_var": [[1005, "polars-series-rolling-var"]], "polars.Series.shuffle": [[1018, "polars-series-shuffle"]], "polars.Series.pct_change": [[981, "polars-series-pct-change"]], "polars.Series.rolling_max": [[997, "polars-series-rolling-max"]], "polars.Series.set_sorted": [[1012, "polars-series-set-sorted"]], "polars.Series.log10": [[963, "polars-series-log10"]], "polars.Series.str": [[1027, "polars-series-str"]], "polars.Series.rank": [[987, "polars-series-rank"]], "polars.Series.reverse": [[992, "polars-series-reverse"]], "polars.Series.rolling_sum": [[1004, "polars-series-rolling-sum"]], "polars.Series.str.contains": [[1029, "polars-series-str-contains"]], "polars.Series.shift": [[1014, "polars-series-shift"]], "polars.Series.search_sorted": [[1008, "polars-series-search-sorted"]], "polars.Series.shift_and_fill": [[1015, "polars-series-shift-and-fill"]], "polars.Series.rle": [[993, "polars-series-rle"]], "polars.Series.shrink_to_fit": [[1017, "polars-series-shrink-to-fit"]], "polars.Series.shrink_dtype": [[1016, "polars-series-shrink-dtype"]], "polars.Series.sign": [[1019, "polars-series-sign"]], "polars.Series.std": [[1026, "polars-series-std"]], "polars.Series.str.decode": [[1031, "polars-series-str-decode"]], "polars.Series.reshape": [[991, "polars-series-reshape"]], "polars.Series.str.encode": [[1032, "polars-series-str-encode"]], "polars.Series.map_elements": [[967, "polars-series-map-elements"]], "polars.Series.name": [[975, "polars-series-name"]], "polars.Series.log": [[962, "polars-series-log"]], "polars.Series.new_from_index": [[978, "polars-series-new-from-index"]], "polars.Series.nan_min": [[977, "polars-series-nan-min"]], "polars.Series.log1p": [[964, "polars-series-log1p"]], "polars.Series.rolling_quantile": [[1001, "polars-series-rolling-quantile"]], "polars.Series.flags": [[891, "polars-series-flags"]], "polars.Series.list.explode": [[936, "polars-series-list-explode"]], "polars.Series.list.contains": [[931, "polars-series-list-contains"]], "polars.Series.list.to_struct": [[959, "polars-series-list-to-struct"]], "polars.Series.list.arg_min": [[929, "polars-series-list-arg-min"]], "polars.Series.list.join": [[941, "polars-series-list-join"]], "polars.Series.implode": [[898, "polars-series-implode"]], "polars.Series.list.slice": [[953, "polars-series-list-slice"]], "polars.Series.list.eval": [[935, "polars-series-list-eval"]], "polars.Series.list.set_difference": [[948, "polars-series-list-set-difference"]], "polars.Series.list.set_union": [[951, "polars-series-list-set-union"]], "polars.Series.list.any": [[927, "polars-series-list-any"]], "polars.Series.inner_dtype": [[899, "polars-series-inner-dtype"]], "polars.Series.is_not_null": [[914, "polars-series-is-not-null"]], "polars.Series.list.arg_max": [[928, "polars-series-list-arg-max"]], "polars.Series.list.min": [[946, "polars-series-list-min"]], "polars.Series.is_integer": [[910, "polars-series-is-integer"]], "polars.Series.list.sort": [[954, "polars-series-list-sort"]], "polars.Series.list.max": [[944, "polars-series-list-max"]], "polars.Series.is_float": [[907, "polars-series-is-float"]], "polars.Series.len": [[923, "polars-series-len"]], "polars.Series.list.set_symmetric_difference": [[950, "polars-series-list-set-symmetric-difference"]], "polars.Series.is_unique": [[919, "polars-series-is-unique"]], "polars.Series.list.all": [[926, "polars-series-list-all"]], "polars.Series.list.difference": [[934, "polars-series-list-difference"]], "polars.Series.hist": [[897, "polars-series-hist"]], "polars.Series.floor": [[892, "polars-series-floor"]], "polars.Series.is_last": [[911, "polars-series-is-last"]], "polars.Series.list.sum": [[955, "polars-series-list-sum"]], "polars.Series.list.symmetric_difference": [[956, "polars-series-list-symmetric-difference"]], "polars.Series.fill_nan": [[888, "polars-series-fill-nan"]], "polars.Series.limit": [[924, "polars-series-limit"]], "polars.Series.list": [[925, "polars-series-list"]], "polars.Series.list.reverse": [[947, "polars-series-list-reverse"]], "polars.Series.is_first": [[906, "polars-series-is-first"]], "polars.Series.head": [[896, "polars-series-head"]], "polars.Series.fill_null": [[889, "polars-series-fill-null"]], "polars.Series.is_infinite": [[909, "polars-series-is-infinite"]], "polars.Series.is_utf8": [[920, "polars-series-is-utf8"]], "polars.Series.is_nan": [[912, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[913, "polars-series-is-not-nan"]], "polars.Series.is_temporal": [[918, "polars-series-is-temporal"]], "polars.Series.list.concat": [[930, "polars-series-list-concat"]], "polars.Series.is_sorted": [[917, "polars-series-is-sorted"]], "polars.Series.list.diff": [[933, "polars-series-list-diff"]], "polars.Series.is_numeric": [[916, "polars-series-is-numeric"]], "polars.Series.list.mean": [[945, "polars-series-list-mean"]], "polars.Series.is_null": [[915, "polars-series-is-null"]], "polars.Series.list.count_match": [[932, "polars-series-list-count-match"]], "polars.Series.list.tail": [[957, "polars-series-list-tail"]], "polars.Series.is_between": [[901, "polars-series-is-between"]], "polars.Series.is_in": [[908, "polars-series-is-in"]], "polars.Series.kurtosis": [[922, "polars-series-kurtosis"]], "polars.Series.list.head": [[939, "polars-series-list-head"]], "polars.Series.list.last": [[942, "polars-series-list-last"]], "polars.Series.item": [[921, "polars-series-item"]], "polars.Series.is_empty": [[904, "polars-series-is-empty"]], "polars.Series.list.get": [[938, "polars-series-list-get"]], "polars.Series.interpolate": [[900, "polars-series-interpolate"]], "polars.Series.list.take": [[958, "polars-series-list-take"]], "polars.Series.list.set_intersection": [[949, "polars-series-list-set-intersection"]], "polars.Series.is_duplicated": [[903, "polars-series-is-duplicated"]], "polars.Series.list.shift": [[952, "polars-series-list-shift"]], "polars.Series.list.unique": [[961, "polars-series-list-unique"]], "polars.Series.list.lengths": [[943, "polars-series-list-lengths"]], "polars.Series.get_chunks": [[893, "polars-series-get-chunks"]], "polars.Series.is_finite": [[905, "polars-series-is-finite"]], "polars.Series.list.intersection": [[940, "polars-series-list-intersection"]], "polars.Series.list.union": [[960, "polars-series-list-union"]], "polars.Series.list.first": [[937, "polars-series-list-first"]], "polars.Series.has_validity": [[894, "polars-series-has-validity"]], "polars.Series.filter": [[890, "polars-series-filter"]], "polars.Series.is_boolean": [[902, "polars-series-is-boolean"]], "polars.Series.hash": [[895, "polars-series-hash"]], "polars.Series.cumulative_eval": [[825, "polars-series-cumulative-eval"]], "polars.Series.drop_nans": [[830, "polars-series-drop-nans"]], "polars.Series.dt.nanosecond": [[860, "polars-series-dt-nanosecond"]], "polars.Series.dt.ordinal_day": [[863, "polars-series-dt-ordinal-day"]], "polars.Series.dt.second": [[867, "polars-series-dt-second"]], "polars.Series.dt.days": [[840, "polars-series-dt-days"]], "polars.Series.dt.month_end": [[858, "polars-series-dt-month-end"]], "polars.Series.dt.offset_by": [[862, "polars-series-dt-offset-by"]], "polars.Series.dt.min": [[854, "polars-series-dt-min"]], "polars.Series.ewm_std": [[882, "polars-series-ewm-std"]], "polars.Series.cut": [[826, "polars-series-cut"]], "polars.Series.dt.max": [[847, "polars-series-dt-max"]], "polars.Series.dt.convert_time_zone": [[836, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.datetime": [[838, "polars-series-dt-datetime"]], "polars.Series.dt.hour": [[843, "polars-series-dt-hour"]], "polars.Series.estimated_size": [[880, "polars-series-estimated-size"]], "polars.Series.dt.minute": [[855, "polars-series-dt-minute"]], "polars.Series.dt.quarter": [[864, "polars-series-dt-quarter"]], "polars.Series.clip": [[815, "polars-series-clip"]], "polars.Series.dt.hours": [[844, "polars-series-dt-hours"]], "polars.Series.dt.weekday": [[875, "polars-series-dt-weekday"]], "polars.Series.dtype": [[878, "polars-series-dtype"]], "polars.Series.dot": [[829, "polars-series-dot"]], "polars.Series.dt.minutes": [[856, "polars-series-dt-minutes"]], "polars.Series.cosh": [[820, "polars-series-cosh"]], "polars.Series.dt.to_string": [[872, "polars-series-dt-to-string"]], "polars.Series.entropy": [[879, "polars-series-entropy"]], "polars.Series.dt.year": [[877, "polars-series-dt-year"]], "polars.Series.dt.median": [[849, "polars-series-dt-median"]], "polars.Series.dt.time": [[870, "polars-series-dt-time"]], "polars.Series.dt.timestamp": [[871, "polars-series-dt-timestamp"]], "polars.Series.cumsum": [[824, "polars-series-cumsum"]], "polars.Series.dt.epoch": [[842, "polars-series-dt-epoch"]], "polars.Series.dt.microseconds": [[851, "polars-series-dt-microseconds"]], "polars.Series.dt.nanoseconds": [[861, "polars-series-dt-nanoseconds"]], "polars.Series.dt.week": [[874, "polars-series-dt-week"]], "polars.Series.dt": [[832, "polars-series-dt"]], "polars.Series.exp": [[884, "polars-series-exp"]], "polars.Series.cumprod": [[823, "polars-series-cumprod"]], "polars.Series.clip_max": [[816, "polars-series-clip-max"]], "polars.Series.dt.month": [[857, "polars-series-dt-month"]], "polars.Series.dt.mean": [[848, "polars-series-dt-mean"]], "polars.Series.dt.round": [[866, "polars-series-dt-round"]], "polars.Series.dt.truncate": [[873, "polars-series-dt-truncate"]], "polars.Series.dt.with_time_unit": [[876, "polars-series-dt-with-time-unit"]], "polars.Series.clear": [[814, "polars-series-clear"]], "polars.Series.clip_min": [[817, "polars-series-clip-min"]], "polars.Series.dt.date": [[837, "polars-series-dt-date"]], "polars.Series.dt.microsecond": [[850, "polars-series-dt-microsecond"]], "polars.Series.extend_constant": [[887, "polars-series-extend-constant"]], "polars.Series.dt.millisecond": [[852, "polars-series-dt-millisecond"]], "polars.Series.dt.dst_offset": [[841, "polars-series-dt-dst-offset"]], "polars.Series.clone": [[818, "polars-series-clone"]], "polars.Series.describe": [[827, "polars-series-describe"]], "polars.Series.dt.day": [[839, "polars-series-dt-day"]], "polars.Series.drop_nulls": [[831, "polars-series-drop-nulls"]], "polars.Series.dt.cast_time_unit": [[834, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.replace_time_zone": [[865, "polars-series-dt-replace-time-zone"]], "polars.Series.ewm_mean": [[881, "polars-series-ewm-mean"]], "polars.Series.diff": [[828, "polars-series-diff"]], "polars.Series.dt.iso_year": [[846, "polars-series-dt-iso-year"]], "polars.Series.dt.month_start": [[859, "polars-series-dt-month-start"]], "polars.Series.dt.seconds": [[868, "polars-series-dt-seconds"]], "polars.Series.extend": [[886, "polars-series-extend"]], "polars.Series.explode": [[885, "polars-series-explode"]], "polars.Series.ewm_var": [[883, "polars-series-ewm-var"]], "polars.Series.dt.base_utc_offset": [[833, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.is_leap_year": [[845, "polars-series-dt-is-leap-year"]], "polars.Series.dt.milliseconds": [[853, "polars-series-dt-milliseconds"]], "polars.Series.cos": [[819, "polars-series-cos"]], "polars.Series.dt.combine": [[835, "polars-series-dt-combine"]], "polars.Series.cummax": [[821, "polars-series-cummax"]], "polars.Series.dt.strftime": [[869, "polars-series-dt-strftime"]], "polars.Series.cummin": [[822, "polars-series-cummin"]], "polars.Series.str.rjust": [[1047, "polars-series-str-rjust"]], "polars.Series.struct.schema": [[1067, "polars-series-struct-schema"]], "polars.Series.take_every": [[1072, "polars-series-take-every"]], "polars.Series.zip_with": [[1090, "polars-series-zip-with"]], "polars.Series.str.lengths": [[1040, "polars-series-str-lengths"]], "polars.Series.str.ljust": [[1041, "polars-series-str-ljust"]], "polars.Series.str.json_extract": [[1038, "polars-series-str-json-extract"]], "polars.Series.str.rstrip": [[1048, "polars-series-str-rstrip"]], "polars.Series.str.to_datetime": [[1057, "polars-series-str-to-datetime"]], "polars.Series.tanh": [[1074, "polars-series-tanh"]], "Binary": [[1093, "binary"], [670, "binary"], [658, "binary"]], "polars.Series.str.strptime": [[1055, "polars-series-str-strptime"]], "polars.Series.sum": [[1069, "polars-series-sum"]], "polars.Series.value_counts": [[1087, "polars-series-value-counts"]], "polars.Series.str.json_path_match": [[1039, "polars-series-str-json-path-match"]], "Categories": [[1095, "categories"], [660, "categories"]], "polars.Series.str.to_date": [[1056, "polars-series-str-to-date"]], "polars.Series.to_frame": [[1077, "polars-series-to-frame"]], "polars.Series.struct.field": [[1064, "polars-series-struct-field"]], "polars.Series.to_init_repr": [[1078, "polars-series-to-init-repr"]], "polars.Series.unique_counts": [[1085, "polars-series-unique-counts"]], "polars.Series.upper_bound": [[1086, "polars-series-upper-bound"]], "Manipulation/selection": [[1102, "manipulation-selection"], [774, "manipulation-selection"], [669, "manipulation-selection"], [270, "manipulation-selection"]], "String": [[1103, "string"], [671, "string"]], "SQL": [[1106, "sql"]], "Methods": [[1106, "methods"]], "polars.Series.tail": [[1070, "polars-series-tail"]], "polars.Series.unique": [[1084, "polars-series-unique"]], "polars.Series.struct.unnest": [[1068, "polars-series-struct-unnest"]], "polars.Series.str.split_exact": [[1051, "polars-series-str-split-exact"]], "polars.Series.var": [[1088, "polars-series-var"]], "polars.Series.str.to_lowercase": [[1059, "polars-series-str-to-lowercase"]], "Array": [[1091, "array"], [657, "array"]], "polars.Series.str.splitn": [[1052, "polars-series-str-splitn"]], "polars.Series.to_pandas": [[1081, "polars-series-to-pandas"]], "Utils": [[1108, "utils"]], "Miscellaneous": [[1101, "miscellaneous"], [773, "miscellaneous"], [668, "miscellaneous"], [675, "miscellaneous"], [269, "miscellaneous"]], "polars.Series.str.to_time": [[1060, "polars-series-str-to-time"]], "polars.Series.take": [[1071, "polars-series-take"]], "polars.Series.str.extract_all": [[1036, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1037, "polars-series-str-extract-groups"]], "polars.Series.str.replace_all": [[1046, "polars-series-str-replace-all"]], "polars.Series.struct.fields": [[1065, "polars-series-struct-fields"]], "polars.Series.to_physical": [[1082, "polars-series-to-physical"]], "Descriptive": [[1097, "descriptive"], [770, "descriptive"], [265, "descriptive"]], "List": [[1100, "list"], [666, "list"]], "polars.Series.str.n_chars": [[1043, "polars-series-str-n-chars"]], "polars.Series.str.to_decimal": [[1058, "polars-series-str-to-decimal"]], "polars.Series.str.to_titlecase": [[1061, "polars-series-str-to-titlecase"]], "Export": [[1098, "export"], [266, "export"]], "polars.Series.str.to_uppercase": [[1062, "polars-series-str-to-uppercase"]], "polars.Series.str.strip": [[1054, "polars-series-str-strip"]], "polars.Series.str.zfill": [[1063, "polars-series-str-zfill"]], "polars.Series.tan": [[1073, "polars-series-tan"]], "Struct": [[1104, "struct"], [672, "struct"]], "Testing": [[1107, "testing"]], "Asserts": [[1107, "asserts"]], "Parametric testing": [[1107, "parametric-testing"]], "Polars primitives": [[1107, "polars-primitives"]], "Strategy helpers": [[1107, "strategy-helpers"]], "Profiles": [[1107, "profiles"]], "polars.Series.to_arrow": [[1075, "polars-series-to-arrow"]], "Series": [[1099, "series"]], "polars.Series.top_k": [[1083, "polars-series-top-k"]], "polars.Series.str.lstrip": [[1042, "polars-series-str-lstrip"]], "polars.Series.to_numpy": [[1080, "polars-series-to-numpy"]], "polars.Series.view": [[1089, "polars-series-view"]], "polars.Series.str.slice": [[1049, "polars-series-str-slice"]], "polars.Series.to_dummies": [[1076, "polars-series-to-dummies"]], "polars.Series.str.parse_int": [[1044, "polars-series-str-parse-int"]], "Temporal": [[1105, "temporal"], [673, "temporal"], [271, "temporal"]], "polars.Series.str.replace": [[1045, "polars-series-str-replace"]], "Attributes": [[1092, "attributes"], [769, "attributes"], [263, "attributes"]], "polars.Series.str.split": [[1050, "polars-series-str-split"]], "polars.Series.to_list": [[1079, "polars-series-to-list"]], "Boolean": [[1094, "boolean"], [659, "boolean"]], "polars.Series.str.starts_with": [[1053, "polars-series-str-starts-with"]], "Computation": [[1096, "computation"], [663, "computation"], [264, "computation"]], "polars.Series.struct.rename_fields": [[1066, "polars-series-struct-rename-fields"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[755, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.Series.arctanh": [[788, "polars-series-arctanh"]], "polars.LazyFrame.with_columns_seq": [[749, "polars-lazyframe-with-columns-seq"]], "polars.Series.arg_sort": [[791, "polars-series-arg-sort"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[758, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.LazyFrame.with_columns": [[748, "polars-lazyframe-with-columns"]], "polars.Series.cat.to_local": [[809, "polars-series-cat-to-local"]], "polars.Series.ceil": [[812, "polars-series-ceil"]], "polars.Series.bin.ends_with": [[801, "polars-series-bin-ends-with"]], "polars.Series.cbrt": [[811, "polars-series-cbrt"]], "polars.LazyFrame.tail": [[740, "polars-lazyframe-tail"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[756, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.Series.arr.max": [[794, "polars-series-arr-max"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[754, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.with_context": [[750, "polars-lazyframe-with-context"]], "polars.Series.arcsinh": [[786, "polars-series-arcsinh"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[764, "polars-lazyframe-group-by-lazygroupby-min"]], "LazyFrame": [[772, "lazyframe"]], "polars.Series.arr.sum": [[796, "polars-series-arr-sum"]], "polars.Series.chunk_lengths": [[813, "polars-series-chunk-lengths"]], "polars.Series.arccos": [[783, "polars-series-arccos"]], "polars.Series.apply": [[782, "polars-series-apply"]], "polars.Series.bin.decode": [[799, "polars-series-bin-decode"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[760, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[762, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.Series.arccosh": [[784, "polars-series-arccosh"]], "polars.LazyFrame.width": [[747, "polars-lazyframe-width"]], "polars.LazyFrame.take_every": [[741, "polars-lazyframe-take-every"]], "polars.LazyFrame.update": [[745, "polars-lazyframe-update"]], "polars.Series.arg_max": [[789, "polars-series-arg-max"]], "polars.Series.cat": [[805, "polars-series-cat"]], "polars.Series.arg_unique": [[793, "polars-series-arg-unique"]], "polars.LazyFrame.with_row_count": [[751, "polars-lazyframe-with-row-count"]], "polars.Series.cat.is_local": [[807, "polars-series-cat-is-local"]], "Read/write logical plan": [[773, "read-write-logical-plan"]], "polars.Series.arctan": [[787, "polars-series-arctan"]], "polars.Series.cat.uses_lexical_ordering": [[810, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.arg_true": [[792, "polars-series-arg-true"]], "Selectors": [[775, "selectors"]], "Importing": [[775, "importing"]], "Set operations": [[775, "set-operations"]], "Functions": [[775, "functions"], [675, "functions"], [664, "functions"]], "polars.Series.bin.encode": [[800, "polars-series-bin-encode"]], "polars.Series.cat.set_ordering": [[808, "polars-series-cat-set-ordering"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[767, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Series.all": [[779, "polars-series-all"]], "polars.Series.arcsin": [[785, "polars-series-arcsin"]], "polars.LazyFrame.var": [[746, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[765, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.LazyFrame.unique": [[743, "polars-lazyframe-unique"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[759, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.abs": [[777, "polars-series-abs"]], "polars.LazyFrame.top_k": [[742, "polars-lazyframe-top-k"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[757, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.Series.append": [[781, "polars-series-append"]], "polars.Series.cast": [[804, "polars-series-cast"]], "polars.LazyFrame.unnest": [[744, "polars-lazyframe-unnest"]], "polars.Series.arg_min": [[790, "polars-series-arg-min"]], "polars.Series.arr.unique": [[797, "polars-series-arr-unique"]], "polars.LazyFrame.write_json": [[752, "polars-lazyframe-write-json"]], "polars.Series.alias": [[778, "polars-series-alias"]], "polars.Series.any": [[780, "polars-series-any"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[766, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.Series.bin.contains": [[798, "polars-series-bin-contains"]], "polars.Series.bin.starts_with": [[802, "polars-series-bin-starts-with"]], "GroupBy": [[771, "groupby"], [267, "groupby"]], "polars.Series.cat.get_categories": [[806, "polars-series-cat-get-categories"]], "polars.Series.bottom_k": [[803, "polars-series-bottom-k"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[763, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[768, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[761, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.arr.min": [[795, "polars-series-arr-min"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[753, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.melt": [[718, "polars-lazyframe-melt"]], "polars.LazyFrame.select": [[729, "polars-lazyframe-select"]], "polars.LazyFrame.shift": [[733, "polars-lazyframe-shift"]], "polars.LazyFrame.select_seq": [[730, "polars-lazyframe-select-seq"]], "polars.LazyFrame.reverse": [[727, "polars-lazyframe-reverse"]], "polars.LazyFrame.max": [[715, "polars-lazyframe-max"]], "polars.LazyFrame.join_asof": [[709, "polars-lazyframe-join-asof"]], "polars.LazyFrame.group_by_rolling": [[701, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.last": [[710, "polars-lazyframe-last"]], "polars.LazyFrame.quantile": [[724, "polars-lazyframe-quantile"]], "polars.LazyFrame.cache": [[682, "polars-lazyframe-cache"]], "polars.LazyFrame.columns": [[686, "polars-lazyframe-columns"]], "polars.LazyFrame.drop_nulls": [[689, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.first": [[697, "polars-lazyframe-first"]], "polars.LazyFrame.slice": [[736, "polars-lazyframe-slice"]], "polars.LazyFrame.approx_n_unique": [[679, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.groupby_dynamic": [[703, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.std": [[738, "polars-lazyframe-std"]], "polars.LazyFrame.head": [[705, "polars-lazyframe-head"]], "polars.LazyFrame.read_json": [[725, "polars-lazyframe-read-json"]], "polars.LazyFrame.serialize": [[731, "polars-lazyframe-serialize"]], "polars.LazyFrame.approx_unique": [[680, "polars-lazyframe-approx-unique"]], "polars.LazyFrame.explain": [[691, "polars-lazyframe-explain"]], "polars.LazyFrame.shift_and_fill": [[734, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.show_graph": [[735, "polars-lazyframe-show-graph"]], "polars.LazyFrame.inspect": [[706, "polars-lazyframe-inspect"]], "polars.LazyFrame.map_batches": [[714, "polars-lazyframe-map-batches"]], "polars.LazyFrame.limit": [[712, "polars-lazyframe-limit"]], "polars.LazyFrame.filter": [[696, "polars-lazyframe-filter"]], "polars.LazyFrame.join": [[708, "polars-lazyframe-join"]], "polars.LazyFrame.median": [[717, "polars-lazyframe-median"]], "Window": [[674, "window"]], "polars.LazyFrame.fill_null": [[695, "polars-lazyframe-fill-null"]], "polars.LazyFrame.lazy": [[711, "polars-lazyframe-lazy"]], "polars.LazyFrame.bottom_k": [[681, "polars-lazyframe-bottom-k"]], "Conversion": [[675, "conversion"]], "Parallelization": [[675, "parallelization"]], "Random": [[675, "random"]], "StringCache": [[675, "stringcache"]], "polars.LazyFrame.mean": [[716, "polars-lazyframe-mean"]], "polars.LazyFrame.min": [[720, "polars-lazyframe-min"]], "polars.LazyFrame.explode": [[692, "polars-lazyframe-explode"]], "polars.LazyFrame.groupby": [[702, "polars-lazyframe-groupby"]], "polars.LazyFrame.interpolate": [[707, "polars-lazyframe-interpolate"]], "polars.LazyFrame.from_json": [[698, "polars-lazyframe-from-json"]], "polars.LazyFrame.sum": [[739, "polars-lazyframe-sum"]], "Operators": [[670, "operators"]], "Conjunction": [[670, "conjunction"]], "Comparison": [[670, "comparison"]], "Numeric": [[670, "numeric"], [271, "numeric"]], "polars.LazyFrame.dtypes": [[690, "polars-lazyframe-dtypes"]], "polars.LazyFrame.clone": [[684, "polars-lazyframe-clone"]], "polars.LazyFrame.merge_sorted": [[719, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.null_count": [[721, "polars-lazyframe-null-count"]], "polars.LazyFrame.schema": [[728, "polars-lazyframe-schema"]], "polars.LazyFrame.set_sorted": [[732, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.map": [[713, "polars-lazyframe-map"]], "polars.LazyFrame.groupby_rolling": [[704, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.sort": [[737, "polars-lazyframe-sort"]], "polars.LazyFrame.fetch": [[693, "polars-lazyframe-fetch"]], "Input/output": [[677, "input-output"]], "CSV": [[677, "csv"]], "Feather/ IPC": [[677, "feather-ipc"]], "Parquet": [[677, "parquet"]], "Database": [[677, "database"]], "JSON": [[677, "json"]], "AVRO": [[677, "avro"]], "Excel": [[677, "excel"]], "Delta Lake": [[677, "delta-lake"]], "Datasets": [[677, "datasets"]], "BatchedCsvReader": [[677, "batchedcsvreader"]], "polars.LazyFrame.group_by": [[699, "polars-lazyframe-group-by"]], "polars.LazyFrame.fill_nan": [[694, "polars-lazyframe-fill-nan"]], "Meta": [[667, "meta"]], "polars.LazyFrame.drop": [[688, "polars-lazyframe-drop"]], "polars.LazyFrame.pipe": [[722, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[723, "polars-lazyframe-profile"]], "polars.LazyFrame.clear": [[683, "polars-lazyframe-clear"]], "polars.LazyFrame.group_by_dynamic": [[700, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.collect": [[685, "polars-lazyframe-collect"]], "polars.LazyFrame.rename": [[726, "polars-lazyframe-rename"]], "polars.LazyFrame.deserialize": [[687, "polars-lazyframe-deserialize"]], "API reference": [[676, "api-reference"]], "polars.Expr.str.strip": [[558, "polars-expr-str-strip"]], "polars.Expr.suffix": [[571, "polars-expr-suffix"]], "polars.Expr.str.extract_groups": [[541, "polars-expr-str-extract-groups"]], "polars.Expr.truediv": [[580, "polars-expr-truediv"]], "polars.Expr.str.json_extract": [[542, "polars-expr-str-json-extract"]], "polars.Expr.where": [[586, "polars-expr-where"]], "polars.Expr.value_counts": [[584, "polars-expr-value-counts"]], "polars.Expr.str.decode": [[535, "polars-expr-str-decode"]], "polars.Expr.str.ljust": [[545, "polars-expr-str-ljust"]], "polars.Expr.str.encode": [[536, "polars-expr-str-encode"]], "polars.Expr.str.to_decimal": [[562, "polars-expr-str-to-decimal"]], "polars.Expr.shift_and_fill": [[520, "polars-expr-shift-and-fill"]], "polars.Expr.str.to_uppercase": [[566, "polars-expr-str-to-uppercase"]], "polars.Expr.sqrt": [[530, "polars-expr-sqrt"]], "polars.any_horizontal": [[591, "polars-any-horizontal"]], "polars.Expr.str.splitn": [[556, "polars-expr-str-splitn"]], "polars.Expr.sub": [[570, "polars-expr-sub"]], "polars.Expr.str.extract_all": [[540, "polars-expr-str-extract-all"]], "polars.Expr.struct.rename_fields": [[569, "polars-expr-struct-rename-fields"]], "polars.Expr.shrink_dtype": [[521, "polars-expr-shrink-dtype"]], "polars.Expr.skew": [[526, "polars-expr-skew"]], "polars.Expr.sin": [[524, "polars-expr-sin"]], "polars.Expr.str.extract": [[539, "polars-expr-str-extract"]], "polars.Expr.tanh": [[577, "polars-expr-tanh"]], "polars.Expr.sign": [[523, "polars-expr-sign"]], "polars.Expr.sum": [[572, "polars-expr-sum"]], "polars.Expr.upper_bound": [[583, "polars-expr-upper-bound"]], "polars.Expr.tan": [[576, "polars-expr-tan"]], "polars.Expr.unique": [[581, "polars-expr-unique"]], "polars.Expr.str.n_chars": [[547, "polars-expr-str-n-chars"]], "polars.Expr.str.to_lowercase": [[563, "polars-expr-str-to-lowercase"]], "polars.Expr.str.concat": [[532, "polars-expr-str-concat"]], "polars.Expr.tail": [[573, "polars-expr-tail"]], "polars.Expr.str.contains": [[533, "polars-expr-str-contains"]], "polars.Expr.set_sorted": [[518, "polars-expr-set-sorted"]], "polars.Expr.str.lengths": [[544, "polars-expr-str-lengths"]], "polars.Expr.shift": [[519, "polars-expr-shift"]], "polars.Expr.str.json_path_match": [[543, "polars-expr-str-json-path-match"]], "polars.Expr.str.starts_with": [[557, "polars-expr-str-starts-with"]], "polars.Expr.top_k": [[579, "polars-expr-top-k"]], "polars.Expr.str.split_exact": [[555, "polars-expr-str-split-exact"]], "polars.Expr.str.replace_all": [[550, "polars-expr-str-replace-all"]], "polars.Expr.str.to_time": [[564, "polars-expr-str-to-time"]], "polars.Expr.str.explode": [[538, "polars-expr-str-explode"]], "polars.Expr.str.to_datetime": [[561, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_date": [[560, "polars-expr-str-to-date"]], "polars.Expr.str.strptime": [[559, "polars-expr-str-strptime"]], "polars.Expr.str.to_titlecase": [[565, "polars-expr-str-to-titlecase"]], "polars.Expr.str.parse_int": [[548, "polars-expr-str-parse-int"]], "polars.Expr.std": [[531, "polars-expr-std"]], "polars.Expr.str.count_match": [[534, "polars-expr-str-count-match"]], "polars.Expr.str.slice": [[553, "polars-expr-str-slice"]], "polars.Expr.sort_by": [[529, "polars-expr-sort-by"]], "polars.Expr.str.split": [[554, "polars-expr-str-split"]], "polars.Expr.sinh": [[525, "polars-expr-sinh"]], "polars.Expr.slice": [[527, "polars-expr-slice"]], "polars.Expr.str.zfill": [[567, "polars-expr-str-zfill"]], "polars.Expr.take_every": [[575, "polars-expr-take-every"]], "polars.Expr.take": [[574, "polars-expr-take"]], "polars.Expr.str.rstrip": [[552, "polars-expr-str-rstrip"]], "polars.Expr.struct.field": [[568, "polars-expr-struct-field"]], "polars.Expr.to_physical": [[578, "polars-expr-to-physical"]], "polars.Expr.xor": [[587, "polars-expr-xor"]], "polars.Expr.sort": [[528, "polars-expr-sort"]], "polars.any": [[590, "polars-any"]], "polars.Expr.unique_counts": [[582, "polars-expr-unique-counts"]], "polars.all": [[588, "polars-all"]], "polars.Expr.shuffle": [[522, "polars-expr-shuffle"]], "polars.Expr.str.lstrip": [[546, "polars-expr-str-lstrip"]], "polars.Expr.str.ends_with": [[537, "polars-expr-str-ends-with"]], "polars.all_horizontal": [[589, "polars-all-horizontal"]], "polars.Expr.var": [[585, "polars-expr-var"]], "polars.Expr.str.rjust": [[551, "polars-expr-str-rjust"]], "polars.Expr.str.replace": [[549, "polars-expr-str-replace"]], "polars.Expr.sample": [[516, "polars-expr-sample"]], "polars.Expr.list.take": [[448, "polars-expr-list-take"]], "polars.Expr.reshape": [[500, "polars-expr-reshape"]], "polars.Expr.radians": [[495, "polars-expr-radians"]], "polars.Expr.rolling_sum": [[513, "polars-expr-rolling-sum"]], "polars.Expr.log10": [[453, "polars-expr-log10"]], "polars.Expr.meta.undo_aliases": [[473, "polars-expr-meta-undo-aliases"]], "polars.Expr.round": [[515, "polars-expr-round"]], "polars.Expr.rle": [[502, "polars-expr-rle"]], "polars.Expr.list.symmetric_difference": [[446, "polars-expr-list-symmetric-difference"]], "polars.Expr.meta.output_name": [[469, "polars-expr-meta-output-name"]], "polars.Expr.list.union": [[450, "polars-expr-list-union"]], "polars.Expr.ne_missing": [[483, "polars-expr-ne-missing"]], "polars.Expr.quantile": [[494, "polars-expr-quantile"]], "polars.Expr.map_dict": [[460, "polars-expr-map-dict"]], "polars.Expr.n_unique": [[479, "polars-expr-n-unique"]], "polars.Expr.map_alias": [[458, "polars-expr-map-alias"]], "polars.Expr.map_elements": [[461, "polars-expr-map-elements"]], "polars.Expr.list.sort": [[444, "polars-expr-list-sort"]], "polars.Expr.meta.write_json": [[474, "polars-expr-meta-write-json"]], "polars.Expr.reinterpret": [[498, "polars-expr-reinterpret"]], "polars.Expr.rolling_var": [[514, "polars-expr-rolling-var"]], "polars.Expr.min": [[475, "polars-expr-min"]], "polars.Expr.mul": [[478, "polars-expr-mul"]], "polars.Expr.log1p": [[454, "polars-expr-log1p"]], "polars.Expr.meta.ne": [[468, "polars-expr-meta-ne"]], "polars.Expr.mod": [[476, "polars-expr-mod"]], "polars.Expr.reverse": [[501, "polars-expr-reverse"]], "polars.Expr.rechunk": [[497, "polars-expr-rechunk"]], "polars.Expr.rle_id": [[503, "polars-expr-rle-id"]], "polars.Expr.rolling_std": [[512, "polars-expr-rolling-std"]], "polars.Expr.list.unique": [[451, "polars-expr-list-unique"]], "polars.Expr.lt": [[456, "polars-expr-lt"]], "polars.Expr.rank": [[496, "polars-expr-rank"]], "polars.Expr.ne": [[482, "polars-expr-ne"]], "polars.Expr.or_": [[486, "polars-expr-or"]], "polars.Expr.nan_max": [[480, "polars-expr-nan-max"]], "polars.Expr.lower_bound": [[455, "polars-expr-lower-bound"]], "polars.Expr.pipe": [[489, "polars-expr-pipe"]], "polars.Expr.log": [[452, "polars-expr-log"]], "polars.Expr.map_batches": [[459, "polars-expr-map-batches"]], "polars.Expr.mean": [[463, "polars-expr-mean"]], "polars.Expr.median": [[464, "polars-expr-median"]], "polars.Expr.pct_change": [[488, "polars-expr-pct-change"]], "polars.Expr.meta.tree_format": [[472, "polars-expr-meta-tree-format"]], "polars.Expr.meta.eq": [[465, "polars-expr-meta-eq"]], "polars.Expr.list.sum": [[445, "polars-expr-list-sum"]], "polars.Expr.prefix": [[491, "polars-expr-prefix"]], "polars.Expr.max": [[462, "polars-expr-max"]], "polars.Expr.qcut": [[493, "polars-expr-qcut"]], "polars.Expr.rolling_skew": [[511, "polars-expr-rolling-skew"]], "polars.Expr.meta.has_multiple_outputs": [[466, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.rolling_min": [[509, "polars-expr-rolling-min"]], "polars.Expr.null_count": [[485, "polars-expr-null-count"]], "polars.Expr.over": [[487, "polars-expr-over"]], "polars.Expr.list.to_struct": [[449, "polars-expr-list-to-struct"]], "polars.Expr.map": [[457, "polars-expr-map"]], "polars.Expr.nan_min": [[481, "polars-expr-nan-min"]], "polars.Expr.not_": [[484, "polars-expr-not"]], "polars.Expr.repeat_by": [[499, "polars-expr-repeat-by"]], "polars.Expr.pow": [[490, "polars-expr-pow"]], "polars.Expr.meta.is_regex_projection": [[467, "polars-expr-meta-is-regex-projection"]], "polars.Expr.product": [[492, "polars-expr-product"]], "polars.Expr.rolling_mean": [[507, "polars-expr-rolling-mean"]], "polars.Expr.rolling_median": [[508, "polars-expr-rolling-median"]], "polars.Expr.meta.pop": [[470, "polars-expr-meta-pop"]], "polars.Expr.rolling_map": [[505, "polars-expr-rolling-map"]], "polars.Expr.search_sorted": [[517, "polars-expr-search-sorted"]], "polars.Expr.list.tail": [[447, "polars-expr-list-tail"]], "polars.Expr.meta.root_names": [[471, "polars-expr-meta-root-names"]], "polars.Expr.rolling_apply": [[504, "polars-expr-rolling-apply"]], "polars.Expr.rolling_max": [[506, "polars-expr-rolling-max"]], "polars.Expr.mode": [[477, "polars-expr-mode"]], "polars.Expr.rolling_quantile": [[510, "polars-expr-rolling-quantile"]], "polars.avg": [[599, "polars-avg"]], "polars.cumsum_horizontal": [[609, "polars-cumsum-horizontal"]], "polars.lit": [[627, "polars-lit"]], "polars.when": [[655, "polars-when"]], "polars.mean": [[633, "polars-mean"]], "Expressions": [[665, "expressions"]], "polars.time_range": [[652, "polars-time-range"]], "polars.max_horizontal": [[632, "polars-max-horizontal"]], "polars.exclude": [[616, "polars-exclude"]], "polars.min": [[635, "polars-min"]], "polars.max": [[631, "polars-max"]], "polars.from_epoch": [[620, "polars-from-epoch"]], "polars.format": [[619, "polars-format"]], "polars.apply": [[592, "polars-apply"]], "polars.corr": [[603, "polars-corr"]], "polars.select": [[644, "polars-select"]], "polars.time": [[651, "polars-time"]], "polars.map_batches": [[629, "polars-map-batches"]], "polars.struct": [[647, "polars-struct"]], "polars.time_ranges": [[653, "polars-time-ranges"]], "polars.date": [[610, "polars-date"]], "polars.groups": [[621, "polars-groups"]], "polars.arctan2d": [[596, "polars-arctan2d"]], "polars.date_range": [[611, "polars-date-range"]], "polars.duration": [[614, "polars-duration"]], "polars.date_ranges": [[612, "polars-date-ranges"]], "polars.element": [[615, "polars-element"]], "polars.median": [[634, "polars-median"]], "polars.last": [[626, "polars-last"]], "polars.min_horizontal": [[636, "polars-min-horizontal"]], "polars.std": [[646, "polars-std"]], "polars.sql_expr": [[645, "polars-sql-expr"]], "polars.cov": [[605, "polars-cov"]], "polars.rolling_cov": [[643, "polars-rolling-cov"]], "polars.sum_horizontal": [[649, "polars-sum-horizontal"]], "polars.map": [[628, "polars-map"]], "polars.head": [[622, "polars-head"]], "polars.ones": [[638, "polars-ones"]], "polars.cumfold": [[606, "polars-cumfold"]], "polars.implode": [[623, "polars-implode"]], "polars.int_ranges": [[625, "polars-int-ranges"]], "polars.arg_sort_by": [[597, "polars-arg-sort-by"]], "polars.tail": [[650, "polars-tail"]], "Columns / names": [[662, "columns-names"]], "polars.col": [[661, "polars-col"]], "polars.approx_n_unique": [[593, "polars-approx-n-unique"]], "polars.coalesce": [[600, "polars-coalesce"]], "polars.concat_list": [[601, "polars-concat-list"]], "polars.concat_str": [[602, "polars-concat-str"]], "polars.int_range": [[624, "polars-int-range"]], "polars.rolling_corr": [[642, "polars-rolling-corr"]], "polars.sum": [[648, "polars-sum"]], "polars.var": [[654, "polars-var"]], "polars.count": [[604, "polars-count"]], "polars.arctan2": [[595, "polars-arctan2"]], "polars.zeros": [[656, "polars-zeros"]], "polars.n_unique": [[637, "polars-n-unique"]], "polars.quantile": [[639, "polars-quantile"]], "polars.arg_where": [[598, "polars-arg-where"]], "polars.datetime": [[613, "polars-datetime"]], "polars.repeat": [[641, "polars-repeat"]], "polars.cumsum": [[608, "polars-cumsum"]], "polars.arange": [[594, "polars-arange"]], "polars.map_groups": [[630, "polars-map-groups"]], "polars.first": [[617, "polars-first"]], "polars.fold": [[618, "polars-fold"]], "polars.reduce": [[640, "polars-reduce"]], "polars.cumreduce": [[607, "polars-cumreduce"]], "polars.Expr.dt.year": [[370, "polars-expr-dt-year"]], "polars.Expr.exp": [[378, "polars-expr-exp"]], "polars.Expr.is_not_nan": [[406, "polars-expr-is-not-nan"]], "polars.Expr.list.count_match": [[422, "polars-expr-list-count-match"]], "polars.Expr.list.slice": [[443, "polars-expr-list-slice"]], "polars.Expr.is_first": [[400, "polars-expr-is-first"]], "polars.Expr.ewm_var": [[376, "polars-expr-ewm-var"]], "polars.Expr.limit": [[415, "polars-expr-limit"]], "polars.Expr.eq_missing": [[373, "polars-expr-eq-missing"]], "polars.Expr.list.set_symmetric_difference": [[440, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.keep_name": [[410, "polars-expr-keep-name"]], "polars.Expr.filter": [[383, "polars-expr-filter"]], "polars.Expr.first": [[384, "polars-expr-first"]], "polars.Expr.list.concat": [[420, "polars-expr-list-concat"]], "polars.Expr.ge": [[390, "polars-expr-ge"]], "polars.Expr.flatten": [[385, "polars-expr-flatten"]], "polars.Expr.is_in": [[401, "polars-expr-is-in"]], "polars.Expr.list.intersection": [[430, "polars-expr-list-intersection"]], "polars.Expr.list.diff": [[423, "polars-expr-list-diff"]], "polars.Expr.is_nan": [[404, "polars-expr-is-nan"]], "polars.Expr.list.last": [[432, "polars-expr-list-last"]], "polars.Expr.list.eval": [[425, "polars-expr-list-eval"]], "polars.Expr.list.all": [[416, "polars-expr-list-all"]], "polars.Expr.list.set_intersection": [[439, "polars-expr-list-set-intersection"]], "polars.Expr.last": [[412, "polars-expr-last"]], "polars.Expr.list.any": [[417, "polars-expr-list-any"]], "polars.Expr.list.head": [[429, "polars-expr-list-head"]], "polars.Expr.list.first": [[427, "polars-expr-list-first"]], "polars.Expr.is_infinite": [[402, "polars-expr-is-infinite"]], "polars.Expr.le": [[413, "polars-expr-le"]], "polars.Expr.list.mean": [[435, "polars-expr-list-mean"]], "polars.Expr.kurtosis": [[411, "polars-expr-kurtosis"]], "polars.Expr.is_null": [[408, "polars-expr-is-null"]], "polars.Expr.is_unique": [[409, "polars-expr-is-unique"]], "polars.Expr.explode": [[379, "polars-expr-explode"]], "polars.Expr.floor": [[386, "polars-expr-floor"]], "polars.Expr.is_finite": [[399, "polars-expr-is-finite"]], "polars.Expr.list.shift": [[442, "polars-expr-list-shift"]], "polars.Expr.list.reverse": [[437, "polars-expr-list-reverse"]], "polars.Expr.list.set_union": [[441, "polars-expr-list-set-union"]], "polars.Expr.fill_nan": [[381, "polars-expr-fill-nan"]], "polars.Expr.entropy": [[371, "polars-expr-entropy"]], "polars.Expr.ewm_mean": [[374, "polars-expr-ewm-mean"]], "polars.Expr.from_json": [[389, "polars-expr-from-json"]], "polars.Expr.list.arg_max": [[418, "polars-expr-list-arg-max"]], "polars.Expr.inspect": [[395, "polars-expr-inspect"]], "polars.Expr.ewm_std": [[375, "polars-expr-ewm-std"]], "polars.Expr.fill_null": [[382, "polars-expr-fill-null"]], "polars.Expr.head": [[393, "polars-expr-head"]], "polars.Expr.list.max": [[434, "polars-expr-list-max"]], "polars.Expr.list.min": [[436, "polars-expr-list-min"]], "polars.Expr.forward_fill": [[388, "polars-expr-forward-fill"]], "polars.Expr.gt": [[391, "polars-expr-gt"]], "polars.Expr.is_last": [[403, "polars-expr-is-last"]], "polars.Expr.is_duplicated": [[398, "polars-expr-is-duplicated"]], "polars.Expr.is_not": [[405, "polars-expr-is-not"]], "polars.Expr.len": [[414, "polars-expr-len"]], "polars.Expr.list.get": [[428, "polars-expr-list-get"]], "polars.Expr.hash": [[392, "polars-expr-hash"]], "polars.Expr.interpolate": [[396, "polars-expr-interpolate"]], "polars.Expr.is_between": [[397, "polars-expr-is-between"]], "polars.Expr.list.set_difference": [[438, "polars-expr-list-set-difference"]], "polars.Expr.list.difference": [[424, "polars-expr-list-difference"]], "polars.Expr.list.join": [[431, "polars-expr-list-join"]], "polars.Expr.list.lengths": [[433, "polars-expr-list-lengths"]], "polars.Expr.extend_constant": [[380, "polars-expr-extend-constant"]], "polars.Expr.list.arg_min": [[419, "polars-expr-list-arg-min"]], "polars.Expr.floordiv": [[387, "polars-expr-floordiv"]], "polars.Expr.list.explode": [[426, "polars-expr-list-explode"]], "polars.Expr.is_not_null": [[407, "polars-expr-is-not-null"]], "polars.Expr.exclude": [[377, "polars-expr-exclude"]], "polars.Expr.implode": [[394, "polars-expr-implode"]], "polars.Expr.list.contains": [[421, "polars-expr-list-contains"]], "polars.Expr.eq": [[372, "polars-expr-eq"]], "polars.Expr.dt.base_utc_offset": [[330, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.days": [[337, "polars-expr-dt-days"]], "polars.Expr.dt.iso_year": [[343, "polars-expr-dt-iso-year"]], "polars.Expr.cut": [[324, "polars-expr-cut"]], "polars.Expr.dt.milliseconds": [[347, "polars-expr-dt-milliseconds"]], "polars.Expr.arr.sum": [[297, "polars-expr-arr-sum"]], "polars.Expr.dt.month_end": [[351, "polars-expr-dt-month-end"]], "polars.Expr.dt.ordinal_day": [[356, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.seconds": [[361, "polars-expr-dt-seconds"]], "polars.Expr.dt.dst_offset": [[338, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.epoch": [[339, "polars-expr-dt-epoch"]], "polars.Expr.dt.truncate": [[366, "polars-expr-dt-truncate"]], "polars.Expr.dt.to_string": [[365, "polars-expr-dt-to-string"]], "polars.Expr.dt.microsecond": [[344, "polars-expr-dt-microsecond"]], "polars.Expr.dt.round": [[359, "polars-expr-dt-round"]], "polars.Expr.bin.contains": [[300, "polars-expr-bin-contains"]], "polars.Expr.dt.microseconds": [[345, "polars-expr-dt-microseconds"]], "polars.Expr.clip": [[312, "polars-expr-clip"]], "polars.Expr.bottom_k": [[305, "polars-expr-bottom-k"]], "polars.Expr.dt.strftime": [[362, "polars-expr-dt-strftime"]], "polars.Expr.cummin": [[320, "polars-expr-cummin"]], "polars.Expr.count": [[317, "polars-expr-count"]], "polars.Expr.cumprod": [[321, "polars-expr-cumprod"]], "polars.Expr.bin.ends_with": [[303, "polars-expr-bin-ends-with"]], "polars.Expr.bin.decode": [[301, "polars-expr-bin-decode"]], "polars.Expr.cumulative_eval": [[323, "polars-expr-cumulative-eval"]], "polars.Expr.degrees": [[325, "polars-expr-degrees"]], "polars.Expr.dt.month": [[350, "polars-expr-dt-month"]], "polars.Expr.dt.offset_by": [[355, "polars-expr-dt-offset-by"]], "polars.Expr.ceil": [[311, "polars-expr-ceil"]], "polars.Expr.cosh": [[316, "polars-expr-cosh"]], "polars.Expr.drop_nans": [[328, "polars-expr-drop-nans"]], "polars.Expr.diff": [[326, "polars-expr-diff"]], "polars.Expr.cumsum": [[322, "polars-expr-cumsum"]], "polars.Expr.dt.week": [[367, "polars-expr-dt-week"]], "polars.Expr.dt.with_time_unit": [[369, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.datetime": [[335, "polars-expr-dt-datetime"]], "polars.Expr.dt.minutes": [[349, "polars-expr-dt-minutes"]], "polars.Expr.bin.starts_with": [[304, "polars-expr-bin-starts-with"]], "polars.Expr.dt.date": [[334, "polars-expr-dt-date"]], "polars.Expr.dt.replace_time_zone": [[358, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.millisecond": [[346, "polars-expr-dt-millisecond"]], "polars.Expr.dt.nanoseconds": [[354, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.combine": [[332, "polars-expr-dt-combine"]], "polars.Expr.backward_fill": [[299, "polars-expr-backward-fill"]], "polars.Expr.cbrt": [[310, "polars-expr-cbrt"]], "polars.Expr.dt.timestamp": [[364, "polars-expr-dt-timestamp"]], "polars.Expr.dt.convert_time_zone": [[333, "polars-expr-dt-convert-time-zone"]], "polars.Expr.bin.encode": [[302, "polars-expr-bin-encode"]], "polars.Expr.dt.minute": [[348, "polars-expr-dt-minute"]], "polars.Expr.dt.nanosecond": [[353, "polars-expr-dt-nanosecond"]], "polars.Expr.clip_min": [[314, "polars-expr-clip-min"]], "polars.Expr.cos": [[315, "polars-expr-cos"]], "polars.Expr.drop_nulls": [[329, "polars-expr-drop-nulls"]], "polars.Expr.dt.hour": [[340, "polars-expr-dt-hour"]], "polars.Expr.dt.weekday": [[368, "polars-expr-dt-weekday"]], "polars.Expr.arr.unique": [[298, "polars-expr-arr-unique"]], "polars.Expr.dot": [[327, "polars-expr-dot"]], "polars.Expr.dt.quarter": [[357, "polars-expr-dt-quarter"]], "polars.Expr.arr.min": [[296, "polars-expr-arr-min"]], "polars.Expr.cache": [[306, "polars-expr-cache"]], "polars.Expr.dt.is_leap_year": [[342, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.cast_time_unit": [[331, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.second": [[360, "polars-expr-dt-second"]], "polars.Expr.dt.time": [[363, "polars-expr-dt-time"]], "polars.Expr.dt.hours": [[341, "polars-expr-dt-hours"]], "polars.Expr.cat.get_categories": [[308, "polars-expr-cat-get-categories"]], "polars.Expr.clip_max": [[313, "polars-expr-clip-max"]], "polars.Expr.cumcount": [[318, "polars-expr-cumcount"]], "polars.Expr.dt.day": [[336, "polars-expr-dt-day"]], "polars.Expr.cat.set_ordering": [[309, "polars-expr-cat-set-ordering"]], "polars.Expr.cummax": [[319, "polars-expr-cummax"]], "polars.Expr.dt.month_start": [[352, "polars-expr-dt-month-start"]], "polars.Expr.cast": [[307, "polars-expr-cast"]], "polars.DataFrame.melt": [[190, "polars-dataframe-melt"]], "polars.DataFrame.is_unique": [[178, "polars-dataframe-is-unique"]], "polars.DataFrame.group_by_rolling": [[166, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.rechunk": [[201, "polars-dataframe-rechunk"]], "polars.DataFrame.insert_at_idx": [[174, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.iter_rows": [[180, "polars-dataframe-iter-rows"]], "polars.DataFrame.shape": [[214, "polars-dataframe-shape"]], "polars.DataFrame.n_chunks": [[193, "polars-dataframe-n-chunks"]], "polars.DataFrame.item": [[179, "polars-dataframe-item"]], "polars.DataFrame.replace_at_idx": [[204, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.filter": [[156, "polars-dataframe-filter"]], "polars.DataFrame.partition_by": [[196, "polars-dataframe-partition-by"]], "polars.DataFrame.rows_by_key": [[208, "polars-dataframe-rows-by-key"]], "polars.DataFrame.select": [[211, "polars-dataframe-select"]], "polars.DataFrame.sort": [[219, "polars-dataframe-sort"]], "polars.DataFrame.rows": [[207, "polars-dataframe-rows"]], "polars.DataFrame.iter_slices": [[181, "polars-dataframe-iter-slices"]], "polars.DataFrame.sum": [[221, "polars-dataframe-sum"]], "polars.DataFrame.glimpse": [[163, "polars-dataframe-glimpse"]], "polars.DataFrame.median": [[189, "polars-dataframe-median"]], "polars.DataFrame.fold": [[159, "polars-dataframe-fold"]], "polars.DataFrame.flags": [[158, "polars-dataframe-flags"]], "polars.DataFrame.extend": [[153, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[154, "polars-dataframe-fill-nan"]], "polars.DataFrame.groupby_rolling": [[169, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.map_rows": [[186, "polars-dataframe-map-rows"]], "polars.DataFrame.pipe": [[197, "polars-dataframe-pipe"]], "polars.DataFrame.n_unique": [[194, "polars-dataframe-n-unique"]], "polars.DataFrame.rename": [[202, "polars-dataframe-rename"]], "polars.DataFrame.drop_nulls": [[149, "polars-dataframe-drop-nulls"]], "polars.DataFrame.schema": [[210, "polars-dataframe-schema"]], "polars.DataFrame.estimated_size": [[151, "polars-dataframe-estimated-size"]], "polars.DataFrame.merge_sorted": [[191, "polars-dataframe-merge-sorted"]], "polars.DataFrame.is_empty": [[177, "polars-dataframe-is-empty"]], "polars.DataFrame.sample": [[209, "polars-dataframe-sample"]], "polars.DataFrame.get_column": [[161, "polars-dataframe-get-column"]], "polars.DataFrame.explode": [[152, "polars-dataframe-explode"]], "polars.DataFrame.std": [[220, "polars-dataframe-std"]], "polars.DataFrame.fill_null": [[155, "polars-dataframe-fill-null"]], "polars.DataFrame.lazy": [[184, "polars-dataframe-lazy"]], "polars.DataFrame.product": [[199, "polars-dataframe-product"]], "polars.DataFrame.head": [[171, "polars-dataframe-head"]], "polars.DataFrame.row": [[206, "polars-dataframe-row"]], "polars.DataFrame.slice": [[218, "polars-dataframe-slice"]], "polars.DataFrame.find_idx_by_name": [[157, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.height": [[172, "polars-dataframe-height"]], "polars.DataFrame.groupby_dynamic": [[168, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.dtypes": [[150, "polars-dataframe-dtypes"]], "polars.DataFrame.groupby": [[167, "polars-dataframe-groupby"]], "polars.DataFrame.shift": [[215, "polars-dataframe-shift"]], "polars.DataFrame.shift_and_fill": [[216, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.select_seq": [[212, "polars-dataframe-select-seq"]], "polars.DataFrame.get_columns": [[162, "polars-dataframe-get-columns"]], "polars.DataFrame.limit": [[185, "polars-dataframe-limit"]], "polars.DataFrame.drop_in_place": [[148, "polars-dataframe-drop-in-place"]], "polars.DataFrame.null_count": [[195, "polars-dataframe-null-count"]], "polars.DataFrame.replace": [[203, "polars-dataframe-replace"]], "polars.DataFrame.shrink_to_fit": [[217, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.frame_equal": [[160, "polars-dataframe-frame-equal"]], "polars.DataFrame.hstack": [[173, "polars-dataframe-hstack"]], "polars.DataFrame.max": [[187, "polars-dataframe-max"]], "polars.DataFrame.group_by": [[164, "polars-dataframe-group-by"]], "polars.DataFrame.quantile": [[200, "polars-dataframe-quantile"]], "polars.DataFrame.reverse": [[205, "polars-dataframe-reverse"]], "polars.DataFrame.set_sorted": [[213, "polars-dataframe-set-sorted"]], "polars.DataFrame.interpolate": [[175, "polars-dataframe-interpolate"]], "polars.DataFrame.min": [[192, "polars-dataframe-min"]], "polars.DataFrame.pivot": [[198, "polars-dataframe-pivot"]], "polars.DataFrame.group_by_dynamic": [[165, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.is_duplicated": [[176, "polars-dataframe-is-duplicated"]], "polars.DataFrame.join": [[182, "polars-dataframe-join"]], "polars.DataFrame.hash_rows": [[170, "polars-dataframe-hash-rows"]], "polars.DataFrame.mean": [[188, "polars-dataframe-mean"]], "polars.DataFrame.join_asof": [[183, "polars-dataframe-join-asof"]], "polars.dataframe.group_by.GroupBy.map_groups": [[254, "polars-dataframe-group-by-groupby-map-groups"]], "polars.DataFrame.transpose": [[234, "polars-dataframe-transpose"]], "Data types": [[271, "data-types"]], "Nested": [[271, "nested"]], "Other": [[271, "other"]], "polars.Expr.add": [[275, "polars-expr-add"]], "polars.Expr.arg_min": [[291, "polars-expr-arg-min"]], "polars.Expr.approx_n_unique": [[283, "polars-expr-approx-n-unique"]], "polars.dataframe.group_by.GroupBy.apply": [[249, "polars-dataframe-group-by-groupby-apply"]], "polars.DataFrame.to_struct": [[232, "polars-dataframe-to-struct"]], "polars.DataFrame.update": [[238, "polars-dataframe-update"]], "polars.dataframe.group_by.GroupBy.max": [[255, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.apply": [[282, "polars-expr-apply"]], "polars.DataFrame.to_dict": [[225, "polars-dataframe-to-dict"]], "polars.Expr.agg_groups": [[276, "polars-expr-agg-groups"]], "polars.DataFrame.to_numpy": [[229, "polars-dataframe-to-numpy"]], "polars.DataFrame.unstack": [[237, "polars-dataframe-unstack"]], "polars.Expr.abs": [[274, "polars-expr-abs"]], "polars.dataframe.group_by.GroupBy.tail": [[262, "polars-dataframe-group-by-groupby-tail"]], "polars.DataFrame.take_every": [[223, "polars-dataframe-take-every"]], "polars.Expr.arccosh": [[285, "polars-expr-arccosh"]], "polars.Expr.arctan": [[288, "polars-expr-arctan"]], "polars.Expr.arcsinh": [[287, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.agg": [[247, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.with_columns_seq": [[244, "polars-dataframe-with-columns-seq"]], "DataFrame": [[268, "dataframe"]], "polars.Expr.arg_max": [[290, "polars-expr-arg-max"]], "polars.DataFrame.to_pandas": [[230, "polars-dataframe-to-pandas"]], "polars.Expr.alias": [[277, "polars-expr-alias"]], "polars.Expr.arccos": [[284, "polars-expr-arccos"]], "polars.DataFrame.var": [[240, "polars-dataframe-var"]], "polars.DataFrame.upsample": [[239, "polars-dataframe-upsample"]], "polars.dataframe.group_by.GroupBy.__iter__": [[246, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.n_unique": [[259, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.any": [[280, "polars-expr-any"]], "polars.Expr.arg_unique": [[294, "polars-expr-arg-unique"]], "polars.Expr.arcsin": [[286, "polars-expr-arcsin"]], "polars.Expr.arctanh": [[289, "polars-expr-arctanh"]], "polars.dataframe.group_by.GroupBy.quantile": [[260, "polars-dataframe-group-by-groupby-quantile"]], "polars.DataFrame.with_row_count": [[245, "polars-dataframe-with-row-count"]], "polars.DataFrame.to_init_repr": [[228, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_dicts": [[226, "polars-dataframe-to-dicts"]], "polars.dataframe.group_by.GroupBy.median": [[257, "polars-dataframe-group-by-groupby-median"]], "polars.DataFrame.unnest": [[236, "polars-dataframe-unnest"]], "polars.DataFrame.unique": [[235, "polars-dataframe-unique"]], "polars.dataframe.group_by.GroupBy.mean": [[256, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.arg_sort": [[292, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.count": [[250, "polars-dataframe-group-by-groupby-count"]], "polars.DataFrame.to_dummies": [[227, "polars-dataframe-to-dummies"]], "Exceptions": [[272, "exceptions"]], "polars.DataFrame.width": [[242, "polars-dataframe-width"]], "polars.Expr.and_": [[279, "polars-expr-and"]], "polars.DataFrame.with_columns": [[243, "polars-dataframe-with-columns"]], "polars.dataframe.group_by.GroupBy.sum": [[261, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.last": [[253, "polars-dataframe-group-by-groupby-last"]], "polars.DataFrame.to_series": [[231, "polars-dataframe-to-series"]], "polars.Expr.all": [[278, "polars-expr-all"]], "polars.DataFrame.to_arrow": [[224, "polars-dataframe-to-arrow"]], "polars.Expr.arg_true": [[293, "polars-expr-arg-true"]], "polars.DataFrame.tail": [[222, "polars-dataframe-tail"]], "polars.DataFrame.vstack": [[241, "polars-dataframe-vstack"]], "polars.dataframe.group_by.GroupBy.all": [[248, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.head": [[252, "polars-dataframe-group-by-groupby-head"]], "polars.DataFrame.top_k": [[233, "polars-dataframe-top-k"]], "polars.dataframe.group_by.GroupBy.first": [[251, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.append": [[281, "polars-expr-append"]], "polars.Expr.arr.max": [[295, "polars-expr-arr-max"]], "polars.dataframe.group_by.GroupBy.min": [[258, "polars-dataframe-group-by-groupby-min"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[33, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[34, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[35, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[36, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[37, "polars.DataType"]], "__init__() (polars.datatype method)": [[37, "polars.DataType.__init__"]], "date (class in polars)": [[38, "polars.Date"]], "__init__() (polars.date method)": [[38, "polars.Date.__init__"]], "datetime (class in polars)": [[39, "polars.Datetime"]], "__init__() (polars.datetime method)": [[39, "polars.Datetime.__init__"]], "decimal (class in polars)": [[40, "polars.Decimal"]], "__init__() (polars.decimal method)": [[40, "polars.Decimal.__init__"]], "duration (class in polars)": [[41, "polars.Duration"]], "__init__() (polars.duration method)": [[41, "polars.Duration.__init__"]], "float32 (class in polars)": [[42, "polars.Float32"]], "__init__() (polars.float32 method)": [[42, "polars.Float32.__init__"]], "float64 (class in polars)": [[43, "polars.Float64"]], "__init__() (polars.float64 method)": [[43, "polars.Float64.__init__"]], "int16 (class in polars)": [[44, "polars.Int16"]], "__init__() (polars.int16 method)": [[44, "polars.Int16.__init__"]], "int32 (class in polars)": [[45, "polars.Int32"]], "__init__() (polars.int32 method)": [[45, "polars.Int32.__init__"]], "int64 (class in polars)": [[46, "polars.Int64"]], "__init__() (polars.int64 method)": [[46, "polars.Int64.__init__"]], "int8 (class in polars)": [[47, "polars.Int8"]], "__init__() (polars.int8 method)": [[47, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[51, "polars.List"]], "__init__() (polars.list method)": [[51, "polars.List.__init__"]], "null (class in polars)": [[52, "polars.Null"]], "__init__() (polars.null method)": [[52, "polars.Null.__init__"]], "object (class in polars)": [[53, "polars.Object"]], "__init__() (polars.object method)": [[53, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[54, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[55, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[56, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[57, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[58, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[59, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[60, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[60, "polars.StringCache.__init__"]], "struct (class in polars)": [[61, "polars.Struct"]], "__init__() (polars.struct method)": [[61, "polars.Struct.__init__"]], "time (class in polars)": [[62, "polars.Time"]], "__init__() (polars.time method)": [[62, "polars.Time.__init__"]], "uint16 (class in polars)": [[63, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[63, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[64, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[64, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[65, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[65, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[66, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[66, "polars.UInt8.__init__"]], "unknown (class in polars)": [[67, "polars.Unknown"]], "__init__() (polars.unknown method)": [[67, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[68, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[68, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[69, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[70, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[71, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[72, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[73, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[74, "polars.build_info"]], "collect_all() (in module polars)": [[75, "polars.collect_all"]], "concat() (in module polars)": [[76, "polars.concat"]], "enable_string_cache() (in module polars)": [[77, "polars.enable_string_cache"]], "arrowerror": [[78, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[79, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[80, "polars.exceptions.ComputeError"]], "duplicateerror": [[81, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[82, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[83, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[84, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[85, "polars.exceptions.PolarsPanicError"]], "rowserror": [[86, "polars.exceptions.RowsError"]], "schemaerror": [[87, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[88, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[89, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[90, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[91, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[92, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[93, "polars.from_dataframe"]], "from_dict() (in module polars)": [[94, "polars.from_dict"]], "from_dicts() (in module polars)": [[95, "polars.from_dicts"]], "from_numpy() (in module polars)": [[96, "polars.from_numpy"]], "from_pandas() (in module polars)": [[97, "polars.from_pandas"]], "from_records() (in module polars)": [[98, "polars.from_records"]], "from_repr() (in module polars)": [[99, "polars.from_repr"]], "get_index_type() (in module polars)": [[100, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[101, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[102, "polars.read_avro"]], "read_csv() (in module polars)": [[103, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[104, "polars.read_csv_batched"]], "read_database() (in module polars)": [[105, "polars.read_database"]], "read_database_uri() (in module polars)": [[106, "polars.read_database_uri"]], "read_delta() (in module polars)": [[107, "polars.read_delta"]], "read_excel() (in module polars)": [[108, "polars.read_excel"]], "read_ipc() (in module polars)": [[109, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[110, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[111, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[112, "polars.read_json"]], "read_ndjson() (in module polars)": [[113, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[114, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[115, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[116, "polars.scan_csv"]], "scan_delta() (in module polars)": [[117, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[118, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[119, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[120, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[121, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[122, "polars.set_random_seed"]], "show_versions() (in module polars)": [[123, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[124, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[125, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[126, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[126, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[129, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[130, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[131, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[132, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[133, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[134, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[137, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[138, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[139, "polars.DataFrame.approx_n_unique"]], "approx_unique() (polars.dataframe method)": [[140, "polars.DataFrame.approx_unique"]], "bottom_k() (polars.dataframe method)": [[141, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[142, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[143, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[144, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[145, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[146, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[147, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[148, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[149, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[150, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[151, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[152, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[153, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[154, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[155, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[156, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[157, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[158, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[159, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[160, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[161, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[162, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[163, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[164, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[165, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[166, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[167, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[168, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[169, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[170, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[171, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[172, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[173, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[174, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[175, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[176, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[177, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[178, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[179, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[180, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[181, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[182, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[183, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[184, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[185, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[186, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[187, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[188, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[189, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[190, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[191, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[192, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[193, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[194, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[195, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[196, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[197, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[198, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[199, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[200, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[201, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[202, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[203, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[204, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[205, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[206, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[207, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[208, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[209, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[210, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[211, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[212, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[213, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[214, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[215, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[216, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[217, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[218, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[219, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[220, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[221, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[222, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[223, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[224, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[225, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[226, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[227, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[228, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[229, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[230, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[231, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[232, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[233, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[234, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[235, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[236, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[237, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[238, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[239, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[240, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[241, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[242, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[243, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[244, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[245, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[246, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[247, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[248, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[249, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[250, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[251, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[252, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[253, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[254, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[255, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[256, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[257, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[258, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[259, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[260, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[261, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[262, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[274, "polars.Expr.abs"]], "add() (polars.expr method)": [[275, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[276, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[277, "polars.Expr.alias"]], "all() (polars.expr method)": [[278, "polars.Expr.all"]], "and_() (polars.expr method)": [[279, "polars.Expr.and_"]], "any() (polars.expr method)": [[280, "polars.Expr.any"]], "append() (polars.expr method)": [[281, "polars.Expr.append"]], "apply() (polars.expr method)": [[282, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[283, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[284, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[285, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[286, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[287, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[288, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[289, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[290, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[291, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[292, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[293, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[294, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[295, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[296, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[297, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[298, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[299, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[300, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[301, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[302, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[303, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[304, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[305, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[306, "polars.Expr.cache"]], "cast() (polars.expr method)": [[307, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[308, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[309, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[310, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[311, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[312, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[313, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[314, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[315, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[316, "polars.Expr.cosh"]], "count() (polars.expr method)": [[317, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[318, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[319, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[320, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[321, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[322, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[323, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[324, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[325, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[326, "polars.Expr.diff"]], "dot() (polars.expr method)": [[327, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[328, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[329, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[330, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[331, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[332, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[333, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[334, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[335, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[336, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[337, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[338, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[339, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[340, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[341, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[342, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[343, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[344, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[345, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[346, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[347, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[348, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[349, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[350, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[351, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[352, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[353, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[354, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[355, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[356, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[357, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[358, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[359, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[360, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[361, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[362, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[363, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[364, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[365, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[366, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[367, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[368, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[369, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[370, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[371, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[372, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[373, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[374, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[375, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[376, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[377, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[378, "polars.Expr.exp"]], "explode() (polars.expr method)": [[379, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[380, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[381, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[382, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[383, "polars.Expr.filter"]], "first() (polars.expr method)": [[384, "polars.Expr.first"]], "flatten() (polars.expr method)": [[385, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[386, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[387, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[388, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[389, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[390, "polars.Expr.ge"]], "gt() (polars.expr method)": [[391, "polars.Expr.gt"]], "hash() (polars.expr method)": [[392, "polars.Expr.hash"]], "head() (polars.expr method)": [[393, "polars.Expr.head"]], "implode() (polars.expr method)": [[394, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[395, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[396, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[397, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[398, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[399, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[400, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[401, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[402, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[403, "polars.Expr.is_last"]], "is_nan() (polars.expr method)": [[404, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[405, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[406, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[407, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[408, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[409, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[410, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[411, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[412, "polars.Expr.last"]], "le() (polars.expr method)": [[413, "polars.Expr.le"]], "len() (polars.expr method)": [[414, "polars.Expr.len"]], "limit() (polars.expr method)": [[415, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[416, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[417, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[418, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[419, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[420, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[421, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[422, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[423, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[424, "polars.Expr.list.difference"]], "eval() (polars.expr.list method)": [[425, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[426, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[427, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[428, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[429, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[430, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[431, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[432, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[433, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[434, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[435, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[436, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[437, "polars.Expr.list.reverse"]], "set_difference() (polars.expr.list method)": [[438, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[439, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[440, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[441, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[442, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[443, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[444, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[445, "polars.Expr.list.sum"]], "symmetric_difference() (polars.expr.list method)": [[446, "polars.Expr.list.symmetric_difference"]], "tail() (polars.expr.list method)": [[447, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[448, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[449, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[450, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[451, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[452, "polars.Expr.log"]], "log10() (polars.expr method)": [[453, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[454, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[455, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[456, "polars.Expr.lt"]], "map() (polars.expr method)": [[457, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[458, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[459, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[460, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[461, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[462, "polars.Expr.max"]], "mean() (polars.expr method)": [[463, "polars.Expr.mean"]], "median() (polars.expr method)": [[464, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[465, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[466, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[467, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[468, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[469, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[470, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[471, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[472, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[473, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[474, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[475, "polars.Expr.min"]], "mod() (polars.expr method)": [[476, "polars.Expr.mod"]], "mode() (polars.expr method)": [[477, "polars.Expr.mode"]], "mul() (polars.expr method)": [[478, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[479, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[480, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[481, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[482, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[483, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[484, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[485, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[486, "polars.Expr.or_"]], "over() (polars.expr method)": [[487, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[488, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[489, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[490, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[491, "polars.Expr.prefix"]], "product() (polars.expr method)": [[492, "polars.Expr.product"]], "qcut() (polars.expr method)": [[493, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[494, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[495, "polars.Expr.radians"]], "rank() (polars.expr method)": [[496, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[497, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[498, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[499, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[500, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[501, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[502, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[503, "polars.Expr.rle_id"]], "rolling_apply() (polars.expr method)": [[504, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[505, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[506, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[507, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[508, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[509, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[510, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[511, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[512, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[513, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[514, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[515, "polars.Expr.round"]], "sample() (polars.expr method)": [[516, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[517, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[518, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[519, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[520, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[521, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[522, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[523, "polars.Expr.sign"]], "sin() (polars.expr method)": [[524, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[525, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[526, "polars.Expr.skew"]], "slice() (polars.expr method)": [[527, "polars.Expr.slice"]], "sort() (polars.expr method)": [[528, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[529, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[530, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[531, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[532, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[533, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[534, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[535, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[536, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[537, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[538, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[539, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[540, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[541, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[542, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[543, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[544, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[545, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[546, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[547, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[548, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[549, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[550, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[551, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[552, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[553, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[554, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[555, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[556, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[557, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[558, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[559, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[560, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[561, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[562, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[563, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[564, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[565, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[566, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[567, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[568, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[569, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[570, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[571, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[572, "polars.Expr.sum"]], "tail() (polars.expr method)": [[573, "polars.Expr.tail"]], "take() (polars.expr method)": [[574, "polars.Expr.take"]], "take_every() (polars.expr method)": [[575, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[576, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[577, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[578, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[579, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[580, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[581, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[582, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[583, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[584, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[585, "polars.Expr.var"]], "where() (polars.expr method)": [[586, "polars.Expr.where"]], "xor() (polars.expr method)": [[587, "polars.Expr.xor"]], "all() (in module polars)": [[588, "polars.all"]], "all_horizontal() (in module polars)": [[589, "polars.all_horizontal"]], "any() (in module polars)": [[590, "polars.any"]], "any_horizontal() (in module polars)": [[591, "polars.any_horizontal"]], "apply() (in module polars)": [[592, "polars.apply"]], "approx_n_unique() (in module polars)": [[593, "polars.approx_n_unique"]], "arange() (in module polars)": [[594, "polars.arange"]], "arctan2() (in module polars)": [[595, "polars.arctan2"]], "arctan2d() (in module polars)": [[596, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[597, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[598, "polars.arg_where"]], "avg() (in module polars)": [[599, "polars.avg"]], "coalesce() (in module polars)": [[600, "polars.coalesce"]], "concat_list() (in module polars)": [[601, "polars.concat_list"]], "concat_str() (in module polars)": [[602, "polars.concat_str"]], "corr() (in module polars)": [[603, "polars.corr"]], "count() (in module polars)": [[604, "polars.count"]], "cov() (in module polars)": [[605, "polars.cov"]], "cumfold() (in module polars)": [[606, "polars.cumfold"]], "cumreduce() (in module polars)": [[607, "polars.cumreduce"]], "cumsum() (in module polars)": [[608, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[609, "polars.cumsum_horizontal"]], "date() (in module polars)": [[610, "polars.date"]], "date_range() (in module polars)": [[611, "polars.date_range"]], "date_ranges() (in module polars)": [[612, "polars.date_ranges"]], "datetime() (in module polars)": [[613, "polars.datetime"]], "duration() (in module polars)": [[614, "polars.duration"]], "element() (in module polars)": [[615, "polars.element"]], "exclude() (in module polars)": [[616, "polars.exclude"]], "first() (in module polars)": [[617, "polars.first"]], "fold() (in module polars)": [[618, "polars.fold"]], "format() (in module polars)": [[619, "polars.format"]], "from_epoch() (in module polars)": [[620, "polars.from_epoch"]], "groups() (in module polars)": [[621, "polars.groups"]], "head() (in module polars)": [[622, "polars.head"]], "implode() (in module polars)": [[623, "polars.implode"]], "int_range() (in module polars)": [[624, "polars.int_range"]], "int_ranges() (in module polars)": [[625, "polars.int_ranges"]], "last() (in module polars)": [[626, "polars.last"]], "lit() (in module polars)": [[627, "polars.lit"]], "map() (in module polars)": [[628, "polars.map"]], "map_batches() (in module polars)": [[629, "polars.map_batches"]], "map_groups() (in module polars)": [[630, "polars.map_groups"]], "max() (in module polars)": [[631, "polars.max"]], "max_horizontal() (in module polars)": [[632, "polars.max_horizontal"]], "mean() (in module polars)": [[633, "polars.mean"]], "median() (in module polars)": [[634, "polars.median"]], "min() (in module polars)": [[635, "polars.min"]], "min_horizontal() (in module polars)": [[636, "polars.min_horizontal"]], "n_unique() (in module polars)": [[637, "polars.n_unique"]], "ones() (in module polars)": [[638, "polars.ones"]], "quantile() (in module polars)": [[639, "polars.quantile"]], "reduce() (in module polars)": [[640, "polars.reduce"]], "repeat() (in module polars)": [[641, "polars.repeat"]], "rolling_corr() (in module polars)": [[642, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[643, "polars.rolling_cov"]], "select() (in module polars)": [[644, "polars.select"]], "sql_expr() (in module polars)": [[645, "polars.sql_expr"]], "std() (in module polars)": [[646, "polars.std"]], "struct() (in module polars)": [[647, "polars.struct"]], "sum() (in module polars)": [[648, "polars.sum"]], "sum_horizontal() (in module polars)": [[649, "polars.sum_horizontal"]], "tail() (in module polars)": [[650, "polars.tail"]], "time() (in module polars)": [[651, "polars.time"]], "time_range() (in module polars)": [[652, "polars.time_range"]], "time_ranges() (in module polars)": [[653, "polars.time_ranges"]], "var() (in module polars)": [[654, "polars.var"]], "when() (in module polars)": [[655, "polars.when"]], "zeros() (in module polars)": [[656, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[679, "polars.LazyFrame.approx_n_unique"]], "approx_unique() (polars.lazyframe method)": [[680, "polars.LazyFrame.approx_unique"]], "bottom_k() (polars.lazyframe method)": [[681, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[682, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[683, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[684, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[685, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[686, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[687, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[688, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[689, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[690, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[691, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[692, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[693, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[694, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[695, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[696, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[697, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[698, "polars.LazyFrame.from_json"]], "group_by() (polars.lazyframe method)": [[699, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[700, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[701, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[702, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[703, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[704, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[705, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[706, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[707, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[708, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[709, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[710, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[711, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[712, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[713, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[714, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[715, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[716, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[717, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[718, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[719, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[720, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[721, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[722, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[723, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[724, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[725, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[726, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[727, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[728, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[729, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[730, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[731, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[732, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[733, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[734, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[735, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[736, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[737, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[738, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[739, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[740, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[741, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[742, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[743, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[744, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[745, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[746, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[747, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[748, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[749, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[750, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[751, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[752, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[753, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[754, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[755, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[756, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[757, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[758, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[759, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[760, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[761, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[762, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[763, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[764, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[765, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[766, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[767, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[768, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[775, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[775, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[775, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[775, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[775, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[775, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[775, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[775, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[775, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[775, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[775, "polars.selectors.first"]], "float() (in module polars.selectors)": [[775, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[775, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[775, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[775, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[775, "polars.selectors.matches"]], "module": [[775, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[775, "polars.selectors.numeric"]], "polars.selectors": [[775, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[775, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[775, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[775, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[775, "polars.selectors.time"]], "abs() (polars.series method)": [[777, "polars.Series.abs"]], "alias() (polars.series method)": [[778, "polars.Series.alias"]], "all() (polars.series method)": [[779, "polars.Series.all"]], "any() (polars.series method)": [[780, "polars.Series.any"]], "append() (polars.series method)": [[781, "polars.Series.append"]], "apply() (polars.series method)": [[782, "polars.Series.apply"]], "arccos() (polars.series method)": [[783, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[784, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[785, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[786, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[787, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[788, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[789, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[790, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[791, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[792, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[793, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[794, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[795, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[796, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[797, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[798, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[799, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[800, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[801, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[802, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[803, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[804, "polars.Series.cast"]], "cat (polars.series attribute)": [[805, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[806, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[807, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[808, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[809, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[810, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[811, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[812, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[813, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[814, "polars.Series.clear"]], "clip() (polars.series method)": [[815, "polars.Series.clip"]], "clip_max() (polars.series method)": [[816, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[817, "polars.Series.clip_min"]], "clone() (polars.series method)": [[818, "polars.Series.clone"]], "cos() (polars.series method)": [[819, "polars.Series.cos"]], "cosh() (polars.series method)": [[820, "polars.Series.cosh"]], "cummax() (polars.series method)": [[821, "polars.Series.cummax"]], "cummin() (polars.series method)": [[822, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[823, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[824, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[825, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[826, "polars.Series.cut"]], "describe() (polars.series method)": [[827, "polars.Series.describe"]], "diff() (polars.series method)": [[828, "polars.Series.diff"]], "dot() (polars.series method)": [[829, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[830, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[831, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[832, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[833, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[834, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[835, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[836, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[837, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[838, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[839, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[840, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[841, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[842, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[843, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[844, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[845, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[846, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[847, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[848, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[849, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[850, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[851, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[852, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[853, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[854, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[855, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[856, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[857, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[858, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[859, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[860, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[861, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[862, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[863, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[864, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[865, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[866, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[867, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[868, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[869, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[870, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[871, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[872, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[873, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[874, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[875, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[876, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[877, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[878, "polars.Series.dtype"]], "entropy() (polars.series method)": [[879, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[880, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[881, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[882, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[883, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[884, "polars.Series.exp"]], "explode() (polars.series method)": [[885, "polars.Series.explode"]], "extend() (polars.series method)": [[886, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[887, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[888, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[889, "polars.Series.fill_null"]], "filter() (polars.series method)": [[890, "polars.Series.filter"]], "flags (polars.series attribute)": [[891, "polars.Series.flags"]], "floor() (polars.series method)": [[892, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[893, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[894, "polars.Series.has_validity"]], "hash() (polars.series method)": [[895, "polars.Series.hash"]], "head() (polars.series method)": [[896, "polars.Series.head"]], "hist() (polars.series method)": [[897, "polars.Series.hist"]], "implode() (polars.series method)": [[898, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[899, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[900, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[901, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[902, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[903, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[904, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[905, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[906, "polars.Series.is_first"]], "is_float() (polars.series method)": [[907, "polars.Series.is_float"]], "is_in() (polars.series method)": [[908, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[909, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[910, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[911, "polars.Series.is_last"]], "is_nan() (polars.series method)": [[912, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[913, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[914, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[915, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[916, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[917, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[918, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[919, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[920, "polars.Series.is_utf8"]], "item() (polars.series method)": [[921, "polars.Series.item"]], "kurtosis() (polars.series method)": [[922, "polars.Series.kurtosis"]], "len() (polars.series method)": [[923, "polars.Series.len"]], "limit() (polars.series method)": [[924, "polars.Series.limit"]], "list (polars.series attribute)": [[925, "polars.Series.list"]], "all() (polars.series.list method)": [[926, "polars.Series.list.all"]], "any() (polars.series.list method)": [[927, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[928, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[929, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[930, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[931, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[932, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[933, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[934, "polars.Series.list.difference"]], "eval() (polars.series.list method)": [[935, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[936, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[937, "polars.Series.list.first"]], "get() (polars.series.list method)": [[938, "polars.Series.list.get"]], "head() (polars.series.list method)": [[939, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[940, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[941, "polars.Series.list.join"]], "last() (polars.series.list method)": [[942, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[943, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[944, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[945, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[946, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[947, "polars.Series.list.reverse"]], "set_difference() (polars.series.list method)": [[948, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[949, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[950, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[951, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[952, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[953, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[954, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[955, "polars.Series.list.sum"]], "symmetric_difference() (polars.series.list method)": [[956, "polars.Series.list.symmetric_difference"]], "tail() (polars.series.list method)": [[957, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[958, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[959, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[960, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[961, "polars.Series.list.unique"]], "log() (polars.series method)": [[962, "polars.Series.log"]], "log10() (polars.series method)": [[963, "polars.Series.log10"]], "log1p() (polars.series method)": [[964, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[965, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[966, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[967, "polars.Series.map_elements"]], "max() (polars.series method)": [[968, "polars.Series.max"]], "mean() (polars.series method)": [[969, "polars.Series.mean"]], "median() (polars.series method)": [[970, "polars.Series.median"]], "min() (polars.series method)": [[971, "polars.Series.min"]], "mode() (polars.series method)": [[972, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[973, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[974, "polars.Series.n_unique"]], "name (polars.series attribute)": [[975, "polars.Series.name"]], "nan_max() (polars.series method)": [[976, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[977, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[978, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[979, "polars.Series.not_"]], "null_count() (polars.series method)": [[980, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[981, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[982, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[983, "polars.Series.peak_min"]], "product() (polars.series method)": [[984, "polars.Series.product"]], "qcut() (polars.series method)": [[985, "polars.Series.qcut"]], "quantile() (polars.series method)": [[986, "polars.Series.quantile"]], "rank() (polars.series method)": [[987, "polars.Series.rank"]], "rechunk() (polars.series method)": [[988, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[989, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[990, "polars.Series.rename"]], "reshape() (polars.series method)": [[991, "polars.Series.reshape"]], "reverse() (polars.series method)": [[992, "polars.Series.reverse"]], "rle() (polars.series method)": [[993, "polars.Series.rle"]], "rle_id() (polars.series method)": [[994, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[995, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[996, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[997, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[998, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[999, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1000, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1001, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1002, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1003, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1004, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1005, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1006, "polars.Series.round"]], "sample() (polars.series method)": [[1007, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[1008, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1009, "polars.Series.series_equal"]], "set() (polars.series method)": [[1010, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1011, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1012, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1013, "polars.Series.shape"]], "shift() (polars.series method)": [[1014, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1015, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1016, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1017, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1018, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1019, "polars.Series.sign"]], "sin() (polars.series method)": [[1020, "polars.Series.sin"]], "sinh() (polars.series method)": [[1021, "polars.Series.sinh"]], "skew() (polars.series method)": [[1022, "polars.Series.skew"]], "slice() (polars.series method)": [[1023, "polars.Series.slice"]], "sort() (polars.series method)": [[1024, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1025, "polars.Series.sqrt"]], "std() (polars.series method)": [[1026, "polars.Series.std"]], "str (polars.series attribute)": [[1027, "polars.Series.str"]], "concat() (polars.series.str method)": [[1028, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1029, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1030, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[1031, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1032, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1033, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1034, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1035, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1036, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1037, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[1038, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1039, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[1040, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1041, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1042, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1043, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[1044, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1045, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1046, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1047, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1048, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1049, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1050, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1051, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1052, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1053, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1054, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[1055, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1056, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1057, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1058, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1059, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1060, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1061, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1062, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1063, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1064, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1065, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1066, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1067, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1068, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1069, "polars.Series.sum"]], "tail() (polars.series method)": [[1070, "polars.Series.tail"]], "take() (polars.series method)": [[1071, "polars.Series.take"]], "take_every() (polars.series method)": [[1072, "polars.Series.take_every"]], "tan() (polars.series method)": [[1073, "polars.Series.tan"]], "tanh() (polars.series method)": [[1074, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1075, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1076, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1077, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1078, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1079, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1080, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1081, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1082, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1083, "polars.Series.top_k"]], "unique() (polars.series method)": [[1084, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1085, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1086, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1087, "polars.Series.value_counts"]], "var() (polars.series method)": [[1088, "polars.Series.var"]], "view() (polars.series method)": [[1089, "polars.Series.view"]], "zip_with() (polars.series method)": [[1090, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1106, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1106, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1106, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1106, "polars.SQLContext.__init__"]]}})